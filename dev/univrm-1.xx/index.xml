<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – UniVRM-1.XX</title><link>https://vrm.dev/dev/univrm-1.xx/</link><description>Recent content in UniVRM-1.XX on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 21 Apr 2020 17:12:49 +0900</lastBuildDate><atom:link href="https://vrm.dev/dev/univrm-1.xx/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 構成</title><link>https://vrm.dev/dev/univrm-1.xx/structure/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/structure/</guid><description>
&lt;h2 id="assetsvrmlib">Assets/vrmlib&lt;/h2>
&lt;p>GLTFからバイト列を切り出して、index 参照を実体化して作業しやすくした中間の入れ物 &lt;code>VrmLib.Model&lt;/code>。&lt;/p>
&lt;h2 id="assetsprotobufserializer">Assets/ProtobufSerializer&lt;/h2>
&lt;p>VRM-1.0 の読み書き。
ProtocolBufferで定義して、Jsonのシリアライザを生成したもの。&lt;/p>
&lt;p>VRM-1.0 から中間形式の &lt;code>VrmLib.Model&lt;/code> に移し替える。&lt;/p>
&lt;ul>
&lt;li>&lt;code>VRM-1.0 &amp;lt;=&amp;gt; VrmLib.Model&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="assetsvrm">Assets/VRM&lt;/h2>
&lt;p>UniVRM-0.55 に &lt;code>package.json&lt;/code> を追加したもの。&lt;/p>
&lt;ul>
&lt;li>MToon shader&lt;/li>
&lt;li>UniUnlit shader&lt;/li>
&lt;li>VRM-0.X のシリアライザ&lt;/li>
&lt;/ul>
&lt;h2 id="assetsunivrm0xreader">Assets/UniVRM0XReader&lt;/h2>
&lt;p>VRM-0.X から中間形式の &lt;code>VrmLib.Model&lt;/code> に移し替える。&lt;/p>
&lt;ul>
&lt;li>&lt;code>VRM-0.x =&amp;gt; VrmLib.Model&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="assetsunivrm-10">Assets/UniVRM-1.0&lt;/h2>
&lt;ul>
&lt;li>&lt;code>VrmLib.Model &amp;lt;=&amp;gt; Unity&lt;/code>&lt;/li>
&lt;li>右手系・左手系の変換&lt;/li>
&lt;li>スクリプトスレッドで実行する必要あり&lt;/li>
&lt;li>GLTF部分(Mesh, Texture, Material, GameObject, SkinnedMeshRendererなど)&lt;/li>
&lt;li>VRM部分(HumanoidAvatar, BlendShapeProxy, LookAt, FirstPersonなど)&lt;/li>
&lt;/ul></description></item><item><title>Docs: BlendShapeProxyの更新</title><link>https://vrm.dev/dev/univrm-1.xx/blendshapeproxy/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/blendshapeproxy/</guid><description>
&lt;h2 id="推奨される-blendshape-周りの更新順番">推奨される BlendShape 周りの更新順番&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#update-order">https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#update-order&lt;/a>&lt;/p>
&lt;p>のように&lt;/p>
&lt;ul>
&lt;li>Humanoid&lt;/li>
&lt;li>LookAt&lt;/li>
&lt;li>BlendShape&lt;/li>
&lt;/ul>
&lt;p>の順が推奨となります。&lt;/p>
&lt;h2 id="lookat-との統合">LookAt との統合&lt;/h2>
&lt;p>LookAt と BlendShape の処理順の問題を軽減するため、 &lt;code>VRMLookAtHead&lt;/code>, &lt;code>VRMLookAtBoneApplyer&lt;/code>, &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> を &lt;code>VRMBlendShapeProxy&lt;/code> に統合しました。&lt;/p>
&lt;h2 id="blendshapeclip-の排他機能">BlendShapeClip の排他機能&lt;/h2>
&lt;p>例えば &lt;code>fan&lt;/code> と &lt;code>blink&lt;/code> が同時に適用されたときに、目がおかしくなるモデルがあります。
このとき、 &lt;code>fan&lt;/code> に対して &lt;code>blink&lt;/code> を無視するフラグを付けられるようにしました。&lt;/p>
&lt;p>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#blendshape-specification">https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#blendshape-specification&lt;/a>&lt;/p>
&lt;ul>
&lt;li>ignoreBlink&lt;/li>
&lt;li>ignoreLookAt&lt;/li>
&lt;li>ignoreMouth&lt;/li>
&lt;/ul>
&lt;p>の３種類があります。&lt;/p>
&lt;h2 id="setvalue-と-apply">SetValue と Apply&lt;/h2>
&lt;p>&lt;code>UniVRM-0.X&lt;/code> には &lt;code>BlendShapeProxyy.SetValueImmediate&lt;/code> と &lt;code>BlendSahpeProxy.SetValue + Apply&lt;/code> という２系統があったのですが、 &lt;code>BlendShapeProxyy.SetValueImmediate&lt;/code> は廃止になりました。&lt;/p>
&lt;p>&lt;code>ignoreBlink&lt;/code> 等を動作させるにはすべての値を蓄積してからまとめて処理する必要があるためです。(最初は、外部にアプリケーション側が貯めて適用する設計だった)&lt;/p>
&lt;h2 id="apply-の呼び出しタイミング">Apply の呼び出しタイミング&lt;/h2>
&lt;h3 id="none">None&lt;/h3>
&lt;p>ユーザーアプリケーション側で明示的に &lt;code>Apply&lt;/code> を呼び出してください。&lt;/p>
&lt;h3 id="update">Update&lt;/h3>
&lt;p>VRMBlendShapeProxy.Update で &lt;code>Apply&lt;/code> が呼ばれます。
VRMBlendShapeProxy.Apply は、後ろの方で処理したいので注意が必要。&lt;/p>
&lt;h3 id="lateupdate">LateUpdate&lt;/h3>
&lt;p>VRMBlendShapeProxy.LateUpdate で &lt;code>Apply&lt;/code> が呼ばれます。
細かい制御が必要ないときに。&lt;/p></description></item><item><title>Docs: UnityPackageManagerを使う</title><link>https://vrm.dev/dev/univrm-1.xx/package/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/package/</guid><description>
&lt;h2 id="univrm-10-の-unitypackage">UniVRM-1.0 の UnityPackage&lt;/h2>
&lt;p>試験的に、パッケージを導入しています。&lt;/p>
&lt;p>github リポジトリのルート以外に &lt;code>package.json&lt;/code> を配置する機能を使っているので、
&lt;code>Unity 2019.3.4f1以降&lt;/code> が必要です。&lt;/p>
&lt;h3 id="導入方法">導入方法&lt;/h3>
&lt;p>UnityPackageManagerのWindow&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/menu_packagemanager.jpg" />
&lt;p>&lt;code>add package from git URL&lt;/code>&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/from_git.jpg" />
&lt;p>パッケージ同士の依存関係を自動でダウンロードしてくれる機能は無いので、以下の git url を順に追加してください。&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders&lt;/code>&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM_1_0.git?path=/Assets/Vrm10&lt;/code> =&amp;gt; VRMShadersに依存&lt;/li>
&lt;/ul>
&lt;h4 id="もしくは-packagesmanifestjson-に直接コピーペーストする">もしくは、 Packages/manifest.json に直接コピーペーストする。&lt;/h4>
&lt;p>以下の内容を追記してください。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">省略&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM_1_0.git?path=/Assets/Vrm10&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">省略&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/vrm-c/UniVRMUtility/blob/master/Packages/manifest.json">https://github.com/vrm-c/UniVRMUtility/blob/master/Packages/manifest.json&lt;/a> は、 &lt;code>UniVRM-1.0&lt;/code> の &lt;code>UnityPackage&lt;/code> を使う例です。&lt;/p>
&lt;p>以下の &amp;ldquo;lock&amp;rdquo; はUnityが自動で更新するので、編集する必要はありません。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#c30">&amp;#34;lock&amp;#34;&lt;/span>&lt;span style="color:#a00;background-color:#faa">:&lt;/span> {
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;HEAD&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;hash&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;198c2c605ded711b21781421e71ba9bdbe0f8728&amp;#34;&lt;/span>
},
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;HEAD&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;hash&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;155acf354735288db0335878179f483901541851&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: API</title><link>https://vrm.dev/dev/univrm-1.xx/api/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/api/</guid><description>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM_1_0/blob/master/Assets/UniVRM-1.0/PlayModeTests/ApiSampleTests.cs">https://github.com/vrm-c/UniVRM_1_0/blob/master/Assets/UniVRM-1.0/PlayModeTests/ApiSampleTests.cs&lt;/a>&lt;/p>
&lt;p>にあります。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vrm-to-model">VRM to Model&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> VrmLib.Model ReadModel(&lt;span style="color:#078;font-weight:bold">string&lt;/span> path)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = File.ReadAllBytes(path);
&lt;span style="color:#069;font-weight:bold">if&lt;/span> (!VrmLib.Glb.TryParse(bytes, &lt;span style="color:#069;font-weight:bold">out&lt;/span> VrmLib.Glb glb, &lt;span style="color:#069;font-weight:bold">out&lt;/span> Exception ex))
{
Debug.LogError(&lt;span style="color:#c30">$&amp;#34;fail to Glb.TryParse: {path} =&amp;gt; {ex}&amp;#34;&lt;/span>);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">null&lt;/span>;
}
&lt;span style="color:#09f;font-style:italic">// both VRM-0.X and VRM-1.0
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> model = UniVRM10.VrmLoader.CreateVrmModel(path);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> model;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="this-is-possible-on-a-thread">This is possible on a thread&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">return&lt;/span> Task.Run(()=&amp;gt;{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> ReadModel(path);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="model-to-gameobject">Model to GameObject&lt;/h2>
&lt;p>This requires a ScriptThread.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> ModelAsset BuildGameObject(VrmLib.Model model, &lt;span style="color:#078;font-weight:bold">bool&lt;/span> showMesh)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> importer = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniVRM10.RuntimeUnityBuilder();
&lt;span style="color:#078;font-weight:bold">var&lt;/span> assets = importer.ToUnityAsset(model, showMesh);
UniVRM10.ComponentBuilder.Build10(model, importer, assets);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> assets;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ロード後にレンダラーを設定する">ロード後にレンダラーを設定する&lt;/h3>
&lt;p>ModelAsset に各種アセットが格納されています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#078;font-weight:bold">var&lt;/span> asset = BuildGameObject(srcModel, &lt;span style="color:#069;font-weight:bold">false&lt;/span>);
&lt;span style="color:#09f;font-style:italic">// renderer setting
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> render &lt;span style="color:#069;font-weight:bold">in&lt;/span> asset.Renderers)
{
&lt;span style="color:#09f;font-style:italic">// show when RuntimeUnityBuilder.ToUnity(showMesh = false)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> render.enabled = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
&lt;span style="color:#09f;font-style:italic">// avoid culling
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span> (render &lt;span style="color:#069;font-weight:bold">is&lt;/span> SkinnedMeshRenderer skinned)
{
skinned.updateWhenOffscreen = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="フレームレートが落ちないようにするtodo">フレームレートが落ちないようにする(TODO)&lt;/h3>
&lt;p>１フレームの処理を小さく小出しにして、スパイクを少なくする場合。&lt;/p>
&lt;h2 id="gameobject-to-model">GameObject to Model&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> VrmLib.Model ToModel(UnityEngine.GameObject target)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> exporter = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniVRM10.RuntimeVrmConverter();
&lt;span style="color:#078;font-weight:bold">var&lt;/span> model = exporter.ToModelFrom10(target);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> model;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="model-to-vrm">Model to VRM&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#078;font-weight:bold">byte&lt;/span>[] ToVrm10(VrmLib.Model model)
{
&lt;span style="color:#09f;font-style:italic">// 右手系に変換
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate(model, VrmLib.Coordinates.Gltf);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = Vrm10.ModelExtensions.ToGlb(model);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> bytes;
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: APIの変更点</title><link>https://vrm.dev/dev/univrm-1.xx/api_update_from_univrm-0.xx/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/api_update_from_univrm-0.xx/</guid><description>
&lt;h2 id="import">Import&lt;/h2>
&lt;ul>
&lt;li>VRMをインポートするために（&lt;code>UniGLTF.ImporterContext.Load&lt;/code>）使用されるクラス&lt;code>VRM.VRMImporterContext&lt;/code>は削除されました。UniVRMインポーターはVRMデータ（&lt;code>UniVRM10.VrmLoader.CreateVrmModel&lt;/code>）を&lt;code>VrmLib.Model&lt;/code>に保存してからUnityに構築します&lt;/li>
&lt;li>&lt;code>UniVRM10.UnityBuilder.ToUnityAsset&lt;/code>は&lt;code>VrmLib.Model&lt;/code>からUnity Assetにデータを転送します。0.XXの &lt;code>UniGLTF.ImporterContext.ShowMeshes&lt;/code>が&lt;code>ToUnityAsset&lt;/code>のboolパラメータに変更されました&lt;/li>
&lt;li>&lt;code>UniVRM10.ComponentBuilder.Build10&lt;/code>はVRM GameObjectに対してMeta, BlendShape, LookAtなどのコンポーネントをセットアップします&lt;/li>
&lt;/ul>
&lt;h3 id="example">Example&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">MyClass&lt;/span> : MonoBehaviour
{
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>
&lt;span style="color:#09f;font-style:italic">/**
&lt;/span>&lt;span style="color:#09f;font-style:italic"> * VRMインポート
&lt;/span>&lt;span style="color:#09f;font-style:italic"> *
&lt;/span>&lt;span style="color:#09f;font-style:italic"> * @return vrmオブジェクト
&lt;/span>&lt;span style="color:#09f;font-style:italic"> */&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GameObject Import()
{
&lt;span style="color:#09f;font-style:italic">// ファイルパス
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> path = &lt;span style="color:#c30">&amp;#34;../YourModel.vrm&amp;#34;&lt;/span>;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> model = UniVRM10.VrmLoader.CreateVrmModel(path);
&lt;span style="color:#09f;font-style:italic">// UniVRM-0.XXのコンポーネントを構築する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> assets = UniVRM10.RuntimeUnityBuilder.ToUnityAsset(model, showMesh: &lt;span style="color:#069;font-weight:bold">false&lt;/span>);
&lt;span style="color:#09f;font-style:italic">// showRenderer = false のときに後で表示する例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> renderer &lt;span style="color:#069;font-weight:bold">in&lt;/span> assets.Renderers)
{
renderer.enabled = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
&lt;span style="color:#09f;font-style:italic">// カリングを避ける
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span> (renderer &lt;span style="color:#069;font-weight:bold">is&lt;/span> SkinnedMeshRenderer skinned)
{
skinned.updateWhenOffscreen = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
}
}
UniVRM10.ComponentBuilder.Build10(model, assets);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> vrmObject = assets.Root; 　　　　　　
&lt;span style="color:#069;font-weight:bold">return&lt;/span> vrmObject;
}
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="export">Export&lt;/h2>
&lt;ul>
&lt;li>VRMをエクスポートするために（&lt;code>UniGLTF.gltfExporter.Export&lt;/code>）使用されるクラス&lt;code>VRM.VRMExporter&lt;/code>は削除されました。UniVRMエクスポーターはVRMデータ（&lt;code>RuntimeVrmConverter.ToModelFrom10&lt;/code>）をVRM GameObjectから&lt;code>VrmLib.Model&lt;/code>に転送してVRMファイルに保存します&lt;/li>
&lt;li>&lt;code>Vrm10.ModelExtensions.ToGlb&lt;/code>はデータを&lt;code>VrmLib.Model&lt;/code>からglbに転送します。&lt;code>.glb&lt;/code>ファイルは&lt;code>.vrm&lt;/code>と交換可能です。UnityとGLTF間の座標変換は &lt;code>VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate&lt;/code>です&lt;/li>
&lt;/ul>
&lt;h3 id="example-1">Example&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">MyClass&lt;/span> : MonoBehaviour
{
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>
&lt;span style="color:#09f;font-style:italic">/**
&lt;/span>&lt;span style="color:#09f;font-style:italic"> * VRMエクスポート
&lt;/span>&lt;span style="color:#09f;font-style:italic"> */&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> Export()
{
&lt;span style="color:#09f;font-style:italic">// ファイルパス
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> importPath = &lt;span style="color:#c30">&amp;#34;../YourModel.vrm&amp;#34;&lt;/span>;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> importedModel = UniVRM10.VrmLoader.CreateVrmModel(importPath);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> assets = UniVRM10.RuntimeUnityBuilder.ToUnityAsset(importedModel);
UniVRM10.ComponentBuilder.Build10(importedModel, assets);　
&lt;span style="color:#09f;font-style:italic">// 1.0でエクスポート
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> exporter = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniVRM10.RuntimeVrmConverter();
&lt;span style="color:#078;font-weight:bold">var&lt;/span> model = exporter.ToModelFrom10(assets.Root);
&lt;span style="color:#09f;font-style:italic">// 右手系に変換
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate(model, VrmLib.Coordinates.Gltf);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> exportedBytes = Vrm10.ModelExtensions.ToGlb(model);
&lt;span style="color:#09f;font-style:italic">// 1.0モデルを書き出す
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> path = &lt;span style="color:#c30">&amp;#34;vrm10.vrm&amp;#34;&lt;/span>;
File.WriteAllBytes(path, exportedBytes);
}
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lookat">LookAt&lt;/h2>
&lt;ul>
&lt;li>LookAt関連クラス&lt;code>VRM.VRMLookAtBoneApplyer&lt;/code>、&lt;code>VRM.VRMLookAtBlendShapeApplyer&lt;/code>、&lt;code>VRM.VRMLookAtHead&lt;/code>が&lt;code>UniVRM10.VRMController&lt;/code>に統合されました&lt;/li>
&lt;li>&lt;code>VRM.LookAtType&lt;/code>は&lt;code>UniVRM10.VRMController.LookAtTypes&lt;/code>に変更されました&lt;/li>
&lt;li>&lt;code>VRMLookAtHead.Target&lt;/code>は&lt;code>VRMController.Gaze&lt;/code>に置き換えられました&lt;/li>
&lt;li>&lt;code>UniVRM10.VRMController.LookAtTargetTypes&lt;/code>を追加しました。自動で頭に対するyaw・pitch角度を取得するか、yaw・pitch角度をセットするの選択肢があります&lt;/li>
&lt;/ul>
&lt;h3 id="example-2">Example&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniVRM10&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">MyClass&lt;/span> : MonoBehaviour
{
&lt;span style="color:#309"> [SerializeField]&lt;/span>
&lt;span style="color:#069;font-weight:bold">private&lt;/span> GameObject _vrmModel;
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [SerializeField]&lt;/span>
&lt;span style="color:#069;font-weight:bold">private&lt;/span> GameObject _targetObject;
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> SpecifyLookAtTarget()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;();
proxy.LookAtTargetType = VRMController.LookAtTargetTypes.CalcYawPitchToGaze;
&lt;span style="color:#09f;font-style:italic">// LookAtターゲットを指定する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;().Gaze = _targetObject.transform;
&lt;span style="color:#09f;font-style:italic">// 頭に対するyaw・pitch角度を取得する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> (yaw, pitch) = proxy.GetLookAtYawPitch();
}
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> SpecifyYawPitchAngle()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;();
proxy.LookAtTargetType = VRMController.LookAtTargetTypes.SetYawPitch;
&lt;span style="color:#09f;font-style:italic">// yaw・pitch角度をセットする
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> proxy.SetLookAtYawPitch(&lt;span style="color:#f60">0&lt;/span>, &lt;span style="color:#f60">0&lt;/span>);
}
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Assetの扱いを変更しました</title><link>https://vrm.dev/dev/univrm-1.xx/unity_assets/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/unity_assets/</guid><description>
&lt;p>&lt;a href="https://docs.unity3d.com/ScriptReference/Experimental.AssetImporters.ScriptedImporter.html">ScriptedImporter&lt;/a> を使っていて、以前の&lt;a href="https://docs.unity3d.com/ScriptReference/AssetPostprocessor.html">AssetPostprocessor&lt;/a>と挙動が異なります。&lt;/p>
&lt;h2 id="0xx">0.xx&lt;/h2>
&lt;p>&lt;code>model.vrm&lt;/code> を Assets フォルダに投入 =&amp;gt; AssetPostprocessor が拡張子 &lt;code>.vrm&lt;/code> のファイルに対して発動&lt;/p>
&lt;ul>
&lt;li>vrmからTextureを取り出し&lt;/li>
&lt;li>vrmからMaterialを取り出し&lt;/li>
&lt;li>vrmからMeshを取り出し&lt;/li>
&lt;li>vrmからBlendShpaeを取り出し&lt;/li>
&lt;li>取り出したAssetからPrefabを組み立て&lt;/li>
&lt;/ul>
&lt;p>たくさんのアセットが生成される。
ファイルシステム上は、&lt;/p>
&lt;ul>
&lt;li>model.vrm&lt;/li>
&lt;li>model.vrm.meta&lt;/li>
&lt;li>model.prefab&lt;/li>
&lt;li>model.prefab.meta&lt;/li>
&lt;li>model.Materials.meta&lt;/li>
&lt;li>model.Materials/*.assets&lt;/li>
&lt;li>model.Materials/*.meta&lt;/li>
&lt;li>&amp;hellip;etc&lt;/li>
&lt;/ul>
&lt;h2 id="10">1.0&lt;/h2>
&lt;p>&lt;code>model.vrm&lt;/code> を Assets フォルダに投入 =&amp;gt; ScriptedImporter が拡張子 &lt;code>.vrm&lt;/code> のファイルに対して発動&lt;/p>
&lt;ul>
&lt;li>ScriptedImporterのアセットができる。&lt;/li>
&lt;li>vrmからTextureを取り出して、ScriptedImporterのアセットのサブアセット(readonly)とする&lt;/li>
&lt;li>vrmからMaterialを取り出して、ScriptedImporterのアセットのサブアセット(readonly)とする&lt;/li>
&lt;li>vrmからMeshを取り出して、ScriptedImporterのアセットのサブアセット(readonly)とする&lt;/li>
&lt;li>vrmからBlendShpaeを取り出して、ScriptedImporterのアセットのサブアセット(readonly)とする&lt;/li>
&lt;li>取り出したAssetからPrefabを組み立てて、ScriptedImporterのアセットのサブアセット(readonly)とする&lt;/li>
&lt;/ul>
&lt;p>見た目上アセットは一つしかできない。
ファイルシステム上は、&lt;/p>
&lt;ul>
&lt;li>model.vrm&lt;/li>
&lt;li>model.vrm.meta&lt;/li>
&lt;/ul>
&lt;p>の２つ。&lt;/p>
&lt;h2 id="extract">Extract&lt;/h2>
&lt;p>ScriptedImporterのアセットのままではreadonlyで変更ができません。
変更可能にするにはExtractが必用です(fbxインポーターのExtractと同じものです)。
変更せずに使う場合は、Extractは不要です。&lt;/p></description></item><item><title>Docs: UniVRM-0.XX と共存する</title><link>https://vrm.dev/dev/univrm-1.xx/use_with_univrm-0.xx/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/use_with_univrm-0.xx/</guid><description>
&lt;p>UniVRM-1.0 と UniVRM-0.XX の両方のインポーターが動作します。&lt;/p>
&lt;p>C# のシンボル &lt;code>VRM_STOP_ASSETPOSTPROCESSOR&lt;/code> を #define することで uniVRM-0.XX のインポーターを停止できます。&lt;/p>
&lt;ul>
&lt;li>Edit - preference - UniVRM&lt;/li>
&lt;/ul>
&lt;p>もしくは、&lt;/p>
&lt;ul>
&lt;li>Eidt - project settings - other settings - Scripting Define Symbols&lt;/li>
&lt;/ul>
&lt;p>から設定できます。&lt;/p></description></item><item><title>Docs: UniVRM使用例</title><link>https://vrm.dev/dev/univrm-1.xx/use_vrm/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/use_vrm/</guid><description>
&lt;h2 id="editorimport">EditorImport&lt;/h2>
&lt;ul>
&lt;li>読み込んでprefabを生成する&lt;/li>
&lt;/ul>
&lt;h2 id="editorexport">EditorExport&lt;/h2>
&lt;ul>
&lt;li>シーンをEditorで作り上げてからエクスポートする&lt;/li>
&lt;/ul>
&lt;h2 id="runtimeimport">RunTimeImport&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRMUtility">https://github.com/vrm-c/UniVRMUtility&lt;/a> SimpleViewer, VRMViewer&lt;/li>
&lt;/ul>
&lt;h2 id="runtimeexport">RuntimeExport&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRMUtility">https://github.com/vrm-c/UniVRMUtility&lt;/a> PrimMan。ランタイムに箱人間をプログラム的に生成してVRMとしてエクスポートする&lt;/li>
&lt;/ul></description></item><item><title>Docs: エクスポート手順</title><link>https://vrm.dev/dev/univrm-1.xx/how_to_export/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/how_to_export/</guid><description>
&lt;p>旧 UniVRM-0.XX から少しエクスポート手順が変わります。&lt;/p>
&lt;ol>
&lt;li>シーンの原点にZ+向きにしてモデルを配置する。必要であれば手動で &lt;code>T-Pose&lt;/code> にしてください。強制 &lt;code>T-Pose&lt;/code> 機能は無くなりました。&lt;/li>
&lt;li>Hierarchy でモデルを右クリック。[UniVRM-1.0.0] - [Export] エクスポートウィンドウを表示&lt;/li>
&lt;li>エクスポートウィンドウのExportボタンを押す&lt;/li>
&lt;li>出力先をダイアログで選択する&lt;/li>
&lt;/ol>
&lt;p>以上です。&lt;/p>
&lt;p>エクスポートウインドウで選択モデルがエクスポート可能か判定があります。エクスポートできる条件は以下の通りです。&lt;/p>
&lt;ul>
&lt;li>ルートにAnimatorコンポーネントが追加してあり、Humanoidアバターがセットしてある&lt;/li>
&lt;li>Metaの必須項目が入力済みである
&lt;ul>
&lt;li>Title&lt;/li>
&lt;li>Version&lt;/li>
&lt;li>Authors&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 過去バージョンのロードについて</title><link>https://vrm.dev/dev/univrm-1.xx/load_vrm-0.x_model/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/load_vrm-0.x_model/</guid><description>
&lt;h2 id="metaの変換について">Metaの変換について&lt;/h2>
&lt;p>VRM-0.Xのモデルは、ロード時に1.0に変換されます。&lt;/p>
&lt;p>TODO:&lt;/p>
&lt;ul>
&lt;li>同じ項目はそのまま&lt;/li>
&lt;li>新規項目は、不許可側に&lt;/li>
&lt;li>内容の変わった項目は、不許可側に&lt;/li>
&lt;li>再配布関連は、 &lt;code>OtherURL&lt;/code>&lt;/li>
&lt;/ul></description></item></channel></rss>