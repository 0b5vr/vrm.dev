<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – How to make VRM file</title><link>https://vrm.dev/en/how_to_make_vrm/</link><description>Recent content in How to make VRM file on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 13 Nov 2020 15:58:05 +0900</lastBuildDate><atom:link href="https://vrm.dev/en/how_to_make_vrm/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 0. Create a Unity project and install UniVRM</title><link>https://vrm.dev/en/docs/vrm/how_to_make_vrm/setup_unity/</link><pubDate>Thu, 12 Nov 2020 11:24:17 +0900</pubDate><guid>https://vrm.dev/en/docs/vrm/how_to_make_vrm/setup_unity/</guid><description>
&lt;h2 id="download-univrm">Download UniVRM&lt;/h2>
&lt;p>Download the latest version of UniVRM (&lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code>) in the release page:&lt;/p>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/download_unitypackage.png" alt="download_unitypackage">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">XX YY&lt;/h4>
XX is UniVRM version. YYYY is version ID
&lt;/div>
&lt;h2 id="install-unity">Install Unity&lt;/h2>
&lt;p>&lt;a href="https://docs.unity3d.com/Manual/GettingStartedInstallingUnity.html">https://docs.unity3d.com/Manual/GettingStartedInstallingUnity.html&lt;/a>&lt;/p>
&lt;p>Make sure the &lt;a href="https://vrm.dev/en/docs/univrm/install/unity_version/">Unity Version&lt;/a> you are going to download is compatible with UniVRM.&lt;/p>
&lt;h2 id="create-an-empty-project-in-unity">Create an empty project in Unity&lt;/h2>
&lt;p>Launch Unity and create a new project (&lt;code>New -&amp;gt; Create project&lt;/code>):&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/unity_new_project.png" />
&lt;p>For Unity Hub, click &lt;code>Projects -&amp;gt; New -&amp;gt; 3D template -&amp;gt; CREATE&lt;/code>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/new_project_en.jpg" />
&lt;h2 id="import-univrm-package-into-the-created-project">Import UniVRM package into the created project&lt;/h2>
&lt;p>Import the downloaded &lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code> into the current project (&lt;code>Assets -&amp;gt; Import Package -&amp;gt; Custom Package&lt;/code>). The imported files will be in the folders &lt;code>../Assets/VRM&lt;/code>, &lt;code>../Assets/UniGLTF&lt;/code> and &lt;code>../Assets/VRMShaders&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="400" />
&lt;p>&lt;strong>To replace UniVRM with a newer version, it is recommended to delete the existing VRM, UniGLTF, VRMShaders and MeshUtility folders (if any) before package import&lt;/strong>.&lt;/p>
&lt;h2 id="check-if-univrm-has-been-imported-successfully">Check if UniVRM has been imported successfully&lt;/h2>
&lt;p>If UniVRM import successes, &lt;code>VRM&lt;/code> menu will be displayed in the menu bar:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm menu" />
&lt;hr>
&lt;p>Previous versions:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu_old.jpg" alt="vrm menu old" />
&lt;hr>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">If you are using Unity-2018 and the VRM menu does not show up:&lt;/h4>
Go to &lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Scripting Runtime Version&lt;/code> and check whether &lt;code>Scripting Runtime Version&lt;/code> is set to &lt;code>.Net4.X equivalent&lt;/code>
&lt;/div>
&lt;h3 id="console">Console&lt;/h3>
&lt;p>The errors occurred in a Unity project can be shown in the Console window:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/show_console.jpg" alt="show console" width="500" />
&lt;p>Click &lt;code>clear&lt;/code> button on the upper-left corner of the Console window and see if any error (message in red) is left in the console. In most of the cases, errors originate from the UniVRM installation failure.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/error_in_console.jpg" alt="clear console" width="500" />
&lt;h2 id="univrm-manual">UniVRM Manual&lt;/h2>
&lt;p>➡ &lt;a href="https://vrm.dev/en/docs/univrm/install/">Install&lt;/a>&lt;/p></description></item><item><title>Docs: 1. Create VRM from Humanoid 3D Models</title><link>https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/</link><pubDate>Tue, 25 Aug 2020 17:10:30 +0900</pubDate><guid>https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/</guid><description>
&lt;p>After the UniVRM package is &lt;a href="https://vrm.dev/en/docs/vrm/how_to_make_vrm/setup_unity/">installed&lt;/a> successfully, we can start converting the humanoid 3D model to VRM.&lt;/p>
&lt;h3 id="prepare-a-3d-model-that-can-be-handled-as-humanoid-in-unity">Prepare a 3D model that can be handled as &amp;ldquo;Humanoid&amp;rdquo; in Unity&lt;/h3>
&lt;p>Prepare a 3D model that can be &lt;a href="https://docs.unity3d.com/2019.4/Documentation/Manual/HOWTO-importObject.html">imported&lt;/a> into Unity such as FBX 3D model. To be recognized as a humanoid model, the &lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.md#defined-bones">required bones&lt;/a> must be set up.
Also, &lt;strong>be sure to use your own model or a model licensed for use as VR avatar&lt;/strong>. As we will describe later, &lt;strong>there are items that describe license information in the VRM file, authors need to fill up those information for their own VRM models&lt;/strong>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Base VRM Model&lt;/h4>
The conditions for creating a VRM model &lt;a href="https://vrm.dev/en/docs/univrm/humanoid/base_model/">can be found here&lt;/a>
&lt;/div>
&lt;p>We use &lt;a href="https://3d.nicovideo.jp/works/td14712">Alicia Solid&lt;/a> as an example:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/DragImportedModel.png" alt="DragImported3DModel" width="300" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/ModelConversionMenu.png" alt="ModelConversionMenu" width="900" />
&lt;/p>
&lt;p>First, drag the imported humanoid 3D model from the Project window to the Hierarchy window. Click the 3D model in the Hierarchy window then you will see the menu as shown in the Figure above. Click &lt;code>Select&lt;/code> and then click &lt;code>Materials&lt;/code>. Set &lt;code>Location&lt;/code> as &lt;code>Use External Materials (Legacy)&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/SetAsExternalMaterialsLegacy.png" alt="SetAsExternalMaterialsLegacy" width="900" />
&lt;p>Next, click &lt;code>Rig&lt;/code> and set &lt;code>Animation Type&lt;/code> as &lt;code>Humanoid&lt;/code>, and then click &lt;code>Apply&lt;/code> button:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/humanoid_apply.jpg" alt="humanoid_apply" width="900" />
&lt;p>After &lt;code>Apply&lt;/code> button is clicked, click &lt;code>Configure&lt;/code> button to configure your model. A message box will pop up asking whether you want to save the current scene. Click &lt;code>Save&lt;/code> to save it.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/SetModelAsHumanoid.png" alt="SetModelAsHumanoid" width="900" />
&lt;p>Now you will see the bone mapping details for this model. Unity will perform auto-mapping for each bone initially. You can check the model&amp;rsquo;s Body, Head, etc. if an assigned component fits, the leftmost icon will show as green, otherwise it will show as red. In this situation, click rightmost icon for a bone that has the failure bone mapping and select a component you think it fits this bone. To re-map the bones automatically, simply click &lt;code>Mapping&lt;/code> in the lowerleft of the interface, click &lt;code>clear&lt;/code> and then click &lt;code>Automap&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/BoneMapping.png" alt="BoneMapping" width="600" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/BoneAssignment.png" alt="BoneAssignment" width="900" />
&lt;/p>
&lt;p>However, in some cases the bone mapping results are not reasonable even all of them appear as green as shown in the figure below:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/fix_eye.png" />
&lt;p>We can see the Jaw and Eyes are assigned by the wrong components. As mentioned above, we can fix them by assigning the right corresponding components manually (e.g. eye_light_L will be replaced with eye_L). If the bone mappings are all right, click &lt;code>Done&lt;/code> button to proceed to the next step.&lt;/p>
&lt;h3 id="adjust-the-model-data">Adjust the model data&lt;/h3>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene.png" />
&lt;p>Now click the model in the Hierarchy window, you shall see sub-components attached to this model. Please click any of them. We are going to check/adjust the items listed below:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/initial_position_rotation.jpg" alt="initial_position_rotation" width="800" />
&lt;ul>
&lt;li>Model Position
&lt;ul>
&lt;li>The model should be placed at the origin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model Scale
&lt;ul>
&lt;li>1.0 = 1m&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model Pose
&lt;ul>
&lt;li>The model should face towards +Z(axis) direction&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Texture（material / shader）
&lt;ul>
&lt;li>The shaders listed below are &lt;strong>highly recommended&lt;/strong>:
&lt;ul>
&lt;li>Toon shader
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/shaders/shader_mtoon/">VRM/MToon&lt;/a> (lighting supported toon shader）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Unlit type shader
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/shaders/univrm_unlit/">UniGLTF/UniUnlit&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>PBR
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/shaders/univrm_standard/">Standard&lt;/a> (Unity standard)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/shader_option.jpg" alt="shader_option" width="800" />
&lt;p>Note that if the materials are not assigned or you want to change them, click the rightmost icon of &lt;code>Element X&lt;/code> to select available materials in your computer. There are several parameters that you can adjust rendering effects based on what shader you select. Here we select &lt;code>VRM/MToon&lt;/code> as an example as shown below. Please refer to &lt;a href="https://vrm.dev/en/docs/univrm/shaders/shader_mtoon/">MToon&lt;/a> for more information.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/MToonMaterialSetting.png" alt="MToonMaterialSetting" width="700" />
&lt;h3 id="check-blendshape-normal">Check BlendShape Normal&lt;/h3>
&lt;p>Check whether the imported fbx has the correct BlendShape normals. The details &lt;a href="https://vrm.dev/en/docs/univrm/blendshape/check_blendshape_normal/">can be found here&lt;/a>.&lt;/p>
&lt;h3 id="export-the-model-as-vrm-from-menu-model-normalization">Export the model as VRM from menu (model normalization)&lt;/h3>
&lt;p>After adjustments are completed, select the model in &lt;code>Hierarchy&lt;/code> window and export it from &lt;code>VRM0 -&amp;gt; Export UniVRM-0.XX&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>Previous versions: &lt;code>VRM -&amp;gt; UniVRM-0.XX -&amp;gt; Export humanoid&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;p>Enter your name in the &lt;code>Author&lt;/code> field and click the &lt;code>Export&lt;/code> button. The VRM file can then be created. To easily track this file, it is recommended to name the file like this: &amp;ldquo;Model_Name_Normalized.vrm&amp;rdquo;. The file will be saved in the &lt;code>Assets&lt;/code> folder by default.&lt;/p>
&lt;p>Related Pages about UniVRM export:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/export/univrm_export/">UniVRM Export&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/export/vrm_size/">VRM Size (BlendShape size reduction)&lt;/a>&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/export_dialog.jpg" alt="vrm export" width="900" />
&lt;ul>
&lt;li>Force T Pose
&lt;ul>
&lt;li>Force the model pose to become &lt;a href="https://vrm.dev/en/docs/univrm/humanoid/humanoid_overview/#t-pose">T-Pose&lt;/a> before removing rotation / scaling.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pose Freeze
&lt;ul>
&lt;li>Whether the rotation / scaling removal processing should be performed. This is &lt;strong>the process of normalizing model&lt;/strong> for conforming to the VRM rules. Please make sure to check the boxes at the &lt;strong>first time of use&lt;/strong>. After this process is done, all the components can work correctly.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In the next section, we will introduce how to &lt;a href="https://vrm.dev/en/how_to_make_vrm/setup_vrm/">import and set up VRM file first time&lt;/a>.&lt;/p></description></item><item><title>Docs: 2. Set up VRM</title><link>https://vrm.dev/en/how_to_make_vrm/setup_vrm/</link><pubDate>Tue, 25 Aug 2020 17:26:05 +0900</pubDate><guid>https://vrm.dev/en/how_to_make_vrm/setup_vrm/</guid><description>
&lt;p>In the previous section, we have introduced how to convert a Humanoid 3D model to VRM.
Now we are going to show how to import and set up a VRM file.&lt;/p>
&lt;h3 id="import-the-vrm-file">Import the VRM file&lt;/h3>
&lt;img src="https://vrm.dev/images/vrm/vrm_prefab_en.png" />
&lt;p>&lt;strong>Drag and drop the VRM file (~.vrm) into Assets folder&lt;/strong>. The &lt;strong>prefab&lt;/strong> file of the VRM model data can be automatically generated.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene2.png" />
&lt;p>To avoid any confusion, remove the &lt;a href="https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/#adjust-the-model-data">GameObject of the original 3D model&lt;/a>.
&lt;strong>Please drag the prefab file to the Hierarchy window&lt;/strong>.
Normalized model data such as mesh (i.e. rotation is Unity default) can then be shown.&lt;/p>
&lt;h3 id="custom-settings-in-vrm">Custom settings in VRM&lt;/h3>
&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;p>The VRM model&amp;rsquo;s information will be shown in the Inspector window once the root GameObject of the model in &lt;code>Hierarchy&lt;/code> is selected. Note that &lt;strong>spring bone settings are available in &amp;ldquo;secondary&amp;rdquo;&lt;/strong>. Please at least fill in &lt;a href="https://vrm.dev/en/docs/univrm/meta/univrm_meta/">title, author, license information&lt;/a>. &lt;strong>Specially, license information is crucial!&lt;/strong>&lt;/p>
&lt;p>To make a VRM model fully functional, please set up the following components:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/blendshape/univrm_blendshape/">Expression and lip-sync (BlendShape)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/firstperson/univrm_firstperson/">First-person settings (Exclude model&amp;rsquo;s head in first-person view for VR applications)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/lookat/univrm_lookat/">Eye gaze movements controlled by bone or BlendShape&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/springbone/univrm_secondary/">Spring bone (SpringBone/SpringBoneCollider)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="export-vrm-model-again">Export VRM model again&lt;/h3>
&lt;p>After the all settings are completed, select the the model (topmost parent GameObject) in &lt;code>Hierarchy&lt;/code> and again export the model from &lt;code>VRM0 -&amp;gt; Export UniVRM-0.XX&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>Previous versions: &lt;code>VRM -&amp;gt; UniVRM-0.XX -&amp;gt; Export humanoid&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;br>&lt;/p>
&lt;p>This time &lt;strong>please do not check &amp;ldquo;Force T Pose&amp;rdquo; and &amp;ldquo;Pose Freeze&amp;rdquo;&lt;/strong>. They are only used for the first time (normalization processing). Name the file and export the adjusted VRM model.&lt;/p>
&lt;h3 id="done">Done！&lt;/h3>
&lt;p>Your VRM file is good to go. Try to import the VRM file into &lt;a href="https://vrm.dev/en/vrm_applications/">applications&lt;/a> that support VRM!&lt;/p></description></item><item><title>Docs: Check Your VRM in Play Mode</title><link>https://vrm.dev/en/how_to_make_vrm/vrm_behavior_confirmation/</link><pubDate>Tue, 25 Aug 2020 17:26:54 +0900</pubDate><guid>https://vrm.dev/en/how_to_make_vrm/vrm_behavior_confirmation/</guid><description>
&lt;p>In this section, we assume you have made a VRM model and want to test it in play mode.&lt;/p>
&lt;h3 id="check-models-eye-movements">Check Model&amp;rsquo;s Eye Movements&lt;/h3>
&lt;p>Set &lt;code>AnimationClip/AnimationController&lt;/code> and set &lt;a href="https://vrm.dev/en/docs/univrm/lookat/univrm_lookat/#target">viewing target&lt;/a> in&lt;code>VRMLookAtHead -&amp;gt; Target&lt;/code>(the head orientation towards the target). For example, you can create a cube as a target from &lt;code>GameObject -&amp;gt; 3D Object -&amp;gt; Cube&lt;/code>. Next, serach head component in&lt;code>VRMLookAtHead -&amp;gt; Head&lt;/code>. After the corresponding components are assigned, check the model&amp;rsquo;s motion in the scene. The model will track the target position in Play Mode. You can drag the object position to test whether the model&amp;rsquo;s eyes are constantly tracking the object. The model&amp;rsquo;s close-up face can be viewed in Inspector window.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/LookAtTarget.png" alt="LookAtTarget" width="900" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/TargetTracking.png" alt="TargetTracking" width="500" />
&lt;/p>
&lt;h3 id="check-models-expressions">Check Model&amp;rsquo;s Expressions&lt;/h3>
&lt;p>To test the model&amp;rsquo;s expressions, fairly simple test scripts &amp;ldquo;AIUEO&amp;rdquo; and &amp;ldquo;Blinker&amp;rdquo; are provided. After setting up &lt;a href="https://vrm.dev/en/docs/univrm/blendshape/univrm_blendshape/#vrmblendshapeproxy">BlendShape&lt;/a>, click &lt;code>Add Component&lt;/code> at the bottom of model&amp;rsquo;s Inspector window to add &amp;ldquo;AIUEO&amp;rdquo; script or drag the script directly to Inspector. After &amp;ldquo;AIUEO&amp;rdquo; is set, lip synchronization animation that &amp;ldquo;aa&amp;rdquo;, &amp;ldquo;ih&amp;rdquo;, &amp;ldquo;ou&amp;rdquo;, &amp;ldquo;E&amp;rdquo;, &amp;ldquo;oh&amp;rdquo; switches in turn can be created in the scene. Similarly, if &amp;ldquo;Blinker&amp;rdquo; is set, eye blink animation that plays periodically can be created. See &lt;a href="https://github.com/vrm-c/UniVRM/releases">runtime VRM loader sample&lt;/a> (download UniVRM-RuntimeLoaderSample-0.XX) for more details on how to use these scripts.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeProxy.png" alt="BlendShapeProxy" width="650" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Double click the&lt;code>BlendShapeAvatar&lt;/code> field to set up expressions for the 3D model&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/AddExpressionScripts.png" alt="AddExpressionScripts" width="650" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/InspectorFaceView.png" alt="InspectorFaceView" width="400" />
&lt;/p></description></item></channel></rss>