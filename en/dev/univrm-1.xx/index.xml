<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM â€“ UniVRM-1.XX</title><link>https://vrm.dev/en/dev/univrm-1.xx/</link><description>Recent content in UniVRM-1.XX on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 21 Apr 2020 17:12:49 +0900</lastBuildDate><atom:link href="https://vrm.dev/en/dev/univrm-1.xx/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Outline</title><link>https://vrm.dev/en/dev/univrm-1.xx/outline/</link><pubDate>Tue, 21 Apr 2020 19:56:48 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/outline/</guid><description>
&lt;h1 id="univrm-10-draft">UniVRM-1.0 draft&lt;/h1>
&lt;p>Unity implementation of VRM-1.0 draft.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Please do not use VRM-1.0 draft in your products until the official version is released. The current specifications may be modified/changed later on&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SupportUnityVersion: &lt;code>Unity2019.3&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recommended ColorSpaceSetting: &lt;code>Linear&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="library-dependencies">Library Dependencies&lt;/h2>
&lt;p>VrmLib&amp;rsquo;s byte array operation depends on &lt;code>System.Memory&lt;/code> and&lt;code> System.Span&lt;/code> (included in standard library starting from &lt;code>.NET Standard-2.1&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>/Assets/dotnet.system.memory/Runtime
&lt;ul>
&lt;li>System.Memory.dll&lt;/li>
&lt;li>System.Buffers.dll&lt;/li>
&lt;li>System.Runtime.CompilerServices.Unsafe.dll&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.nuget.org/packages/System.Memory/">https://www.nuget.org/packages/System.Memory/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/corefx/blob/master/LICENSE.TXT">https://github.com/dotnet/corefx/blob/master/LICENSE.TXT&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ProtobufSerializer&amp;rsquo;s JSON reading/writing. Depends on the JSONSerializer&amp;rsquo;s &lt;code>Google.Protobuf&lt;/code>&lt;/p>
&lt;ul>
&lt;li>/Assets/ProtobufSerializer/Google.Protobuf&lt;/li>
&lt;li>&lt;a href="https://github.com/protocolbuffers/protobuf/tree/master/csharp/src/Google.Protobuf">https://github.com/protocolbuffers/protobuf/tree/master/csharp/src/Google.Protobuf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/protocolbuffers/protobuf/blob/master/LICENSE">https://github.com/protocolbuffers/protobuf/blob/master/LICENSE&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;pre>&lt;code>+-------------------+
| GameObject |
| Assets |Left handed, Y-UP system
+-------------------+
^ |
|[UnityBuilder] |[VrmConverter]
| |
Unity-2019.3 |
===============================================
.NET Standard-2.0 + System.Memory
| |
| Right handed, |
| Y-UP system v
+-------------------+
|VrmLib.Model |
+-------------------+
^ |
| VrmLib |
|[import] v[export]
+-------------------+
|VrmProtobuf |
+-------------------+
^ |
| Protobuf v
+-------------------+
|GLB(GLTF+BIN) |VRM-1.0
+-------------------+
&lt;/code>&lt;/pre></description></item><item><title>Docs: Structure</title><link>https://vrm.dev/en/dev/univrm-1.xx/structure/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/structure/</guid><description>
&lt;h2 id="assetsvrmlib">Assets/vrmlib&lt;/h2>
&lt;p>&lt;code>VrmLib.Model&lt;/code>: An intermediate container generated from the GLTF array buffer to make handling VRM model data easier. It can access the GLTF hierarchy in the VRM model without index referencing.&lt;/p>
&lt;h2 id="assetsprotobufserializer">Assets/ProtobufSerializer&lt;/h2>
&lt;p>VRM-1.0&amp;rsquo;s reading/writing.
Defined by ProtocolBuffer and generate a Json serializer.&lt;/p>
&lt;p>Transfer from VRM-1.0 to the intermediate format &lt;code>VrmLib.Model&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>VRM-1.0 &amp;lt;=&amp;gt; VrmLib.Model&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="assetsvrm">Assets/VRM&lt;/h2>
&lt;p>Add &lt;code>package.json&lt;/code> to reference the followings (UniVRM-0.55):&lt;/p>
&lt;ul>
&lt;li>MToon shader&lt;/li>
&lt;li>UniUnlit shader&lt;/li>
&lt;li>VRM-0.X&amp;rsquo;s serializer&lt;/li>
&lt;/ul>
&lt;h2 id="assetsunivrm0xreader">Assets/UniVRM0XReader&lt;/h2>
&lt;p>Transfer from VRM-0.X to the intermediate format &lt;code>VrmLib.Model&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>VRM-0.x =&amp;gt; VrmLib.Model&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="assetsunivrm-10">Assets/UniVRM-1.0&lt;/h2>
&lt;ul>
&lt;li>&lt;code>VrmLib.Model &amp;lt;=&amp;gt; Unity&lt;/code>&lt;/li>
&lt;li>Transformation between right-handed and left-handed coordinate system&lt;/li>
&lt;li>Must be run in ScriptThread&lt;/li>
&lt;li>GLTF-related (Mesh, Texture, Material, GameObject, SkinnedMeshRenderer, etc.)&lt;/li>
&lt;li>VRM-related (HumanoidAvatar, BlendShapeProxy, LookAt, FirstPerson, etc.)&lt;/li>
&lt;/ul></description></item><item><title>Docs: Employ Unity Package Manager</title><link>https://vrm.dev/en/en/dev/univrm-1.xx/package/</link><pubDate>Mon, 11 May 2020 17:06:05 +0900</pubDate><guid>https://vrm.dev/en/en/dev/univrm-1.xx/package/</guid><description>
&lt;h2 id="univrm-10s-unitypackage">UniVRM-1.0&amp;rsquo;s UnityPackage&lt;/h2>
&lt;p>UnityPackage is adopted experimentally in UniVRM-1.0.&lt;/p>
&lt;p>As &lt;code>package.json&lt;/code> is placed in each module in github repository&amp;rsquo;s &lt;code>Assets&lt;/code> folder,
&lt;code>Unity 2019.3.4f1 or later version&lt;/code> is required.&lt;/p>
&lt;h3 id="how-to-use">How to use&lt;/h3>
&lt;p>UnityPackageManager&amp;rsquo;s Window&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/menu_packagemanager.jpg" />
&lt;p>&lt;code>add package from git URL&lt;/code>&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/from_git.jpg" />
&lt;p>Since there is no function that can automatically download the dependencies between packages, please add the following git urls in order:&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders&lt;/code>&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM_1_0.git?path=/Assets/Vrm10&lt;/code> =&amp;gt; Depends on VRMShaders&lt;/li>
&lt;/ul>
&lt;h4 id="add-dependencies-in-packagesmanifestjson">Add dependencies in Packages/manifest.json&lt;/h4>
&lt;p>An alternative way is to add necessary dependencies right in Packages/manifest.json. Please copy and paste the following contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM_1_0.git?path=/Assets/Vrm10&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/vrm-c/UniVRMUtility/blob/master/Packages/manifest.json">https://github.com/vrm-c/UniVRMUtility/blob/master/Packages/manifest.json&lt;/a> is an example of using &lt;code>UniVRM-1.0&lt;/code>'s &lt;code>UnityPackage&lt;/code>.&lt;/p>
&lt;p>The hash values in &lt;code>lock&lt;/code> can be updated automatically by Unity, there is no need to manually change them.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#c30">&amp;#34;lock&amp;#34;&lt;/span>&lt;span style="color:#a00;background-color:#faa">:&lt;/span> {
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;HEAD&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;hash&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;198c2c605ded711b21781421e71ba9bdbe0f8728&amp;#34;&lt;/span>
},
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;HEAD&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;hash&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;155acf354735288db0335878179f483901541851&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: BlendShapeProxy Updates</title><link>https://vrm.dev/en/en/dev/univrm-1.xx/blendshapeproxy/</link><pubDate>Mon, 11 May 2020 17:05:49 +0900</pubDate><guid>https://vrm.dev/en/en/dev/univrm-1.xx/blendshapeproxy/</guid><description>
&lt;h2 id="update-order-for-blendshape-related-components">Update order for BlendShape-related components&lt;/h2>
&lt;p>As described in &lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#update-order,">https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#update-order,&lt;/a> it is recommended to update as the following order:&lt;/p>
&lt;ul>
&lt;li>Humanoid&lt;/li>
&lt;li>LookAt&lt;/li>
&lt;li>BlendShape&lt;/li>
&lt;/ul>
&lt;h2 id="integrate-with-lookat">Integrate with LookAt&lt;/h2>
&lt;p>To reduce the processing order problem of LookAt and BlendShape, &lt;code>VRMLookAtHead&lt;/code>, &lt;code>VRMLookAtBoneApplyer&lt;/code> and &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> have been integrated into &lt;code>VRMBlendShapeProxy&lt;/code>.&lt;/p>
&lt;h2 id="blendshapeclips-exclude-functions">BlendShapeClip&amp;rsquo;s exclude functions&lt;/h2>
&lt;p>For example, when &lt;code>fun&lt;/code> and &lt;code>blink&lt;/code> are applied at the same time, there are models whose eyes become weird.
To address this issue, a function that can disable &lt;code>blink&lt;/code> when applying &lt;code>fun&lt;/code> is created. As of vrm1.0, there are three types of exclude functions:&lt;/p>
&lt;p>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#blendshape-specification">https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#blendshape-specification&lt;/a>&lt;/p>
&lt;ul>
&lt;li>ignoreBlink&lt;/li>
&lt;li>ignoreLookAt&lt;/li>
&lt;li>ignoreMouth&lt;/li>
&lt;/ul>
&lt;h2 id="setvalue-and-apply">SetValue and Apply&lt;/h2>
&lt;p>In &lt;code>UniVRM-0.X&lt;/code> there are two systems &lt;code>BlendShapeProxyy.SetValueImmediate&lt;/code> and &lt;code>BlendSahpeProxy.SetValue + Apply&lt;/code>. In &lt;code>UniVRM-1.X&lt;/code>, &lt;code>BlendShapeProxyy.SetValueImmediate&lt;/code> has been removed.&lt;/p>
&lt;p>To make &lt;code>ignoreBlink&lt;/code>, etc. functional, it is necessary to accumulate the rest of the included blendshape values and then process them at once. (Initially it was designed to be stored and applied by the application side)&lt;/p>
&lt;h2 id="the-timing-of-using-apply-function">The timing of using Apply function&lt;/h2>
&lt;h3 id="none">None&lt;/h3>
&lt;p>Please call &lt;code>Apply&lt;/code> explicitly on the user application side.&lt;/p>
&lt;h3 id="update">Update&lt;/h3>
&lt;p>&lt;code>Apply&lt;/code> is called in VRMBlendShapeProxy.Update.&lt;/p>
&lt;p>Note that it is better to use VRMBlendShapeProxy.Apply when the necessary blendshape values are set.&lt;/p>
&lt;h3 id="lateupdate">LateUpdate&lt;/h3>
&lt;p>&lt;code>Apply&lt;/code> is called in VRMBlendShapeProxy.LateUpdate.&lt;/p>
&lt;p>When fine controlling is not required.&lt;/p></description></item><item><title>Docs: API</title><link>https://vrm.dev/en/dev/univrm-1.xx/api/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/api/</guid><description>
&lt;p>Available in &lt;a href="https://github.com/vrm-c/UniVRM_1_0/blob/master/Assets/UniVRM-1.0/PlayModeTests/ApiSampleTests.cs">https://github.com/vrm-c/UniVRM_1_0/blob/master/Assets/UniVRM-1.0/PlayModeTests/ApiSampleTests.cs&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vrm-to-model">VRM to Model&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> VrmLib.Model ReadModel(&lt;span style="color:#078;font-weight:bold">string&lt;/span> path)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = File.ReadAllBytes(path);
&lt;span style="color:#069;font-weight:bold">if&lt;/span> (!VrmLib.Glb.TryParse(bytes, &lt;span style="color:#069;font-weight:bold">out&lt;/span> VrmLib.Glb glb, &lt;span style="color:#069;font-weight:bold">out&lt;/span> Exception ex))
{
Debug.LogError(&lt;span style="color:#c30">$&amp;#34;fail to Glb.TryParse: {path} =&amp;gt; {ex}&amp;#34;&lt;/span>);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">null&lt;/span>;
}
&lt;span style="color:#09f;font-style:italic">// both VRM-0.X and VRM-1.0
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> model = UniVRM10.VrmLoader.CreateVrmModel(path);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> model;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="this-is-possible-on-a-thread">This is possible on a thread&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">return&lt;/span> Task.Run(()=&amp;gt;{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> ReadModel(path);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="model-to-gameobject">Model to GameObject&lt;/h2>
&lt;p>This requires a ScriptThread.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> ModelAsset BuildGameObject(VrmLib.Model model, &lt;span style="color:#078;font-weight:bold">bool&lt;/span> showMesh)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> importer = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniVRM10.RuntimeUnityBuilder();
&lt;span style="color:#078;font-weight:bold">var&lt;/span> assets = importer.ToUnityAsset(model, showMesh);
UniVRM10.ComponentBuilder.Build10(model, importer, assets);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> assets;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set-renderer-after-importing-the-model">Set renderer after importing the model&lt;/h3>
&lt;p>Various assets now are stored in ModelAsset.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#078;font-weight:bold">var&lt;/span> asset = BuildGameObject(srcModel, &lt;span style="color:#069;font-weight:bold">false&lt;/span>);
&lt;span style="color:#09f;font-style:italic">// renderer setting
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> render &lt;span style="color:#069;font-weight:bold">in&lt;/span> asset.Renderers)
{
&lt;span style="color:#09f;font-style:italic">// show when RuntimeUnityBuilder.ToUnity(showMesh = false)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> render.enabled = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
&lt;span style="color:#09f;font-style:italic">// avoid culling
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span> (render &lt;span style="color:#069;font-weight:bold">is&lt;/span> SkinnedMeshRenderer skinned)
{
skinned.updateWhenOffscreen = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tackle-on-frame-rate-dropping-todo">Tackle on frame rate dropping (TODO)&lt;/h3>
&lt;p>Optimize the processing of each frame to reduce spikes.&lt;/p>
&lt;h2 id="gameobject-to-model">GameObject to Model&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> VrmLib.Model ToModel(UnityEngine.GameObject target)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> exporter = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniVRM10.RuntimeVrmConverter();
&lt;span style="color:#078;font-weight:bold">var&lt;/span> model = exporter.ToModelFrom10(target);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> model;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="model-to-vrm">Model to VRM&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#078;font-weight:bold">byte&lt;/span>[] ToVrm10(VrmLib.Model model)
{
&lt;span style="color:#09f;font-style:italic">// transform to right-handed coordinate system
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate(model, VrmLib.Coordinates.Gltf);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = Vrm10.ModelExtensions.ToGlb(model);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> bytes;
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: API Changes</title><link>https://vrm.dev/en/dev/univrm-1.xx/api_update_from_univrm-0.xx/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/api_update_from_univrm-0.xx/</guid><description>
&lt;h2 id="import">Import&lt;/h2>
&lt;ul>
&lt;li>The class &lt;code>VRM.VRMImporterContext&lt;/code>, which is used to import VRM data (&lt;code>UniGLTF.ImporterContext.Load&lt;/code>), has been removed. In UniVRM-1.XX the UniVRM importer will first store the VRM data (&lt;code>UniVRM10.VrmLoader.CreateVrmModel&lt;/code>) in &lt;code>VrmLib.Model&lt;/code> then port to Unity&lt;/li>
&lt;li>&lt;code>UniVRM10.UnityBuilder.ToUnityAsset&lt;/code> will transfer the data from &lt;code>VrmLib.Model&lt;/code> to Unity Asset. &lt;code>UniGLTF.ImporterContext.ShowMeshes&lt;/code> in 0.XX has been changed to a bool parameter of &lt;code>ToUnityAsset&lt;/code>&lt;/li>
&lt;li>&lt;code>UniVRM10.ComponentBuilder.Build10&lt;/code> will set up components (Meta, BlendShape, LookAt, etc.) for the VRM GameObject&lt;/li>
&lt;/ul>
&lt;h3 id="example">Example&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">MyClass&lt;/span> : MonoBehaviour
{
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>
&lt;span style="color:#09f;font-style:italic">/**
&lt;/span>&lt;span style="color:#09f;font-style:italic"> * VRM import
&lt;/span>&lt;span style="color:#09f;font-style:italic"> *
&lt;/span>&lt;span style="color:#09f;font-style:italic"> * @return vrm object
&lt;/span>&lt;span style="color:#09f;font-style:italic"> */&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GameObject Import()
{
&lt;span style="color:#09f;font-style:italic">// file path
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> path = &lt;span style="color:#c30">&amp;#34;../YourModel.vrm&amp;#34;&lt;/span>;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> model = UniVRM10.VrmLoader.CreateVrmModel(path);
&lt;span style="color:#09f;font-style:italic">// build UniVRM-0.XX model&amp;#39;s components
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> assets = UniVRM10.RuntimeUnityBuilder.ToUnityAsset(model, showMesh: &lt;span style="color:#069;font-weight:bold">false&lt;/span>);
&lt;span style="color:#09f;font-style:italic">// enable renderer when RuntimeUnityBuilder.ToUnity(showMesh = false)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> renderer &lt;span style="color:#069;font-weight:bold">in&lt;/span> assets.Renderers)
{
renderer.enabled = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
&lt;span style="color:#09f;font-style:italic">// avoid culling
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span> (renderer &lt;span style="color:#069;font-weight:bold">is&lt;/span> SkinnedMeshRenderer skinned)
{
skinned.updateWhenOffscreen = &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
}
}
UniVRM10.ComponentBuilder.Build10(model, assets);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> vrmObject = assets.Root; ã€€ã€€ã€€ã€€ã€€ã€€
&lt;span style="color:#069;font-weight:bold">return&lt;/span> vrmObject;
}
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="export">Export&lt;/h2>
&lt;ul>
&lt;li>The class &lt;code>VRM.VRMExporter&lt;/code>, which is used to export VRM data (&lt;code>UniGLTF.gltfExporter.Export&lt;/code>), has been removed. In UniVRM-1.XX the UniVRM exporter will first transfer the VRM data (&lt;code>RuntimeVrmConverter.ToModelFrom10&lt;/code>) from the VRM GameObject to &lt;code>VrmLib.Model&lt;/code> then save to VRM file&lt;/li>
&lt;li>&lt;code>Vrm10.ModelExtensions.ToGlb&lt;/code> will transfer the data from &lt;code>VrmLib.Model&lt;/code> to glb. Note that glb format is exchangeable with VRM. The coordinate transformation between Unity and GLTF is &lt;code>VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="example-1">Example&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">MyClass&lt;/span> : MonoBehaviour
{
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>
&lt;span style="color:#09f;font-style:italic">/**
&lt;/span>&lt;span style="color:#09f;font-style:italic"> * VRM export
&lt;/span>&lt;span style="color:#09f;font-style:italic"> */&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> Export()
{
&lt;span style="color:#09f;font-style:italic">// file path
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> importPath = &lt;span style="color:#c30">&amp;#34;../YourModel.vrm&amp;#34;&lt;/span>;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> importedModel = UniVRM10.VrmLoader.CreateVrmModel(importPath);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> assets = UniVRM10.RuntimeUnityBuilder.ToUnityAsset(importedModel);
UniVRM10.ComponentBuilder.Build10(importedModel, assets);ã€€
&lt;span style="color:#09f;font-style:italic">// export with UniVRM1.0
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> exporter = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniVRM10.RuntimeVrmConverter();
&lt;span style="color:#078;font-weight:bold">var&lt;/span> model = exporter.ToModelFrom10(assets.Root);
&lt;span style="color:#09f;font-style:italic">// transform to right-handed coordinate system
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate(model, VrmLib.Coordinates.Gltf);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> exportedBytes = Vrm10.ModelExtensions.ToGlb(model);
&lt;span style="color:#09f;font-style:italic">// write out VRM1.0 file
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> path = &lt;span style="color:#c30">&amp;#34;vrm10.vrm&amp;#34;&lt;/span>;
File.WriteAllBytes(path, exportedBytes);
}
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lookat">LookAt&lt;/h2>
&lt;ul>
&lt;li>LookAt related classes &lt;code>VRM.VRMLookAtBoneApplyer&lt;/code>, &lt;code>VRM.VRMLookAtBlendShapeApplyer&lt;/code> and &lt;code>VRM.VRMLookAtHead&lt;/code> has been integrated into &lt;code>UniVRM10.VRMController&lt;/code>&lt;/li>
&lt;li>&lt;code>VRM.LookAtType&lt;/code> has been changed to &lt;code>UniVRM10.VRMController.LookAtTypes&lt;/code>&lt;/li>
&lt;li>&lt;code>VRMLookAtHead.Target&lt;/code> has been replaced with &lt;code>VRMController.Gaze&lt;/code>&lt;/li>
&lt;li>Added &lt;code>UniVRM10.VRMController.LookAtTargetTypes&lt;/code>. You can choose to get yaw/pitch angle relative to head automatically or specify yaw/pitch angle&lt;/li>
&lt;/ul>
&lt;h3 id="example-2">Example&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniVRM10&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">MyClass&lt;/span> : MonoBehaviour
{
&lt;span style="color:#309"> [SerializeField]&lt;/span>
&lt;span style="color:#069;font-weight:bold">private&lt;/span> GameObject _vrmModel;
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [SerializeField]&lt;/span>
&lt;span style="color:#069;font-weight:bold">private&lt;/span> GameObject _targetObject;
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> SpecifyLookAtTarget()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;();
proxy.LookAtTargetType = VRMController.LookAtTargetTypes.CalcYawPitchToGaze;
&lt;span style="color:#09f;font-style:italic">// specify LookAt target
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;().Gaze = _targetObject.transform;
&lt;span style="color:#09f;font-style:italic">// get yaw/pitch angle relative to head
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> (yaw, pitch) = proxy.GetLookAtYawPitch();
}
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> SpecifyYawPitchAngle()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;();
proxy.LookAtTargetType = VRMController.LookAtTargetTypes.SetYawPitch;
&lt;span style="color:#09f;font-style:italic">// specify yaw/pitch angle
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> proxy.SetLookAtYawPitch(&lt;span style="color:#f60">0&lt;/span>, &lt;span style="color:#f60">0&lt;/span>);
}
&lt;span style="color:#09f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: How to export</title><link>https://vrm.dev/en/dev/univrm-1.xx/how_to_export/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/how_to_export/</guid><description>
&lt;p>The export procedure has a slight change from the UniVRM-0.XX:&lt;/p>
&lt;ol>
&lt;li>The model should be placed at the origin and face towards +Z(axis) direction. If necessary, please make the model as T-pose manually. Force &lt;code>T-Pose&lt;/code> feature has been removed in UniVRM-1.XX&lt;/li>
&lt;li>Right click the selected model in Hierarchy window and select [UniVRM-1.0.0] - [Export VRM]. The export window will then prompt&lt;/li>
&lt;li>In the export window, click &lt;code>Export&lt;/code> button&lt;/li>
&lt;li>Select a file path you want to save your model in the dialog&lt;/li>
&lt;/ol>
&lt;p>The selected model can be judged whether it can be exported as VRM format in the export window. The exportable VRM model must fulfill requirements below:&lt;/p>
&lt;ul>
&lt;li>An Animator component has been added and a Humanoid avatar has been set to the root (a.k.a. topmost parent) of the VRM game object&lt;/li>
&lt;li>Entered the information in the following three necessary items in Meta
&lt;ul>
&lt;li>Title&lt;/li>
&lt;li>Version&lt;/li>
&lt;li>Authors&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Load VRM model made from VRM-0.X</title><link>https://vrm.dev/en/dev/univrm-1.xx/load_vrm-0.x_model/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/load_vrm-0.x_model/</guid><description>
&lt;h2 id="about-meta-conversion">About Meta Conversion&lt;/h2>
&lt;p>The VRM-0.X model will be converted to VRM1.0 at import.&lt;/p>
&lt;p>TODO:&lt;/p>
&lt;ul>
&lt;li>Keep the same items&lt;/li>
&lt;li>New items are default to &lt;code>Usage&lt;/code> false&lt;/li>
&lt;li>Items whose contents changed in VRM1.0 are default to &lt;code>Usage&lt;/code> false&lt;/li>
&lt;li>Redistribution-related is &lt;code>OtherURL&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Unity Assets Handling Changes</title><link>https://vrm.dev/en/dev/univrm-1.xx/unity_assets/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/unity_assets/</guid><description>
&lt;p>In UniVRM1.XX, we adopt &lt;a href="https://docs.unity3d.com/ScriptReference/Experimental.AssetImporters.ScriptedImporter.html">ScriptedImporter&lt;/a>, which has different asset handling behaviors compared with &lt;a href="https://docs.unity3d.com/ScriptReference/AssetPostprocessor.html">AssetPostprocessor&lt;/a>.&lt;/p>
&lt;h2 id="0xx">0.xx&lt;/h2>
&lt;p>Put &lt;code>model.vrm&lt;/code> in the Assets folder =&amp;gt; AssetPostprocessor is triggered for files with extension &lt;code>.vrm&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Extract Texture from vrm&lt;/li>
&lt;li>Extract Material from vrm&lt;/li>
&lt;li>Extract Mesh from vrm vrm&lt;/li>
&lt;li>Extract BlendShape from vrm&lt;/li>
&lt;li>Construct Prefab from the extracted assets&lt;/li>
&lt;/ul>
&lt;p>Many assets are generated in the Assets folder:&lt;/p>
&lt;ul>
&lt;li>model.vrm&lt;/li>
&lt;li>model.vrm.meta&lt;/li>
&lt;li>model.prefab&lt;/li>
&lt;li>model.prefab.meta&lt;/li>
&lt;li>model.Materials.meta&lt;/li>
&lt;li>model.Materials/*.assets&lt;/li>
&lt;li>model.Materials/*.meta&lt;/li>
&lt;li>&amp;hellip;etc&lt;/li>
&lt;/ul>
&lt;h2 id="10">1.0&lt;/h2>
&lt;p>Put &lt;code>model.vrm&lt;/code> in the Assets folder =&amp;gt; ScriptedImporter is triggered for files with extension &lt;code>.vrm&lt;/code>&lt;/p>
&lt;ul>
&lt;li>ScriptedImporter asset can be created&lt;/li>
&lt;li>Extracted textures from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li>
&lt;li>Extracted materials from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li>
&lt;li>Extracted meshes from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li>
&lt;li>Extracted blendshapes from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li>
&lt;li>Construct Prefab from extracted assets and make it as a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li>
&lt;/ul>
&lt;p>Only one asset is generated in the Assets folder:&lt;/p>
&lt;ul>
&lt;li>model.vrm&lt;/li>
&lt;li>model.vrm.meta&lt;/li>
&lt;/ul>
&lt;h2 id="extract">Extract&lt;/h2>
&lt;p>&lt;code>ScriptedImporter&lt;/code> asset cannot be modified with readonly state.
To make it modifiable, select components you want to extract and click &lt;code>Extract&lt;/code> button in the Prefab&amp;rsquo;s inspector window (same as &lt;code>Extract&lt;/code> in fbx importer)
&lt;code>Extract&lt;/code> is not required if there is no intention to modify it.&lt;/p></description></item><item><title>Docs: UniVRM Import/Export Examples</title><link>https://vrm.dev/en/dev/univrm-1.xx/use_vrm/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/use_vrm/</guid><description>
&lt;h2 id="editorimport">EditorImport&lt;/h2>
&lt;ul>
&lt;li>Import VRM and generate its prefab&lt;/li>
&lt;/ul>
&lt;h2 id="editorexport">EditorExport&lt;/h2>
&lt;ul>
&lt;li>Export VRM made from the scene in Editor mode&lt;/li>
&lt;/ul>
&lt;h2 id="runtimeimport">RunTimeImport&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRMUtility">https://github.com/vrm-c/UniVRMUtility&lt;/a> SimpleViewer, VRMViewer&lt;/li>
&lt;/ul>
&lt;h2 id="runtimeexport">RuntimeExport&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRMUtility">https://github.com/vrm-c/UniVRMUtility&lt;/a> PrimMan. Export box man as VRM format through the program at runtime&lt;/li>
&lt;/ul></description></item><item><title>Docs: UniVRM-1.XX and UniVRM-0.XX coexistence</title><link>https://vrm.dev/en/dev/univrm-1.xx/use_with_univrm-0.xx/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/en/dev/univrm-1.xx/use_with_univrm-0.xx/</guid><description>
&lt;p>Both UniVRM-1.XX and UniVRM-0.XX importers work.&lt;/p>
&lt;p>The uniVRM-0.XX importer can be stopped by defining the c# symbol &lt;code>VRM_STOP_ASSETPOSTPROCESSOR&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Go to &lt;code>Edit&lt;/code> -&amp;gt; &lt;code>preference&lt;/code> -&amp;gt; &lt;code>UniVRM&lt;/code> and check &lt;code>StopVrmAssetPostProcessor&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>or&lt;/p>
&lt;ul>
&lt;li>Go to &lt;code>Edit&lt;/code> -&amp;gt; &lt;code>project settings&lt;/code> -&amp;gt; &lt;code>other settings&lt;/code> -&amp;gt; &lt;code>Scripting Define Symbols&lt;/code> and add &lt;code>VRM_STOP_ASSETPOSTPROCESSOR&lt;/code>&lt;/li>
&lt;/ul></description></item></channel></rss>