<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – ドキュメント</title><link>https://vrm.dev/docs/</link><description>Recent content in ドキュメント on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 11 Dec 2020 21:36:43 +0900</lastBuildDate><atom:link href="https://vrm.dev/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Unity のバージョン</title><link>https://vrm.dev/docs/univrm/install/unity_version/</link><pubDate>Mon, 22 Mar 2021 14:13:01 +0900</pubDate><guid>https://vrm.dev/docs/univrm/install/unity_version/</guid><description>
&lt;h2 id="univrm-0560-">UniVRM-0.56.0 ～&lt;/h2>
&lt;p>Unity サポート状況は以下のようになっています。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Unity Version&lt;/th>
&lt;th>動作&lt;/th>
&lt;th>Scripting Runtime Version&lt;/th>
&lt;th>UPM&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Unity-2017&lt;/td>
&lt;td>×&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.1&lt;/td>
&lt;td>×&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.2&lt;/td>
&lt;td>×&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.3&lt;/td>
&lt;td>△&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>C#7.3。動くかもしれないが未確認&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.4 LTS&lt;/td>
&lt;td>◎&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRMの開発に使っているバージョン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.1&lt;/td>
&lt;td>○&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.2&lt;/td>
&lt;td>○&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>.Net3.5が無くなったので Scripting Runtime Version 設定が不要になった&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.3&lt;/td>
&lt;td>○&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>2019.3.4f1 から UPM(githubのサブフォルダ) が動作する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.4 LTS&lt;/td>
&lt;td>◎&lt;/td>
&lt;td>-&lt;/td>
&lt;td>○&lt;/td>
&lt;td>リリース時にUPMの動作確認をしてるバージョン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2020&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>-&lt;/td>
&lt;td>○&lt;/td>
&lt;td>Editor機能(Prefabなど)が一部動作せず。&lt;code>UniVRM-0.69.0&lt;/code> で修正&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="-univrm-055">～ UniVRM-0.55&lt;/h2>
&lt;ul>
&lt;li>Unity-5.6 以降&lt;/li>
&lt;/ul></description></item><item><title>Docs: ヒューマノイド概要</title><link>https://vrm.dev/docs/univrm/humanoid/humanoid_overview/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/humanoid/humanoid_overview/</guid><description>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>VRMのヒューマノイドは、主にモーションキャプチャーの Forward kinematics のモーションを受けられることを基準に決めました。&lt;/p>
&lt;p>１フレームのモーション(ポーズ)は以下の情報で表される想定です。&lt;/p>
&lt;ul>
&lt;li>hipsボーンの移動値&lt;/li>
&lt;li>各ボーンの回転値&lt;/li>
&lt;/ul>
&lt;p>ある Gltf Scene (Unity Hierarhcy) がこのデータを受けて同じポーズを再現するには以下の条件必要です。&lt;/p>
&lt;ul>
&lt;li>Gltf Node (Unity GameObject) とボーン(hips, spine, chest&amp;hellip;)の対応が分かっている&lt;/li>
&lt;li>ボーンの親子関係が決まっている&lt;/li>
&lt;li>ポーズを受ける前の姿勢が決まっている =&amp;gt; T-Pose&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">備考&lt;/h4>
細かく言えば、ボーンの長さが違うと同じポーズになりません。
これを解決する技術を、リターゲットと言いますが VRM では特に指定していません。
例えば、股-膝-足首-踵 の比率が違うと地面に対してすべります。
&lt;/div>
&lt;p>Unity の HumanoidAvatar を元に決めたのでだいたい同じです。&lt;/p>
&lt;p>&lt;a href="https://docs.unity3d.com/Manual/AvatarCreationandSetup.html">https://docs.unity3d.com/Manual/AvatarCreationandSetup.html&lt;/a>&lt;/p>
&lt;p>さらに、プログラムでの扱いを簡単にするために&lt;/p>
&lt;ul>
&lt;li>すべての Gltf Node (Unity GameObject) の回転を0にしたときに初期ポーズになる&lt;/li>
&lt;li>スケールは変化しない&lt;/li>
&lt;/ul>
&lt;p>を追加したものが VRM のヒューマノイドです。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">備考&lt;/h4>
特にスケールは難しい問題で、スケール中心が原点以外、負のスケール、XYZ別々のスケールなどを考慮したプログラム書くのは大変な負担となります。
&lt;/div>
&lt;h2 id="t-pose">T-Pose&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/T_pose.png" alt="T_pose" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T-Poseの例&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>腕と手の指についても規約があります。&lt;/p>
&lt;ul>
&lt;li>手の平は下向き&lt;/li>
&lt;li>親指は水平でXZ平面(上から見て)45度&lt;/li>
&lt;/ul>
&lt;h2 id="unityのヒューマノイド">Unityのヒューマノイド&lt;/h2>
&lt;p>Unity では、 Avatar というオブジェクトがあります。
これを、 Humanoid モードに設定できます。
Avatar は Unity の オブジェクトですが、Humanoid Avatar の設定画面は &lt;code>fbx importer&lt;/code> の一部です。
このため、 fbx 以外のデータから Humanoid Avatar のあるモデルを作れません。
ただし、Program から Humanoid Avatar を作成する関数はあるので、
UniVRMは Humanoid Avatar を作成できます。 &lt;a href="https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/">humanoid component&lt;/a>&lt;/p>
&lt;h2 id="互換性のあるbvh">互換性のあるBVH&lt;/h2>
&lt;p>初期姿勢が、 &lt;code>T-Pose&lt;/code> であるBVHと互換性があります。&lt;/p>
&lt;ul>
&lt;li>hips に移動値を代入して&lt;/li>
&lt;li>hips から子に向かって ローカル回転を代入します&lt;/li>
&lt;/ul>
&lt;h2 id="詳細">詳細&lt;/h2>
&lt;p>ボーンの一覧は、&lt;/p>
&lt;p>&lt;a href="https://docs.unity3d.com/ja/2019.4/ScriptReference/HumanBodyBones.html">https://docs.unity3d.com/ja/2019.4/ScriptReference/HumanBodyBones.html&lt;/a>&lt;/p>
&lt;p>と同じです。&lt;/p>
&lt;ul>
&lt;li>対象となるノードはスキニング(GLTFのskinおよびjoint、UnityのSkinnedMeshRendererなど)とは無関係に選択できる&lt;/li>
&lt;li>必須のボーンがすべて含まれている&lt;/li>
&lt;li>ボーンの親子関係がヒューマノイドの定義を守っている(LowerLegの最初に見つかる祖先ボーンがUpperLegであるなど)&lt;/li>
&lt;li>hipsをrootに以下の親子関係。カッコは必須でないボーン
&lt;ul>
&lt;li>
&lt;p>hips - spine - chest - (upper chest) - neck - head&lt;/p>
&lt;ul>
&lt;li>headからleft - (eye)&lt;/li>
&lt;li>headからright - (eye)&lt;/li>
&lt;li>chestまたはupper chestからleft - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li>
&lt;li>chestまたはupper chestからright - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li>
&lt;li>hipsからleft - upper leg - lower leg - foot - (toes)&lt;/li>
&lt;li>hipsからright - upper leg - lower leg - foot - (toes)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>間にヒューマノイドに関係ないノードが入ることは許す(LowerLegの親がemptyでその親がUpperLegであるなど)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>必須でないボーンは飛ばしてよい(UpperArmの親がshoulderじゃなくてchestなど)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="関連イシュー">関連イシュー&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/vrm-specification/issues/87">https://github.com/vrm-c/vrm-specification/issues/87&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blogs.unity3d.com/jp/2014/05/26/mecanim-humanoids/">Mecanim Humanoids&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/ousttrue/items/aead1c943855561b62e7">BlenderからUnityのHumanoid互換でfbxをエクスポートする&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: VRMをインポートする</title><link>https://vrm.dev/docs/univrm/import/univrm_import/</link><pubDate>Mon, 12 Oct 2020 15:28:09 +0900</pubDate><guid>https://vrm.dev/docs/univrm/import/univrm_import/</guid><description>
&lt;h2 id="エディタモードでvrmファイルをインポートする">エディタモードでVRMファイルをインポートする&lt;/h2>
&lt;h3 id="1unityで空のプロジェクトを作る">1.Unityで空のプロジェクトを作る&lt;/h3>
&lt;img src="https://vrm.dev/images/vrm/unity_new_project.png" />
&lt;hr>
&lt;p>もしくは&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/new_project.jpg" />
&lt;hr>
&lt;p>Unityを起動し、プロジェクトを新規作成します。&lt;/p>
&lt;h3 id="2unityにunivrmをインストール">2.UnityにUniVRMをインストール&lt;/h3>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">UniVRM/releases&lt;/a>から最新のunitypackageをダウンロードし、&lt;code>Assets/VRM&lt;/code>、&lt;code>Assets/UniGLTF&lt;/code>及び&lt;code>Assets/VRMShaders&lt;/code>にインストールします。
&lt;strong>既存のUniVRMが存在している場合、あらかじめVRM、UniGLTF、VRMShaders、そしてMeshUtilityフォルダを削除することを推奨&lt;/strong>しています。
UniVRM-XXX.unitypackageファイルをUnityにインポートしてください。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="400" />
&lt;hr>
&lt;h3 id="3vrmファイルをunity上に読み込む">3.VRMファイルをUnity上に読み込む&lt;/h3>
&lt;p>&lt;strong>VRMファイルを、UnityのAssetsにドラッグ＆ドロップする&lt;/strong>だけで、VRMファイルがインポートされ&lt;strong>モデルデータのPrefabが生成されます&lt;/strong>。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_prefab.png" />
&lt;hr>
&lt;p>&lt;strong>VRMから生成されたPrefabをシーンに配置します&lt;/strong>。すると、モデルデータが表示されます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene2.png" />
&lt;hr>
&lt;p>読み込まれたモデルデータをHierarchyで選択すると、インスペクタに各種情報が表示されます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;hr>
&lt;h2 id="関連セクション">関連セクション&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/how_to_make_vrm/setup_vrm/#vrm独自の設定を行う">vrm独自の設定を行う&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/export/univrm_export/">VRMをエクスポートする&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 0. Unityを用意して、UniVRMをインストールする</title><link>https://vrm.dev/docs/vrm/how_to_make_vrm/setup_unity/</link><pubDate>Wed, 26 Aug 2020 15:52:30 +0900</pubDate><guid>https://vrm.dev/docs/vrm/how_to_make_vrm/setup_unity/</guid><description>
&lt;h2 id="univrm-をダウンロードする">UniVRM をダウンロードする&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>&lt;/p>
&lt;p>から最新版をダウンロードしてください。
ファイル名は、&lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code> です。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/download_unitypackage.png" alt="download_unitypackage">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">XX YY&lt;/h4>
XX は UniVRM のバージョン。YYYY は バージョン識別 ID です。
&lt;/div>
&lt;h2 id="unity-をインストールする">Unity をインストールする&lt;/h2>
&lt;p>&lt;a href="https://create.unity3d.com/jp-howto-install-win">https://create.unity3d.com/jp-howto-install-win&lt;/a>&lt;/p>
&lt;p>UniVRMの対応するバージョンの Unity をインストールしてください。
対応するUnityのバージョンは、&lt;code>UniVRM をダウンロードする&lt;/code> の URL をご確認ください。&lt;/p>
&lt;p>推奨バージョン以外を使う場合は、 &lt;a href="https://vrm.dev/docs/univrm/install/">インストール&lt;/a> もご確認ください。&lt;/p>
&lt;h2 id="unityで空のプロジェクトを作る">Unityで空のプロジェクトを作る&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/unity_new_project.png" />
&lt;p>もしくは&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/new_project.jpg" />
&lt;p>Unityを起動し、プロジェクトを新規作成します。New→Create projectをクリック。&lt;/p>
&lt;h2 id="unity-に-univrm-unitypackage-を-import">Unity に UniVRM unitypackage を Import&lt;/h2>
&lt;p>メニューの &lt;code>Assets&lt;/code> - &lt;code>Import pacakge&lt;/code> - &lt;code>Custom Package&lt;/code> を選択して、
ダウンロードした &lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code> を選んでください。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="400" />
&lt;p>右下の &lt;code>import&lt;/code> ボタンを押します。&lt;/p>
&lt;h2 id="import-が成功したか確認する方法">import が成功したか確認する方法&lt;/h2>
&lt;p>VRM menu が表示されていれば動作しています：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm menu" />
&lt;hr>
&lt;p>前のバージョン：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu_old.jpg" alt="vrm menu old" />
&lt;hr>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Unity-2018 で menu が出てこない場合&lt;/h4>
&lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Scripting Runtime Version&lt;/code> を &lt;code>.Net4.X equivalent&lt;/code> になっていることを確認してください
&lt;/div>
&lt;h3 id="console">Console&lt;/h3>
&lt;p>Console を表示させると、Unity のエラーメッセージが見れます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/show_console.jpg" alt="show console" width="500" />
&lt;p>Console左上の clear ボタンを押して赤いメッセージが消えない場合は unitypackage のインストールに失敗しているなど、unity project に異常があります。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/error_in_console.jpg" alt="clear console" width="500" />
&lt;h2 id="manual">Manual&lt;/h2>
&lt;p>➡ &lt;a href="https://vrm.dev/docs/univrm/install/">インストール&lt;/a>&lt;/p></description></item><item><title>Docs: 構成</title><link>https://vrm.dev/dev/univrm-1.xx/structure/</link><pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate><guid>https://vrm.dev/dev/univrm-1.xx/structure/</guid><description>
&lt;h2 id="assetsvrmlib">Assets/vrmlib&lt;/h2>
&lt;p>GLTFからバイト列を切り出して、index 参照を実体化して作業しやすくした中間の入れ物 &lt;code>VrmLib.Model&lt;/code>。&lt;/p>
&lt;h2 id="assetsprotobufserializer">Assets/ProtobufSerializer&lt;/h2>
&lt;p>VRM-1.0 の読み書き。
ProtocolBufferで定義して、Jsonのシリアライザを生成したもの。&lt;/p>
&lt;p>VRM-1.0 から中間形式の &lt;code>VrmLib.Model&lt;/code> に移し替える。&lt;/p>
&lt;ul>
&lt;li>&lt;code>VRM-1.0 &amp;lt;=&amp;gt; VrmLib.Model&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="assetsvrm">Assets/VRM&lt;/h2>
&lt;p>UniVRM-0.55 に &lt;code>package.json&lt;/code> を追加したもの。&lt;/p>
&lt;ul>
&lt;li>MToon shader&lt;/li>
&lt;li>UniUnlit shader&lt;/li>
&lt;li>VRM-0.X のシリアライザ&lt;/li>
&lt;/ul>
&lt;h2 id="assetsunivrm0xreader">Assets/UniVRM0XReader&lt;/h2>
&lt;p>VRM-0.X から中間形式の &lt;code>VrmLib.Model&lt;/code> に移し替える。&lt;/p>
&lt;ul>
&lt;li>&lt;code>VRM-0.x =&amp;gt; VrmLib.Model&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="assetsunivrm-10">Assets/UniVRM-1.0&lt;/h2>
&lt;ul>
&lt;li>&lt;code>VrmLib.Model &amp;lt;=&amp;gt; Unity&lt;/code>&lt;/li>
&lt;li>右手系・左手系の変換&lt;/li>
&lt;li>スクリプトスレッドで実行する必要あり&lt;/li>
&lt;li>GLTF部分(Mesh, Texture, Material, GameObject, SkinnedMeshRendererなど)&lt;/li>
&lt;li>VRM部分(HumanoidAvatar, BlendShapeProxy, LookAt, FirstPersonなど)&lt;/li>
&lt;/ul></description></item><item><title>Docs: APIの変更履歴</title><link>https://vrm.dev/docs/univrm/programming/univrm_api_history/</link><pubDate>Mon, 21 May 2018 10:00:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/programming/univrm_api_history/</guid><description>
&lt;h2 id="v068-importercontext-の整理">v0.68 ImporterContext の整理&lt;/h2>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/programming/runtime_import/">ランタイムインポーター&lt;/a>&lt;/p>
&lt;h2 id="v0632-gltf-の-extension-の実装方法を変更">v0.63.2 gltf の extension の実装方法を変更&lt;/h2>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/">how_to_impl_extension&lt;/a>&lt;/p>
&lt;h2 id="v056-blendshapekey-の仕様変更">v0.56 BlendShapeKey の仕様変更&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/wiki/ReleaseNote-v0.56.0%28ja%29#blendshapekey%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%82%92%E5%8E%B3%E6%A0%BC%E5%8C%96%E6%95%B4%E7%90%86">BlendShapeKeyのインタフェースを厳格化、整理&lt;/a>&lt;/p>
&lt;h2 id="v036">v0.36&lt;/h2>
&lt;h3 id="テクスチャ名の格納位置の修正">テクスチャ名の格納位置の修正&lt;/h3>
&lt;p>GLTFの仕様に準拠しました。&lt;/p>
&lt;ul>
&lt;li>extraはextrasの間違い&lt;/li>
&lt;li>imageはnameを持っていた&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a00;background-color:#faa">json.images&lt;/span>[&lt;span style="color:#a00;background-color:#faa">i&lt;/span>]&lt;span style="color:#a00;background-color:#faa">.extra.name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>変更後&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a00;background-color:#faa">json.images&lt;/span>[&lt;span style="color:#a00;background-color:#faa">i&lt;/span>]&lt;span style="color:#a00;background-color:#faa">.name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ブレンドシェイプ名の格納位置の修正">ブレンドシェイプ名の格納位置の修正&lt;/h3>
&lt;p>GLTFの仕様に準拠しました。&lt;/p>
&lt;ul>
&lt;li>extraはextrasの間違い&lt;/li>
&lt;li>targetにextrasは不許可&lt;/li>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF/issues/1036#issuecomment-314078356">https://github.com/KhronosGroup/glTF/issues/1036#issuecomment-314078356&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a00;background-color:#faa">json.meshes&lt;/span>[&lt;span style="color:#a00;background-color:#faa">i&lt;/span>]&lt;span style="color:#a00;background-color:#faa">.primitives&lt;/span>[&lt;span style="color:#a00;background-color:#faa">j&lt;/span>]&lt;span style="color:#a00;background-color:#faa">.targets&lt;/span>[&lt;span style="color:#a00;background-color:#faa">k&lt;/span>]&lt;span style="color:#a00;background-color:#faa">.extra.name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>変更後&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a00;background-color:#faa">json.meshes&lt;/span>[&lt;span style="color:#a00;background-color:#faa">i&lt;/span>]&lt;span style="color:#a00;background-color:#faa">.primitives&lt;/span>[&lt;span style="color:#a00;background-color:#faa">j&lt;/span>]&lt;span style="color:#a00;background-color:#faa">.extras.targetNames&lt;/span>[&lt;span style="color:#a00;background-color:#faa">k&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: ブレンドシェイプの設定</title><link>https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/</guid><description>
&lt;p>UniVRM v0.45で導入された新機能は&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/blendshape_setup/">設定画面&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/">BlendShapeの状態をベイクする&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>をご覧ください。&lt;/p>
&lt;h2 id="vrmblendshapeproxy">VRMBlendShapeProxy&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxy.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>実行時のVRMBlendShapeProxyのインスペクタ。Editorをプレイ状態にすると表示されます&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>使い方は、&lt;/p>
&lt;ul>
&lt;li>BlendShapeAvatarのインスペクタで設定する(Editor)&lt;/li>
&lt;li>BlendShapeClipの値を０~１に変更する(実行時)&lt;/li>
&lt;/ul>
&lt;p>となっています。&lt;/p>
&lt;h2 id="blendshapeavatar">BlendShapeAvatar&lt;/h2>
&lt;p>このアセットのインスペクタで表情設定を作成します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyEditor.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>これをダブルクリックする&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>か&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeAvatarAsset.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>これを選択状態にする&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeAvatarEditor.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>BlendShapeEditorのインスペクタ&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>作りたい表情の名前を選択して表示を切り替えます。
以下、Funを選択した例です。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClip.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mouth_smileとeye_smileとeyeblow_smileを100にする&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>画像のように眉毛と目と口のBlendShapeがわかれているBlendShapeをグループ化して名前とプリセットを指定することができます。&lt;/p>
&lt;p>Sliderを変更してBlendShapeを作った後はApplyを押して値を記録してください。&lt;/p>
&lt;h2 id="blendshapeのプリセット">BlendShapeのプリセット&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShape_Preset.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Presetを選択する&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>BlendShapeClipに対して事前定義された名前です。
以下のものがあります。&lt;/p>
&lt;h3 id="neutral">NEUTRAL&lt;/h3>
&lt;p>標準の表情を指定します。
待機状態で使うことを想定しています。&lt;/p>
&lt;h3 id="a-i-u-e-o">A, I, U, E, O&lt;/h3>
&lt;p>リップシンクの&lt;code>あ・い・う・え・お&lt;/code>の音声に対応します。&lt;/p>
&lt;h3 id="blink">Blink&lt;/h3>
&lt;p>まばたきです。&lt;/p>
&lt;h3 id="blink_l-blink_r">Blink_L, Blink_R&lt;/h3>
&lt;p>片目だけつぶる動作です。&lt;/p>
&lt;h3 id="joy-angry-sorrow-fun">Joy, Angry, Sorrow, Fun&lt;/h3>
&lt;p>喜怒哀楽です。&lt;/p>
&lt;h3 id="lookup-lookdown-lookleft-lookright">LookUp, LookDown, LookLeft, LookRight&lt;/h3>
&lt;p>目線がモーフで制御されているタイプのモデルで使います。&lt;/p>
&lt;h3 id="unknown">Unknown&lt;/h3>
&lt;p>事前定義に無い表情などを作るときに指定します。&lt;/p>
&lt;h2 id="blendshapeproxyの値を変更する実行時">BlendShapeProxyの値を変更する(実行時)&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyRuntime.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Presetを使う&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>インスペクタから操作できます。&lt;/p>
&lt;h2 id="オプション表情を追加する">[オプション]表情を追加する&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyRuntime.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ボタンを押します&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>保存ファイルを決めます。
一番後ろのボタンを選択して名前を入力して設定を作成してください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClipOption.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ボタンを押します&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>コードからは以下のように呼び出せます。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// unknownなのでstringで呼び出し
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>proxy.ImmediatelySetValue(&lt;span style="color:#c30">&amp;#34;びっくり&amp;#34;&lt;/span>, &lt;span style="color:#f60">1.0f&lt;/span>); &lt;span style="color:#09f;font-style:italic">// 0から1で指定
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="オプションマテリアルの色をモーフする">[オプション]マテリアルの色をモーフする&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClipMaterial.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Materialモーフの設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: GLTFについて</title><link>https://vrm.dev/docs/univrm/gltf/gltf_about/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/gltf_about/</guid><description>
&lt;p>glTFはOpenGLの仕様策定をしているKHRONOSによる3Dフォーマットです。2017年にVersion2が策定されました。
VRMはglTF2.0をベースとしたフォーマットとなっています。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF">https://github.com/KhronosGroup/glTF&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gltfはどんな情報を記録できるのか">glTFはどんな情報を記録できるのか&lt;/h2>
&lt;ul>
&lt;li>メッシュ(頂点配列、インデックス配列)
&lt;ul>
&lt;li>モーフターゲット&lt;/li>
&lt;li>スキニング(4weight)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テクスチャ&lt;/li>
&lt;li>マテリアル(PBR)&lt;/li>
&lt;li>シーン&lt;/li>
&lt;li>アニメーション&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>カメラ&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>光源&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;p>3Dのシーン全体を記録できます。&lt;/p>
&lt;ul>
&lt;li>OpenGLの右手系Y-UP座標&lt;/li>
&lt;li>メートル単位&lt;/li>
&lt;li>リトルエンディアン&lt;/li>
&lt;/ul>
&lt;h2 id="gltfフォーマット概説">glTFフォーマット概説&lt;/h2>
&lt;p>JSON記述部と、画像や頂点配列を記録するバイナリ部の２つの部分からなります。&lt;/p>
&lt;p>gltf形式では、URLやパスで参照する方法で外部のバイナリデータにアクセスします。
glb形式ではJSON部とバイナリ部をひとつのファイルにまとめていて、バイト列のオフセットでバイナリデータにアクセスします。
プログラムから扱うには外部ファイルへのアクセスが無いglb形式の方が簡単&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>です。&lt;/p>
&lt;h2 id="glb形式">glb形式&lt;/h2>
&lt;p>&lt;code>ヘッダ部 + チャンク部繰り返し&lt;/code>という構造になっています。
実質的には、
&lt;code>ヘッダ部 + JSON CHUNk + BINARY CHUNK&lt;/code>となります。&lt;/p>
&lt;p>ヘッダ部&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">長さ&lt;/th>
&lt;th align="left">内容&lt;/th>
&lt;th align="left">型&lt;/th>
&lt;th align="left">値&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">&lt;/td>
&lt;td align="left">ascii&lt;/td>
&lt;td align="left">&amp;ldquo;glTF&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">gltfバージョン&lt;/td>
&lt;td align="left">int32&lt;/td>
&lt;td align="left">2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">file size&lt;/td>
&lt;td align="left">int32&lt;/td>
&lt;td align="left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>チャンク部&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">長さ&lt;/th>
&lt;th align="left">内容&lt;/th>
&lt;th align="left">型&lt;/th>
&lt;th align="left">値&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">chunk size&lt;/td>
&lt;td align="left">int32&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">chunk type&lt;/td>
&lt;td align="left">ascii&lt;/td>
&lt;td align="left">&amp;ldquo;JSON&amp;rdquo; or &amp;ldquo;BIN\x00&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">chunk size&lt;/td>
&lt;td align="left">chunk body&lt;/td>
&lt;td align="left">バイト列&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="python3によるパース例">python3によるパース例&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#069;font-weight:bold">import&lt;/span> &lt;span style="color:#0cf;font-weight:bold">struct&lt;/span>
&lt;span style="color:#069;font-weight:bold">import&lt;/span> &lt;span style="color:#0cf;font-weight:bold">json&lt;/span>
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">Reader&lt;/span>:
&lt;span style="color:#069;font-weight:bold">def&lt;/span> __init__(self, data: &lt;span style="color:#366">bytes&lt;/span>)&lt;span style="color:#555">-&amp;gt;&lt;/span>None:
self&lt;span style="color:#555">.&lt;/span>data &lt;span style="color:#555">=&lt;/span> data
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">=&lt;/span> &lt;span style="color:#f60">0&lt;/span>
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">read_str&lt;/span>(self, size):
result &lt;span style="color:#555">=&lt;/span> self&lt;span style="color:#555">.&lt;/span>data[self&lt;span style="color:#555">.&lt;/span>pos: self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+&lt;/span> size]
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+=&lt;/span> size
&lt;span style="color:#069;font-weight:bold">return&lt;/span> result&lt;span style="color:#555">.&lt;/span>strip()
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">read&lt;/span>(self, size):
result &lt;span style="color:#555">=&lt;/span> self&lt;span style="color:#555">.&lt;/span>data[self&lt;span style="color:#555">.&lt;/span>pos: self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+&lt;/span> size]
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+=&lt;/span> size
&lt;span style="color:#069;font-weight:bold">return&lt;/span> result
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">read_uint&lt;/span>(self):
result &lt;span style="color:#555">=&lt;/span> struct&lt;span style="color:#555">.&lt;/span>unpack(&lt;span style="color:#c30">&amp;#39;I&amp;#39;&lt;/span>, self&lt;span style="color:#555">.&lt;/span>data[self&lt;span style="color:#555">.&lt;/span>pos:self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+&lt;/span> &lt;span style="color:#f60">4&lt;/span>])[&lt;span style="color:#f60">0&lt;/span>]
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+=&lt;/span> &lt;span style="color:#f60">4&lt;/span>
&lt;span style="color:#069;font-weight:bold">return&lt;/span> result
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">parse_glb&lt;/span>(data: &lt;span style="color:#366">bytes&lt;/span>):
reader &lt;span style="color:#555">=&lt;/span> Reader(data)
magic &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_str(&lt;span style="color:#f60">4&lt;/span>)
&lt;span style="color:#069;font-weight:bold">if&lt;/span> magic &lt;span style="color:#555">!=&lt;/span> &lt;span style="color:#c30">b&lt;/span>&lt;span style="color:#c30">&amp;#39;glTF&amp;#39;&lt;/span>:
&lt;span style="color:#069;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span>(f&lt;span style="color:#c30">&amp;#39;magic not found: #{magic}&amp;#39;&lt;/span>)
version &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_uint()
&lt;span style="color:#069;font-weight:bold">if&lt;/span> version &lt;span style="color:#555">!=&lt;/span> &lt;span style="color:#f60">2&lt;/span>:
&lt;span style="color:#069;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span>(f&lt;span style="color:#c30">&amp;#39;version:#{version} is not 2&amp;#39;&lt;/span>)
size &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_uint()
size &lt;span style="color:#555">-=&lt;/span> &lt;span style="color:#f60">12&lt;/span>
json_str &lt;span style="color:#555">=&lt;/span> None
body &lt;span style="color:#555">=&lt;/span> None
&lt;span style="color:#069;font-weight:bold">while&lt;/span> size &lt;span style="color:#555">&amp;gt;&lt;/span> &lt;span style="color:#f60">0&lt;/span>:
&lt;span style="color:#09f;font-style:italic">#print(size)&lt;/span>
chunk_size &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_uint()
size &lt;span style="color:#555">-=&lt;/span> &lt;span style="color:#f60">4&lt;/span>
chunk_type &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_str(&lt;span style="color:#f60">4&lt;/span>)
size &lt;span style="color:#555">-=&lt;/span> &lt;span style="color:#f60">4&lt;/span>
chunk_data &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read(chunk_size)
size &lt;span style="color:#555">-=&lt;/span> chunk_size
&lt;span style="color:#069;font-weight:bold">if&lt;/span> chunk_type &lt;span style="color:#555">==&lt;/span> &lt;span style="color:#c30">b&lt;/span>&lt;span style="color:#c30">&amp;#39;BIN&lt;/span>&lt;span style="color:#c30;font-weight:bold">\x00&lt;/span>&lt;span style="color:#c30">&amp;#39;&lt;/span>:
body &lt;span style="color:#555">=&lt;/span> chunk_data
&lt;span style="color:#069;font-weight:bold">elif&lt;/span> chunk_type &lt;span style="color:#555">==&lt;/span> &lt;span style="color:#c30">b&lt;/span>&lt;span style="color:#c30">&amp;#39;JSON&amp;#39;&lt;/span>:
json_str &lt;span style="color:#555">=&lt;/span> chunk_data
&lt;span style="color:#069;font-weight:bold">else&lt;/span>:
&lt;span style="color:#069;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span>(f&lt;span style="color:#c30">&amp;#39;unknown chunk_type: {chunk_type}&amp;#39;&lt;/span>)
&lt;span style="color:#069;font-weight:bold">return&lt;/span> json&lt;span style="color:#555">.&lt;/span>loads(json_str), body
&lt;span style="color:#069;font-weight:bold">with&lt;/span> &lt;span style="color:#366">open&lt;/span>(&lt;span style="color:#c30">&amp;#39;AliciaSolid.vrm&amp;#39;&lt;/span>, &lt;span style="color:#c30">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#069;font-weight:bold">as&lt;/span> f:
parsed, body &lt;span style="color:#555">=&lt;/span> parse_glb(f&lt;span style="color:#555">.&lt;/span>read())&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="vrmによる拡張情報">VRMによる拡張情報&lt;/h2>
&lt;p>JSONの&lt;code>json['extensions']['VRM']&lt;/code>以下に格納されています。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.ja.md">VRM仕様&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="vrmのgltf部分を3d-builderで表示する">VRMのglTF部分を3D Builderで表示する&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/alicia_3dbuilder.png" />
&lt;p>～.vrmとなっているファイル拡張子を ～.glb に変更すると、&lt;strong>Windows 10標準搭載の3D Builderで読み込み確認することができます&lt;/strong>（ただしVRM独自の設定は反映されません)。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>VRMではサポートしていません &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>VRMではglbを採用しています。 &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Docs: LookAt</title><link>https://vrm.dev/docs/univrm/lookat/univrm_lookat/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/univrm_lookat/</guid><description>
&lt;p>VRMでは頭から目標(注視点)への相対的な回転(Yaw, Pitch)を得て、
目に適用できます。&lt;/p>
&lt;ul>
&lt;li>VRMLookAtHead + VRMLookAtBoneApplyer または VRMLookAtBlendShapeApplyer の２つのコンポーネントで設定します。&lt;/li>
&lt;/ul>
&lt;h2 id="lookatの種類">LookAtの種類&lt;/h2>
&lt;p>注視点への Yaw, Pitch 角を適用する方法が以下の３種類あります。
モデルに応じて選択してください。&lt;/p>
&lt;h3 id="bone">Bone&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_bone/">eye ボーンが回転するタイプ&lt;/a>&lt;/p>
&lt;h3 id="blendshape">BlendShape&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_blendshape/">BlendShapeの頂点移動で制御するタイプ&lt;/a>&lt;/p>
&lt;h3 id="textureuv">TextureUV&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_uv/">目のテクスチャの &lt;code>UV Offset&lt;/code> で制御するタイプ&lt;/a>&lt;/p>
&lt;h2 id="vrmlookathead">VRMLookAtHead&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMLookAtHead.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMLookAtHead&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>このコンポーネントは頭から見たTargetの方向を計算します。&lt;/p>
&lt;h3 id="target">Target&lt;/h3>
&lt;blockquote>
&lt;p>Application設定 です。モデルのセットアップには使いません&lt;/p>
&lt;/blockquote>
&lt;p>注視する対象物です。目を向けたい場所にあるオブジェクトをセットしてください。
カメラをセットすればカメラ目線になります。&lt;/p>
&lt;h2 id="視線計算の基準位置">視線計算の基準位置&lt;/h2>
&lt;p>VRMFirstPerson の FirstPersonOffset で Head ボーンからの相対的な基準位置を設定できます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/firstperson.png" /></description></item><item><title>Docs: MToon</title><link>https://vrm.dev/docs/univrm/shaders/shader_mtoon/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/shaders/shader_mtoon/</guid><description>
&lt;p>&lt;a href="https://www.slideshare.net/VirtualCast/vrm-mtoon">MToonの使い方&lt;/a>&lt;/p>
&lt;h1 id="mtoon-について">MToon について&lt;/h1>
&lt;p>MToon は日本のアニメ的表現をすることを目標としています。
主色 (Lit Color) と陰色 (Shade Color) の 2 色を、Lighting パラメータや光源環境に応じて混合することでそれを実現します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_about.png" alt="alicia MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MToon を適用したニコニ立体ちゃん&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="手早く設定したい人向け">手早く設定したい人向け&lt;/h1>
&lt;h2 id="共通項目">共通項目&lt;/h2>
&lt;ul>
&lt;li>目的のマテリアルを選択し、シェーダを &lt;code>VRM/MToon&lt;/code> に変更&lt;/li>
&lt;li>&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> と &lt;code>Color-&amp;gt;Shade Color&lt;/code> に同じテクスチャを設定&lt;/li>
&lt;li>&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> は白色 &lt;code>Color-&amp;gt;Shade Color&lt;/code> は好きな陰色を設定&lt;/li>
&lt;li>&lt;code>Shading-&amp;gt;Toony&lt;/code> は好きな値。主色と影色をパキッとさせたいときは &lt;code>1&lt;/code>&lt;/li>
&lt;li>&lt;code>Rim-&amp;gt;Additive&lt;/code> は &lt;code>Spheremap&lt;/code> や &lt;code>MatCap&lt;/code> と同等のテクスチャを設定&lt;/li>
&lt;li>&lt;code>Outline-&amp;gt;Width-&amp;gt;Mode&lt;/code> は輪郭線を必要とするなら &lt;code>WorldCoordinates&lt;/code> で、しないなら &lt;code>None&lt;/code>&lt;/li>
&lt;li>&lt;code>Outline-&amp;gt;Width-&amp;gt;Width&lt;/code> は 見た目上好きな値&lt;/li>
&lt;/ul>
&lt;h2 id="普通のマテリアル">普通のマテリアル&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Shading Shift&lt;/code> は &lt;code>0&lt;/code>&lt;/li>
&lt;li>&lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> は &lt;code>1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="キャラクタの顔など影があまりついてほしくないマテリアル">キャラクタの顔など、影があまりついてほしくないマテリアル&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Shading Shift&lt;/code> はマイナスの値&lt;/li>
&lt;li>&lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> は &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="設定項目">設定項目&lt;/h1>
&lt;h2 id="準備">準備&lt;/h2>
&lt;p>目的のマテリアルを選択し、シェーダを &lt;code>VRM/MToon&lt;/code> に変更します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/set_mtoon.png" alt="select MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Material の Shader を VRM/MToon に変更.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rendering">Rendering&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_inspector_rendering.png" alt="MToon Rendering" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Rendering Inspector に含まれる項目.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Rendering 項目では主色と影色、および描画方法を設定します。&lt;/p>
&lt;h3 id="rendering-type">Rendering Type&lt;/h3>
&lt;p>マテリアルが不透明か半透明かどうかを設定します。&lt;/p>
&lt;ul>
&lt;li>Opaque
&lt;ul>
&lt;li>不透明です。基本的には Opaque を設定することを推奨します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cutout
&lt;ul>
&lt;li>不透明ですが &lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> のアルファ値情報を参照して &lt;code>Color-&amp;gt;Alpha-&amp;gt;Cutoff&lt;/code> の値より小さな箇所の描画をスキップします。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transparent
&lt;ul>
&lt;li>半透明です。&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> のアルファ値どおりの不透明度になります。&lt;/li>
&lt;li>デメリットとして輪郭線描画は正しく行われません。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cull-mode">Cull Mode&lt;/h3>
&lt;p>ポリゴンのどちら側の面を描画するかを設定します。&lt;/p>
&lt;ul>
&lt;li>Back
&lt;ul>
&lt;li>表側を描画します。基本的にはこの Back を選択します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Front
&lt;ul>
&lt;li>裏側を描画します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>None
&lt;ul>
&lt;li>両面を描画します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="alpha">Alpha&lt;/h3>
&lt;p>&lt;code>Rendering Type&lt;/code> が &lt;code>Cutout&lt;/code> であるときだけ設定する必要があります。&lt;/p>
&lt;ul>
&lt;li>Cutoff (&lt;code>Color-&amp;gt;Alpha&lt;/code>)
&lt;ul>
&lt;li>描画するしないのしきい値を設定します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="color">Color&lt;/h2>
&lt;p>描画色を設定します。
テクスチャと色は乗算されます。
光が当たる主色は &lt;code>Lit Color, Alpha&lt;/code> に、光が当たらない陰色は &lt;code>Shade Color&lt;/code> に設定します。
また &lt;code>Lit Color, Alpha&lt;/code> のアルファ値には不透明度情報を設定します。&lt;/p>
&lt;h2 id="lighting">Lighting&lt;/h2>
&lt;h3 id="shading-shift">Shading Shift&lt;/h3>
&lt;p>光の当たり方に対して、主色と陰色のしきい値を調整します。
&lt;code>0&lt;/code> のとき普通のライティングになります。
マイナス値にするとアニメ的な、主色の範囲が広いライティングになります。
マイナス値のときはセルフシャドウを無効化する必要があるため、表示された警告に従い &lt;code>Shadow Receive Multiplier&lt;/code> を &lt;code>0&lt;/code> に設定する必要があります。&lt;/p>
&lt;h3 id="shading-toony">Shading Toony&lt;/h3>
&lt;p>&lt;code>Shading Shift&lt;/code> の項目における主色と陰色のしきい値付近を滑らかに変化させるか否かを設定します。
&lt;code>0&lt;/code> のときは通常の Lambert モデルのような写実寄りの滑らかさになります。
&lt;code>1&lt;/code> のときはしきい値ではっきり主色と陰色が変化するアニメ調のライティングになります。&lt;/p>
&lt;h3 id="shadow-receive-multiplier">Shadow Receive Multiplier&lt;/h3>
&lt;p>セルフシャドウや落影の影響度を設定します。
&lt;code>0&lt;/code> のときは影響を受けません。
&lt;code>1&lt;/code> のときは影響を受けます。&lt;/p>
&lt;h3 id="lightcolor-attenuation">LightColor Attenuation&lt;/h3>
&lt;p>光源の色の影響度を設定します。
&lt;code>0&lt;/code> のときは光源の色の影響を受けます。
&lt;code>1&lt;/code> のときは光源の色の影響を無効化し、光源の色の輝度だけを反映します。&lt;/p>
&lt;h3 id="rim-additive">Rim Additive&lt;/h3>
&lt;p>カメラと法線の関係による追加光源を表現します。
一般にはスフィアマップや MatCap と呼ばれます。&lt;/p>
&lt;h3 id="emission">Emission&lt;/h3>
&lt;p>光源環境によらず一定な色を設定します。&lt;/p>
&lt;h3 id="normal-map">Normal Map&lt;/h3>
&lt;p>法線マップを設定します。
右側の値は法線マップの強さを設定します。&lt;/p>
&lt;h2 id="outline">Outline&lt;/h2>
&lt;p>輪郭線を設定します。&lt;/p>
&lt;h3 id="width-mode">Width Mode&lt;/h3>
&lt;ul>
&lt;li>None
&lt;ul>
&lt;li>輪郭線を描画しません&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WorldCoordinates
&lt;ul>
&lt;li>世界に対して一定の幅の輪郭線を描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ScreenCoordinates
&lt;ul>
&lt;li>スクリーンに対して一定の幅の輪郭線を描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="width">Width&lt;/h3>
&lt;p>輪郭線の幅を設定します。
&lt;code>Width Mode&lt;/code> が &lt;code>WorldCoordinates&lt;/code> のとき単位はメートルです。&lt;/p>
&lt;h3 id="color-mode">Color Mode&lt;/h3>
&lt;ul>
&lt;li>FixedColor
&lt;ul>
&lt;li>固定色で描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MixedLighting
&lt;ul>
&lt;li>ライティングの影響を乗算します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="color-1">Color&lt;/h3>
&lt;p>輪郭線の色を設定します。&lt;/p>
&lt;h3 id="color-lighting-mix">Color Lighting Mix&lt;/h3>
&lt;p>&lt;code>Color Mode&lt;/code> が &lt;code>MixedLighting&lt;/code> のとき、その乗算係数を設定します。&lt;/p></description></item><item><title>Docs: 「VRM」って何？どんなことができる？</title><link>https://vrm.dev/vrm_about/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/vrm_about/</guid><description>
&lt;h2 id="vrmとは">「VRM」とは&lt;/h2>
&lt;p>VRMでは「人型」の「キャラクター・アバター」を取り扱うことができます。&lt;strong>UnityでVRMファイルを読み書きする標準実装(UniVRM)が提供されます&lt;/strong> が、 &lt;strong>フォーマットは &lt;a href="https://www.khronos.org/gltf/">GLTF&lt;/a> ベースでクロスプラットフォーム&lt;/strong> であり他のゲームエンジンやWebでも取り扱うことが可能です。&lt;/p>
&lt;ul>
&lt;li>ヒューマノイドを定義しているのでモーションキャプチャーや人型向けの汎用のモーションを再生できる。&lt;/li>
&lt;li>テクスチャやマテリアルなどすべてのデータが１ファイルにまとまり、&lt;strong>簡単に実行時にロードできる&lt;/strong>。&lt;/li>
&lt;li>「喜怒哀楽」「瞬き」「あいうえお」といった標準の顔操作が定義されている。ユーザー操作で表情を選択したり、音声からリップシンクしたり、ランダムで瞬きしたり、フェイシャルキャプチャーを割り当てたりできる ➡️ &lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/">BlendShape&lt;/a>&lt;/li>
&lt;li>3種類のマテリアル(シェーダー)に対応 ➡️ &lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">MToon&lt;/a>, &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">Unlit&lt;/a>, &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_standard/">PBR&lt;/a>&lt;/li>
&lt;li>3種類の視線制御に対応 ➡️ &lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_bone/">ボーンによる視線&lt;/a>、 &lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_blendshape/">BlendShapeによる視線&lt;/a>、 &lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_uv/">TextureUVによる視線&lt;/a>&lt;/li>
&lt;li>キャラクターの髪の毛などについて、物理エンジンに依存しない「揺れ物」標準実装を用意 ➡️ &lt;a href="https://vrm.dev/docs/univrm/springbone/univrm_secondary/">SpringBone&lt;/a>&lt;/li>
&lt;li>VRでのアバター利用のための、&lt;strong>「一人称視点再現のための情報」&lt;/strong> ➡️ &lt;a href="https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/">FirstPerson&lt;/a>&lt;/li>
&lt;li>タイトル・作者名などのメタ情報だけでなく、サムネイルや &lt;strong>VR時代に即した、アバターに特化したライセンス情報&lt;/strong> も内包可能 ➡️ &lt;a href="https://vrm.dev/docs/vrm/vrm_meta/">Meta&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>というように単なるモデルデータに留まらず、&lt;strong>アプリケーションでロードしてすぐに使えるようになっています&lt;/strong>。&lt;/p>
&lt;h2 id="vrmで何ができるの">VRMで何ができるの？&lt;/h2>
&lt;p>&lt;strong>VRM対応アプリケーションで同じアバター（3Dモデル）データを使うことができます。&lt;/strong>
対応アプリケーションが揃うと、こんな未来になるはず…&lt;/p>
&lt;ul>
&lt;li>VRM対応のキャラクタ製作ツールで自分のアバターをつくる&lt;/li>
&lt;li>自分のアバターで生放送をしていたら、友達も生放送をはじめたので友達の放送に凸しに行った&lt;/li>
&lt;li>放送後そのままVRゲームを起動、自分のアバターでVR世界を探索&lt;/li>
&lt;li>ゲームに飽きたのでVR世界のチャットへ移動。同じアバターで友達と遊ぶ&lt;/li>
&lt;li>翌日はVR勉強会にVR参加。もちろんアバターはいつもの姿で&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>「自分の」アバター（3Dモデルデータ）を「VRM」で取り扱うことで、いろいろなVRM対応アプリケーションやゲームで相互に行き来できるようになります。&lt;/strong>&lt;/p>
&lt;p>生放送、動画作成、ゲーム、チャット…。いまは複数のVR世界が分断されています。この分断されたVR世界をつなぐための第一歩、それがVRMなのです。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/VRM_WorldConnect_jp.png" alt="VRM applications" />
&lt;hr>
&lt;p>➡️ &lt;a href="https://vrm.dev/vrm_applications/">VRMファイルが使えるアプリケーション&lt;/a>&lt;/p>
&lt;h2 id="vrmの特徴">VRMの特徴&lt;/h2>
&lt;p>VR(Virtual Reality)やVTuberなどにおいて &lt;strong>「キャラクターや人型のアバター（の3Dモデル）」&lt;/strong> を取り扱おうとした場合、従来はアプリケーションごと・3Dモデルデータごとに独自のシステムを開発したり細かく調整したりする必要がありました。&lt;/p>
&lt;p>というのも…&lt;/p>
&lt;ul>
&lt;li>3Dモデルを作成したクリエイターや使用したモデリングツールによって「作法」が違いデータの状況がひとつひとつ異なっている
&lt;ul>
&lt;li>座標系が異なっていたり (Y-UP, Z-UP, 右手系、左手系)&lt;/li>
&lt;li>スケールが異なっていたり(メートル単位、cm単位)&lt;/li>
&lt;li>初期姿勢が異なっていたり(T-Pose, A-Pose, Z+向き、Z-向き)&lt;/li>
&lt;li>表情の表現方法が異なっていたり(Morph, Bone, 識別方法)&lt;/li>
&lt;li>骨（ボーン）の入れ方も状況によって異なっていたり(ボーンの識別方法、親子、リグ)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3Dモデルデータを取り扱うフォーマットは、各社各様で仕様が必要以上に複雑であったり、必要な情報が足りなかったりしている
&lt;ul>
&lt;li>対応ソフトが多い「FBXファイル」はアプリケーションごとに読めたり読めなかったり。どのアプリケーションのどのバージョンで出力したFBXなのか…というのを気にしたかたも多いと思います&lt;/li>
&lt;li>また、ランタイムロードというよりは、アセットとして取り込む方向性です&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3Dモデルデータを「アバターとして使用する」という観点で見ると、必要な情報が整備されていない
&lt;ul>
&lt;li>たとえば一人称視点を実現するための視点の位置はどこか、一人称視点から表示するためには頭部の表示を消さなければならないが、具体的にはどこを消すのか、など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>VRでのアバター表現が急速に盛り上がるなか、こういった状況が続くとアプリケーション開発者にとっても、3Dモデルクリエイターにとっても二度手間三度手間になってしまいます。
この状況を改善するために&lt;/p>
&lt;ul>
&lt;li>「人型のキャラクターやアバター」において&lt;/li>
&lt;li>細かいモデルデータの差違を吸収・統一し&lt;/li>
&lt;li>アプリケーション側の取り扱いを簡単にする&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>「VRM」は、このような特徴のある「プラットフォーム非依存の3Dアバターファイルフォーマット」を提案する&lt;/strong> ものです。&lt;/p>
&lt;h2 id="vrmファイルを投稿する探す">VRMファイルを投稿する・探す&lt;/h2>
&lt;p>現在、&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://seed.online/">The Seed Online&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.vroid.com/">VRoid Hub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://3d.nicovideo.jp/">ニコニ立体&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>でVRMファイルの投稿ができます。
ニコニ立体では&lt;a href="https://3d.nicovideo.jp/search?word_type=tag&amp;amp;word=VRM">こちら&lt;/a>から投稿されたVRMモデルデータのリストが見られます。ライセンスなど確認して使ってみてください。&lt;/p>
&lt;p>なお、ニコニ立体にご自分でVRMファイルを投稿する際、「バーチャルキャスト連携」を有効にすると&lt;a href="https://virtualcast.jp/">バーチャルキャスト&lt;/a>から利用できます。&lt;/p>
&lt;h2 id="vrmを使うアプリケーションを開発する">VRMを使うアプリケーションを開発する&lt;/h2>
&lt;p>➡️ &lt;a href="https://vrm.dev/docs/vrm/vrm_development/">VRMで開発する&lt;/a>&lt;/p></description></item><item><title>Docs: ランタイムインポーター</title><link>https://vrm.dev/docs/univrm/programming/runtime_import/</link><pubDate>Mon, 22 Mar 2021 18:15:57 +0900</pubDate><guid>https://vrm.dev/docs/univrm/programming/runtime_import/</guid><description>
&lt;h2 id="version-068">&lt;code>Version 0.68～&lt;/code>&lt;/h2>
&lt;h3 id="過去バージョンからの仕様変更">過去バージョンからの仕様変更&lt;/h3>
&lt;p>&lt;code>ImporterContext&lt;/code> の仕様を変更しました。&lt;/p>
&lt;ul>
&lt;li>ロード処理が Parse と Load の 2 ステップに分かれました。
&lt;ul>
&lt;li>Parse 処理をメインスレッド以外で処理することができます。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非同期ロード関数 &lt;code>ImporterContext.LoadAsync&lt;/code> の実装を &lt;code>Task&lt;/code> に変更しました。&lt;/li>
&lt;li>これまで明示的に破棄できなかった &lt;code>UnityEngine.Object&lt;/code> リソースを破棄できるようになりました。
&lt;ul>
&lt;li>リソースのリークを防ぐことができます。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ImporterContext.Dispose&lt;/code> を呼び出すべきタイミングを「ロード処理終了時」に変更しました。
&lt;ul>
&lt;li>呼び出して破棄する前に、後述の &lt;code>ImporterContext.DisposeOnGameObjectDestroyed&lt;/code> を呼び出してください。&lt;/li>
&lt;li>以前の仕様は「生成したモデルの破棄時」に呼び出すべき関数でした。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ImporterContext.DisposeOnGameObjectDestroyed&lt;/code> 関数を追加しました。
&lt;ul>
&lt;li>VRM モデルが必要とするリソース (Texture, Material, Mesh, etc) を破棄する責務を GameObject に移譲できます。&lt;/li>
&lt;li>VRM の GameObject の破棄タイミングでリソース (Texture, Material, Mesh, etc) を破棄します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="サンプルコード同期的ロード">サンプルコード（同期的ロード）&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">VRM&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">YourNameSpace&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">sealed&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">LoadVrmSample&lt;/span> : MonoBehaviour
{
&lt;span style="color:#309"> [SerializeField]&lt;/span> &lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> _vrmFilePath;
&lt;span style="color:#069;font-weight:bold">private&lt;/span> GameObject _vrmGameObject;
&lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> Start()
{
_vrmGameObject = LoadVrm(_vrmFilePath);
}
&lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> OnDestroy()
{
DestroyVrm(_vrmGameObject);
}
&lt;span style="color:#069;font-weight:bold">private&lt;/span> GameObject LoadVrm(&lt;span style="color:#078;font-weight:bold">string&lt;/span> vrmFilePath)
{
&lt;span style="color:#09f;font-style:italic">// 1. GltfParser を呼び出します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// GltfParser はファイルから JSON 情報とバイナリデータを読み出します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> parser = &lt;span style="color:#069;font-weight:bold">new&lt;/span> GltfParser();
parser.ParsePath(vrmFilePath);
&lt;span style="color:#09f;font-style:italic">// 2. GltfParser のインスタンスを引数にして VRMImporterContext を作成します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// VRMImporterContext は VRM のロードを実際に行うクラスです。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> context = &lt;span style="color:#069;font-weight:bold">new&lt;/span> VRMImporterContext(parser))
{
&lt;span style="color:#09f;font-style:italic">// 3. Load 関数を呼び出し、VRM の GameObject を生成します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.Load();
&lt;span style="color:#09f;font-style:italic">// 4. （任意） SkinnedMeshRenderer の UpdateWhenOffscreen を有効にできる便利関数です。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// https://docs.unity3d.com/2019.4/Documentation/ScriptReference/SkinnedMeshRenderer-updateWhenOffscreen.html
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.EnableUpdateWhenOffscreen();
&lt;span style="color:#09f;font-style:italic">// 5. VRM モデルを表示します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.ShowMeshes();
&lt;span style="color:#09f;font-style:italic">// 6. VRM の GameObject が実際に使用している UnityEngine.Object リソースの寿命を VRM の GameObject に紐付けます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// つまり VRM の GameObject の破棄時に、実際に使用しているリソース (Texture, Material, Mesh, etc) をまとめて破棄することができます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.DisposeOnGameObjectDestroyed();
&lt;span style="color:#09f;font-style:italic">// 7. Root の GameObject を return します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// Root の GameObject とは VRMMeta コンポーネントが付与されている GameObject のことです。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">return&lt;/span> context.Root;
}
&lt;span style="color:#09f;font-style:italic">// 8. using スコープを抜けて context が破棄されると、 VRMImporterContext が保持する UnityEngine.Object リソースが破棄されます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// このとき破棄されるリソースは、 glTF ファイルには含まれているが VRM の GameObject には割り当てられていないテクスチャなどです。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// 手順 6. で VRM の GameObject に紐付けたリソースは、ここでは破棄されません。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> DestroyVrm(GameObject vrmGameObject)
{
&lt;span style="color:#09f;font-style:italic">// 9. 生成された VRM の GameObject を破棄します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// GameObject を破棄すれば、紐づくリソース (Texture, Material, Mesh, etc) も破棄されます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> UnityEngine.Object.Destroy(vrmGameObject);
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="サンプルコード非同期ロード">サンプルコード（非同期ロード）&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Threading.Tasks&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">VRM&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">YourNameSpace&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">sealed&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">LoadVrmAsyncSample&lt;/span> : MonoBehaviour
{
&lt;span style="color:#309"> [SerializeField]&lt;/span> &lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> _vrmFilePath;
&lt;span style="color:#069;font-weight:bold">private&lt;/span> GameObject _vrmGameObject;
&lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#069;font-weight:bold">async&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> Start()
{
&lt;span style="color:#09f;font-style:italic">// 簡便のため、このサンプルではキャンセル処理などは考慮しません。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> _vrmGameObject = &lt;span style="color:#069;font-weight:bold">await&lt;/span> LoadVrmAsync(_vrmFilePath);
}
&lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> OnDestroy()
{
DestroyVrm(_vrmGameObject);
}
&lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#069;font-weight:bold">async&lt;/span> Task&amp;lt;GameObject&amp;gt; LoadVrmAsync(&lt;span style="color:#078;font-weight:bold">string&lt;/span> vrmFilePath)
{
&lt;span style="color:#09f;font-style:italic">// 1. GltfParser を呼び出します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// GltfParser はファイルから JSON 情報とバイナリデータを読み出します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// GltfParser は Unity のメインスレッド以外で実行できます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> parser = &lt;span style="color:#069;font-weight:bold">new&lt;/span> GltfParser();
&lt;span style="color:#069;font-weight:bold">await&lt;/span> Task.Run(() =&amp;gt;
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> file = File.ReadAllBytes(vrmFilePath);
parser.ParseGlb(file);
});
&lt;span style="color:#09f;font-style:italic">// 2. GltfParser のインスタンスを引数にして VRMImporterContext を作成します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// VRMImporterContext は VRM のロードを実際に行うクラスです。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> context = &lt;span style="color:#069;font-weight:bold">new&lt;/span> VRMImporterContext(parser))
{
&lt;span style="color:#09f;font-style:italic">// 3. Load 関数を呼び出し、VRM の GameObject を生成します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// Load 処理は数フレームの時間を要します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">await&lt;/span> context.LoadAsync();
&lt;span style="color:#09f;font-style:italic">// 4. （任意） SkinnedMeshRenderer の UpdateWhenOffscreen を有効にできる便利関数です。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// https://docs.unity3d.com/2019.4/Documentation/ScriptReference/SkinnedMeshRenderer-updateWhenOffscreen.html
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.EnableUpdateWhenOffscreen();
&lt;span style="color:#09f;font-style:italic">// 5. VRM モデルを表示します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.ShowMeshes();
&lt;span style="color:#09f;font-style:italic">// 6. VRM の GameObject が実際に使用している UnityEngine.Object リソースの寿命を VRM の GameObject に紐付けます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// つまり VRM の GameObject の破棄時に、実際に使用しているリソース (Texture, Material, Mesh, etc) をまとめて破棄することができます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.DisposeOnGameObjectDestroyed();
&lt;span style="color:#09f;font-style:italic">// 7. Root の GameObject を return します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// Root の GameObject とは VRMMeta コンポーネントが付与されている GameObject のことです。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">return&lt;/span> context.Root;
}
&lt;span style="color:#09f;font-style:italic">// 8. using スコープを抜けて context が破棄されると、 VRMImporterContext が保持する UnityEngine.Object リソースが破棄されます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// このとき破棄されるリソースは、 glTF ファイルには含まれているが VRM の GameObject には割り当てられていないテクスチャなどです。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// 手順 6. で VRM の GameObject に紐付けたリソースは、ここでは破棄されません。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;span style="color:#069;font-weight:bold">private&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> DestroyVrm(GameObject vrmGameObject)
{
&lt;span style="color:#09f;font-style:italic">// 9. 生成された VRM の GameObject を破棄します。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// GameObject を破棄すれば、紐づくリソース (Texture, Material, Mesh, etc) も破棄されます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> UnityEngine.Object.Destroy(vrmGameObject);
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="過去バージョンの情報">過去バージョンの情報&lt;/h1>
&lt;h2 id="version-044-loadasyncの例">&lt;code>Version 0.44～&lt;/code> LoadAsyncの例&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = File.ReadAllBytes(path);
&lt;span style="color:#09f;font-style:italic">// なんらかの方法でByte列を得る
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>
&lt;span style="color:#078;font-weight:bold">var&lt;/span> context = &lt;span style="color:#069;font-weight:bold">new&lt;/span> VRMImporterContext();
context.ParseGlb(bytes);
&lt;span style="color:#09f;font-style:italic">// metaが必要な場合
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#078;font-weight:bold">bool&lt;/span> createThumbnail=&lt;span style="color:#069;font-weight:bold">true&lt;/span>;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> meta = context.ReadMeta(createThumbnail);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> thumbnail = meta.Thumbnail;
&lt;span style="color:#09f;font-style:italic">// modelを構築
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>context.LoadAsync(_ =&amp;gt;
{
context.ShowMeshes();
&lt;span style="color:#078;font-weight:bold">var&lt;/span> go = context.Root;
&lt;span style="color:#09f;font-style:italic">// load完了
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>},
Debug.LogError);
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="loadasynctaskを使う例">LoadAsyncTaskを使う例&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#099">#if (NET_4_6 &amp;amp;&amp;amp; UNITY_2017_1_OR_NEWER)
&lt;/span>&lt;span style="color:#099">&lt;/span>&lt;span style="color:#069;font-weight:bold">async&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> Task&amp;lt;GameObject&amp;gt; LoadAsync(Byte[] bytes)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> context = &lt;span style="color:#069;font-weight:bold">new&lt;/span> VRMImporterContext();
&lt;span style="color:#09f;font-style:italic">// GLB形式でJSONを取得しParseします
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.ParseGlb(bytes);
&lt;span style="color:#069;font-weight:bold">try&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// ParseしたJSONをシーンオブジェクトに変換していく
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">await&lt;/span> context.LoadAsyncTask();
&lt;span style="color:#09f;font-style:italic">// バウンディングボックスとカメラの位置関係で見切れるのを防止する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// SkinnedMeshRenderer.updateWhenOffscreen = true
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.EnableUpdateWhenOffscreen();
&lt;span style="color:#09f;font-style:italic">// T-Poseのモデルを表示したくない場合、ShowMeshesする前に準備する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">// ロード後に表示する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.ShowMeshes();
&lt;span style="color:#069;font-weight:bold">return&lt;/span> context.Root;
}
&lt;span style="color:#069;font-weight:bold">catch&lt;/span>(Exception ex)
{
Debug.LogError(ex);
&lt;span style="color:#09f;font-style:italic">// 関連するリソースを破棄する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.Destroy(&lt;span style="color:#069;font-weight:bold">true&lt;/span>);
&lt;span style="color:#069;font-weight:bold">throw&lt;/span>;
}
}
&lt;span style="color:#099">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="関連する記事など">関連する記事など&lt;/h2>
&lt;p>こちらの記事がわかりやすいです。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/sh_akira/items/8155e4b69107c2a7ede6">UniVRMを使ってVRMモデルをランタイムロードする方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>最新バージョンは&lt;a href="https://vrm.dev/docs/univrm/programming/runtime_import/">こちら&lt;/a>をご覧ください。&lt;/p>
&lt;p>Unityで実行時にモデルをインポートする方法です。&lt;/p>
&lt;h2 id="ファイルパスからvrmを開く">ファイルパスからVRMを開く&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> path=&lt;span style="color:#c30">&amp;#34;sample.vrm&amp;#34;&lt;/span>;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> go=VRM.VRMImporter.LoadFromPath(path);
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;loaded {0}&amp;#34;&lt;/span>, go.name);
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="ファイルパスから非同期にvrmを開く">ファイルパスから非同期にVRMを開く&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> path=&lt;span style="color:#c30">&amp;#34;sample.vrm&amp;#34;&lt;/span>;
VRMImporter.LoadVrmAsync(path, go =&amp;gt; {
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;loaded {0}&amp;#34;&lt;/span>, go.name);
});
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="バイト列からvrm開く">バイト列からVRM開く&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> path=&lt;span style="color:#c30">&amp;#34;sample.vrm&amp;#34;&lt;/span>;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = File.ReadAllBytes(path);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> go=VRMImporter.LoadFromBytes(bytes);
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="バイト列から非同期にvrmを開く">バイト列から非同期にVRMを開く&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">VRMImporter.LoadVrmAsync(bytes, go =&amp;gt; {
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;loaded {0}&amp;#34;&lt;/span>, go.name);
});
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="vrmから情報を取り出す">VRMから情報を取り出す&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#099">#if UNITY_STANDALONE_WIN
&lt;/span>&lt;span style="color:#099">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> path = FileDialogForWindows.FileDialog(&lt;span style="color:#c30">&amp;#34;open VRM&amp;#34;&lt;/span>, &lt;span style="color:#c30">&amp;#34;.vrm&amp;#34;&lt;/span>);
&lt;span style="color:#099">#else
&lt;/span>&lt;span style="color:#099">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> path = Application.dataPath + &lt;span style="color:#c30">&amp;#34;/default.vrm&amp;#34;&lt;/span>;
&lt;span style="color:#099">#endif
&lt;/span>&lt;span style="color:#099">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span> (&lt;span style="color:#078;font-weight:bold">string&lt;/span>.IsNullOrEmpty(path))
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span>;
}
&lt;span style="color:#09f;font-style:italic">// Byte列を得る
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = File.ReadAllBytes(path);
&lt;span style="color:#078;font-weight:bold">var&lt;/span> context = &lt;span style="color:#069;font-weight:bold">new&lt;/span> VRMImporterContext();
&lt;span style="color:#09f;font-style:italic">// GLB形式をParseしてチャンクからJSONを取得しParseします
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> context.ParseGlb(bytes);
&lt;span style="color:#09f;font-style:italic">// metaを取得
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> meta = context.ReadMeta();
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;meta: title:{0}&amp;#34;&lt;/span>, meta.Title);
&lt;span style="color:#09f;font-style:italic">// もしくはこちらでパースされたGLTF全体にアクセスできます
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> vrm = context.GLTF;
&lt;span style="color:#09f;font-style:italic">// ParseしたJSONをもとにシーンを構築します
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span> (m_loadAsync)
{
&lt;span style="color:#09f;font-style:italic">// 非同期に実行する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#078;font-weight:bold">var&lt;/span> now = Time.time;
VRMImporter.LoadVrmAsync(context, go=&amp;gt; {
&lt;span style="color:#078;font-weight:bold">var&lt;/span> delta = Time.time - now;
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;LoadVrmAsync {0:0.0} seconds&amp;#34;&lt;/span>, delta);
OnLoaded(go);
});
}
&lt;span style="color:#069;font-weight:bold">else&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// 同期的に実行する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> VRMImporter.LoadFromBytes(context);
OnLoaded(context.Root);
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="thumbnailを取得するv037から">Thumbnailを取得する(v0.37から)&lt;/h2>
&lt;p>ReadMetaに引数を渡すことでThumbnailテクスチャを作成できます。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#078;font-weight:bold">var&lt;/span> meta = context.ReadMeta(&lt;span style="color:#069;font-weight:bold">true&lt;/span>); &lt;span style="color:#09f;font-style:italic">// Thumbnailテクスチャを作成する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> Texture2D thumbnail=meta.Thumbnail;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: UniGLTF</title><link>https://vrm.dev/docs/univrm/gltf/unigltf/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/unigltf/</guid><description>
&lt;p>この記事は、 &lt;code>UniVRM-0.63.2&lt;/code> 以降を対象としています。&lt;/p>
&lt;p>&lt;code>UniVRM&lt;/code> に内包されていた &lt;code>UniGLTF&lt;/code> を単体で使えるように整理しました。
&lt;code>Assets/UniGLTF&lt;/code> フォルダに展開されます。&lt;/p>
&lt;h2 id="unitypackage">UnityPackage&lt;/h2>
&lt;p>&lt;code>UniVRM-0.XX.unitypackage&lt;/code> でインストールできます。
&lt;code>Assets/VRM&lt;/code> を削除すると &lt;code>glTF&lt;/code> 関連の機能だけを単体で利用できます。&lt;/p>
&lt;h2 id="upm">UPM&lt;/h2>
&lt;p>UniGLTF は　VRMShaders に依存しています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.63.2&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.63.2&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unigltf-に含まれる機能">UniGLTF に含まれる機能&lt;/h2>
&lt;ul>
&lt;li>glTF/glb の読み書き&lt;/li>
&lt;/ul>
&lt;h3 id="gltf拡張">glTF拡張&lt;/h3>
&lt;ul>
&lt;li>KHR_materials_unlit の読み書き
&lt;ul>
&lt;li>unityの unlit 系マテリアルのエクスポート&lt;/li>
&lt;li>VRMShadersの &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">UniUnlit&lt;/a> shader としてのインポート&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>KHR_texture_transform の読み書き&lt;/li>
&lt;li>morphTarget(blendShape)の名前を &lt;code>/meshes/*/primitives/*/extras/targetNames&lt;/code>, &lt;code>/meshes/*/extras/targetNames&lt;/code> に読み書きする&lt;/li>
&lt;/ul></description></item><item><title>Docs: BaseModel</title><link>https://vrm.dev/docs/univrm/humanoid/base_model/</link><pubDate>Tue, 09 Feb 2021 10:16:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/humanoid/base_model/</guid><description>
&lt;p>以下の条件を満たす &lt;code>GameObject&lt;/code> をエクスポートして VRM にできます。&lt;/p>
&lt;ul>
&lt;li>Animator がアタッチされている&lt;/li>
&lt;li>Animator に HumanoidAvatar がセットされている&lt;/li>
&lt;/ul>
&lt;h2 id="fbx">FBX&lt;/h2>
&lt;p>fbx で上記の条件を満たすには、 &lt;code>fbx importer&lt;/code> の &lt;code>rig&lt;/code> 設定で &lt;code>humanoid&lt;/code> 化してください。
fbx の prefab は、 humanoid 化すると Animator がアタッチされて &lt;code>HumanoidAvatar&lt;/code> がセットされた状態になります。&lt;/p>
&lt;p>fbx が humanoid 化できるには、&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.ja.md#%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%9C%E3%83%BC%E3%83%B3">必須のボーン&lt;/a> がすべて含まれている&lt;/li>
&lt;li>ボーンの親子関係が正しい&lt;/li>
&lt;/ul>
&lt;p>の２つの条件が必用です。&lt;/p>
&lt;ul>
&lt;li>ボーンの名前は自由です&lt;/li>
&lt;/ul>
&lt;p>参考&lt;/p>
&lt;p>&lt;a href="https://qiita.com/ousttrue/items/aead1c943855561b62e7">BlenderからUnityのHumanoid互換でfbxをエクスポートする&lt;/a>&lt;/p>
&lt;h2 id="fbx-をシーン上で加工する">FBX をシーン上で加工する&lt;/h2>
&lt;p>問題ない&lt;/p>
&lt;ul>
&lt;li>fbx prefab 内の GameObject に子 GameObject を追加する&lt;/li>
&lt;li>fbx prefab 内の GameObject を disable にする&lt;/li>
&lt;/ul>
&lt;p>うまくいかない場合あり&lt;/p>
&lt;ul>
&lt;li>fbx prefab 内の GameObject を削除する&lt;/li>
&lt;li>fbx prefab 内の GameObject を動かす(移動、回転、拡大・縮小、親の付け替え)&lt;/li>
&lt;/ul>
&lt;p>何故問題があるかというと&lt;/p>
&lt;ul>
&lt;li>HumanoidAvatar が GameObject ヒエラルキーと一致しなくなる&lt;/li>
&lt;/ul>
&lt;p>からです。
HumanoidAvatar にはおそらく、&lt;/p>
&lt;ul>
&lt;li>元の姿勢&lt;/li>
&lt;li>ヒューマンボーン(hipsなど)と GameObjectの対応関係&lt;/li>
&lt;/ul>
&lt;p>が記録されています。
これに変更を加えた場合再作成する必用があります。
下記の HumanoidComponent で作成できます。&lt;/p>
&lt;h2 id="gameobject-から手動で-humanoidavatar-を作成する">GameObject から手動で HumanoidAvatar を作成する&lt;/h2>
&lt;p>&lt;code>fbx importer&lt;/code> に頼らずに HumanoidAvatar を作成できます。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/">HumanoidComponent&lt;/a>&lt;/p>
&lt;p>これを使うと、&lt;/p>
&lt;ul>
&lt;li>人型の GLTF&lt;/li>
&lt;li>シーン上でキューブを人型に積み上げる&lt;/li>
&lt;/ul>
&lt;p>などのヒエラルキーに対して、後付けで &lt;code>HumanoidAvatar&lt;/code> を作成することができます。
HumanoidAvatar を作成した GameObject (シーン上、Prefabの両方) は エクスポートして VRM にすることができます。&lt;/p></description></item><item><title>Docs: BlendShapeのセットアップ(v0.45)</title><link>https://vrm.dev/docs/univrm/blendshape/blendshape_setup/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/blendshape_setup/</guid><description>
&lt;h2 id="blendshape関連のアセット">BlendShape関連のアセット&lt;/h2>
&lt;p>VRMをImportすると、&lt;code>モデル名から拡張子を除いた名前 + BlendShapes&lt;/code> フォルダにPresetを表すBlendShapeClipが作成されます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshapeclip_assets.png" alt="image">&lt;/p>
&lt;p>BlendShapeAvatarアセット。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshapeavatar.png" alt="image">&lt;/p>
&lt;h2 id="設定画面">設定画面&lt;/h2>
&lt;p>アセットには以下の設定画面があります。&lt;/p>
&lt;h3 id="blendshapeavatarアセットのインスペクタ">BlendShapeAvatarアセットのインスペクタ&lt;/h3>
&lt;h4 id="editorタブ">Editorタブ&lt;/h4>
&lt;p>BlendShapeClip選択・設定作成&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeavatar.png" alt="image">&lt;/p>
&lt;h4 id="listタブv045から">Listタブ(v0.45から)&lt;/h4>
&lt;p>BlendShapeClipのリスト&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/list.png" alt="image">&lt;/p>
&lt;h3 id="blendshapeclipアセットのインスペクタ">BlendShapeClipアセットのインスペクタ。&lt;/h3>
&lt;h4 id="blendshapeタブ">BlendShapeタブ&lt;/h4>
&lt;p>設定作成します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/alicia_binary.png" alt="image">&lt;/p>
&lt;h4 id="blendshape-listタブ">BlendShape Listタブ&lt;/h4>
&lt;p>BlendShapeタブで作成した値を見ることが出来ます。
あまり使わない。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_angry.png" alt="image">&lt;/p>
&lt;h4 id="material-listタブ">Material Listタブ&lt;/h4>
&lt;p>&lt;code>BlendShapeによる&lt;/code>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_blendshape/">LookAt&lt;/a>(後述)や、BlendShapeで色を変える設定を作成することができます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/material_color.png" alt="image">&lt;/p>
&lt;h2 id="各blendshapeclipの設定">各BlendShapeClipの設定&lt;/h2>
&lt;p>各BlendShapeClipに対して顔を作ります(顔以外も可)。&lt;/p>
&lt;h3 id="1-対象のblendshapeclipを選ぶ">1. 対象のBlendShapeClipを選ぶ&lt;/h3>
&lt;p>BlendShapeAvatarのインスペクタから選択する&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeavatar.png" alt="image">&lt;/p>
&lt;p>アセットのBlendShapeClipを直接選択する&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeclip.png" alt="image">&lt;/p>
&lt;h3 id="2-スライダを操作して顔を作る">2. スライダを操作して顔を作る&lt;/h3>
&lt;p>モデルに存在するSKinnedMeshRendererの名前から、
目的のBlendShapeのスライダーを探して値を設定します。
変更値は即座に反映されます。
&lt;code>Apply&lt;/code>ボタン不要になりました(v0.45)。&lt;/p>
&lt;h3 id="3-previewの操作">3. Previewの操作&lt;/h3>
&lt;p>&lt;code>Preview Weight Slider&lt;/code> で0~1の効き具合をテストできます。&lt;/p>
&lt;p>&lt;code>左ドラッグ・右ドラッグ&lt;/code>向きを変えられます。&lt;/p>
&lt;p>&lt;code>中ドラッグ&lt;/code>移動できます。&lt;/p>
&lt;h3 id="中間値を許可しない設定v045">中間値を許可しない設定(v0.45)&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/alicia_binary.png" alt="image">&lt;/p>
&lt;p>スクリーンショットのような記号的表現でBlendShapeの中間値を表示したくない場合を想定して、二値化フラグを追加しました。四捨五入(round)で実装しています。&lt;/p>
&lt;p>ロードするアプリケーションがv0.45以降になっていると有効になります。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/binary.png" alt="image">&lt;/p></description></item><item><title>Docs: LookAt(Bone)</title><link>https://vrm.dev/docs/univrm/lookat/lookat_bone/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/lookat_bone/</guid><description>
&lt;p>VRMLookAtHead + VRMLookAtBoneApplyer の２つのコンポーネントを組み合わせます。&lt;/p>
&lt;h2 id="ボーン制御の視線-vrmlookatboneapplyer">ボーン制御の視線: VRMLookAtBoneApplyer&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMLookAtBoneApplyer.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMLookAtBoneApplyer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>VRMLookAtHeadの計算した視線方向のパラメーターをEyeBoneに適用します。&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>目標物への相対角度 yaw, pitch を、eye bone のローテンションにそのまま代入すると目が動きすぎてしまいます。&lt;/p>
&lt;ul>
&lt;li>yaw, pitch 角の上限値 =&amp;gt; Curve X Range Degree&lt;/li>
&lt;li>yaw, pitch が上限の時の eye bone の回転角度 =&amp;gt; Curve Y Range Degree&lt;/li>
&lt;/ul>
&lt;p>で設定できます。
次の４方向を設定してください。&lt;/p>
&lt;ul>
&lt;li>VerticalDown&lt;/li>
&lt;li>VerticalUp&lt;/li>
&lt;li>HorizontalOuter&lt;/li>
&lt;li>HorizontalInner&lt;/li>
&lt;/ul>
&lt;p>横方向は左右ではなく、内外になります。&lt;/p></description></item><item><title>Docs: PrefabがImportされるタイミングと上書きの注意</title><link>https://vrm.dev/docs/univrm/import/prefab_importer_behaviour/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/import/prefab_importer_behaviour/</guid><description>
&lt;h2 id="049">0.49&lt;/h2>
&lt;p>UnityEditorでVRMをAssetImportしたときに、Material, BlendShapeAvatarが既存の場合は上書きしません。
その場合に、Prefab からの Material, BlendShapeAvatarへの参照は既存のファイルを参照するようにしました。&lt;/p>
&lt;h2 id="046">0.46&lt;/h2>
&lt;p>UnityEditorでVRMをAssetImportしたときに、Material, BlendShapeAvatar, BlendShapeClip が既存の場合は上書きしません。
Mesh, Texture, Prefabは上書きします。&lt;/p>
&lt;p>Material, BlendShapeAvatar, BlendShapeClipはユーザーが変更しているかもしれないので上書きしないことにしました。
上書きしたい場合はImport前に削除してください。&lt;/p>
&lt;h2 id="045以前">0.45以前&lt;/h2>
&lt;p>UnityEditorでVRMをAssetImportしたときに、Mesh, Texture, Material, BlendShape, Prefabが既存の場合は上書きされます。&lt;/p></description></item><item><title>Docs: 1. VRMファイルを作成する</title><link>https://vrm.dev/how_to_make_vrm/convert_from_humanoid_model/</link><pubDate>Wed, 26 Aug 2020 15:52:06 +0900</pubDate><guid>https://vrm.dev/how_to_make_vrm/convert_from_humanoid_model/</guid><description>
&lt;h2 id="unityでhumanoidとして扱えるモデルデータを用意します">UnityでHumanoidとして扱えるモデルデータを用意します&lt;/h2>
&lt;p>ヒューマノイドモデルは、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>必ずご自分で作られたモデル、ないし、加工しVRアバターとして使うことが許諾されているモデルデータをご用意ください&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>後述しますが、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>VRMファイル自体にライセンス情報を記述する項目がありますので、特にその項目については権利者自身が設定する&lt;/strong> ようにしてください。&lt;/li>
&lt;/ul>
&lt;p>また、Humanoid として認識させるために必須のボーンがすべて含まれている必要があります。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">ベースモデル&lt;/h4>
使用可能なベースモデルの詳細は、 &lt;a href="https://vrm.dev/docs/univrm/humanoid/base_model/">BaseModel&lt;/a> を参照してください。
&lt;/div>
&lt;p>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.ja.md#%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%9C%E3%83%BC%E3%83%B3">必須ボーン&lt;/a>&lt;/p>
&lt;h2 id="unity-に-fbx-を-import-する">unity に fbx を import する&lt;/h2>
&lt;p>fbx のフォルダを unityの Assets フォルダにドロップします。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/fbx_folder.jpg" />
&lt;p>unity&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/assets_fbx.jpg" />
&lt;p>青いアイコンが fbx の asset(prefab) です。&lt;/p>
&lt;h2 id="fbx-の-material-を設定する">fbx の material を設定する&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/fbx_default.jpg" />
&lt;p>この時点では fbx importer による初期状態になっており、マテリアルがデフォルト状態(StandardShaderでColor, ColorTexture割り当てのみ。半透明設定が無いなど)なので、マテリアルを最低限設定します。
VRM 向けなので、この例では全部 &lt;code>MToon&lt;/code> にします。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Shader&lt;/h4>
VRMは、&lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">MToon&lt;/a>、&lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">Unlit&lt;/a> と &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_standard/">Standard&lt;/a> の３種類を記録できます。
&lt;/div>
&lt;p>&lt;code>Extract Materials&lt;/code> ボタンを押して fbx のフォルダに &lt;code>Materials&lt;/code> フォルダを作成してそこを選択。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/extract_materials.jpg" alt="extract_materials" width="900" />
&lt;hr>
&lt;p>Shader をすべて &lt;code>VRM/Mtoon&lt;/code> に変更&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/change_to_mtoon.jpg" alt="change_to_mtoon" />
&lt;hr>
&lt;p>MToon の &lt;code>Shade Color&lt;/code> を白に変更&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/shade_color_to_white.jpg" alt="shade_color_to_white" />
&lt;hr>
&lt;img src="https://vrm.dev/images/vrm/alicia_preview.jpg" />
&lt;p>ちゃんとした設定はこちら。&lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">MToonの設定&lt;/a>&lt;/p>
&lt;p>手順の説明なので先に進みます。&lt;/p>
&lt;h2 id="fbx-を-humanoid-設定にする">fbx を humanoid 設定にする&lt;/h2>
&lt;p>fbx デフォルトは、generic 設定です。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/rig_generic.jpg" />
&lt;p>humanoid に変更します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/select_humanoid.jpg" />
&lt;p>&lt;code>apply&lt;/code> を押します。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">humanoid&lt;/h4>
このとき fbx importer がヒューマノイドボーンの割り当てを自動で推定します。
失敗する時もあり、成功しても間違っている場合もあります。
&lt;/div>
&lt;p>humanoid のボーン割り当て画面に入ります。&lt;/p>
&lt;p>&lt;code>configure&lt;/code> ボタンを押します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/BoneMapping.png" alt="BoneMapping" width="600" />
&lt;p>ボーンの割り当てを確認してください。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">bone&lt;/h4>
&lt;ul>
&lt;li>前髪に顎ボーンが割り当てられる&lt;/li>
&lt;li>目のハイライトに目ボーンが割り当てられる&lt;/li>
&lt;/ul>
&lt;p>などにご注意ください。
&lt;/div>
&lt;h2 id="prefab-をシーンに展開">prefab をシーンに展開&lt;/h2>
&lt;p>&lt;code>File&lt;/code> - &lt;code>New Scene&lt;/code> として、
fbx の prefab をシーンに展開します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/DragImportedModel.png" width="600" />
&lt;h2 id="fbx-の-blendshpae-の法線が乱れていないか確認する">fbx の blendshpae の法線が乱れていないか確認する&lt;/h2>
&lt;p>BlendShapeで変な影が出る場合の対策です。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/blendshape/check_blendshape_normal/">BlendShape の法線を確認しよう&lt;/a>&lt;/p>
&lt;h2 id="エクスポート">エクスポート&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>&lt;code>VRM0&lt;/code> - &lt;code>Export UniVRM-0.XX&lt;/code> を押してダイアログを表示します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;br>&lt;/p>
&lt;p>前のバージョンは &lt;code>VRM&lt;/code> - &lt;code>UniVRM-0.XX&lt;/code> - &lt;code>Export humanoid&lt;/code>。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/export058_empty.jpg" width="600" />
&lt;p>&lt;code>Export Root&lt;/code> に prefab をシーンに展開した GameObject をドロップします。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">エラー&lt;/h4>
&lt;p>エクスポートダイアログで各種エラーチェックをしています。&lt;/p>
&lt;ul>
&lt;li>赤いメッセージは解決する必要があります。&lt;/li>
&lt;li>黄色いメッセージは無視してエクスポートできます。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/export/univrm_export/">エクスポートダイアログ&lt;/a>&lt;/p>
&lt;/div>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/export_dialog_title_version_author.jpg" width="900" />
&lt;br>
ライセンス情報を入力してください。赤いメッセージな無くなれば Export を押せます。
次の作業のため、&lt;code>Assets/models/vrm&lt;/code> フォルダを作成してそこにエクスポートしました。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">エクスポート先&lt;/h4>
エクスポート先には、Unity の Assets 内、外どちらでも選択できます。
Assets 内を選択すると、Export 直後に Import が発動します(Importの方が重い)。
Assets 内を選択する場合は、新規に専用のフォルダを作成すると分かりやすくなります。
&lt;/div>
&lt;h2 id="エクスポートオプション">エクスポートオプション&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export_options.jpg" width="900" />
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">T-Poseにする&lt;/h4>
自動で T-Pose 化します。このオプションを使わずにシーン上で見た目で T-Pose にしても問題ありません。
&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Pose Freeze&lt;/h4>
エクスポート時に正規化します。
最新版は、 &lt;code>ExportRoot&lt;/code> をセットしたときにヒエラルキーに回転・拡縮があるかどうかを調べて、このチェックボックスを自動で設定するようになっています。
&lt;/div></description></item><item><title>Docs: UniUnlit</title><link>https://vrm.dev/docs/univrm/shaders/univrm_unlit/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_unlit/</guid><description>
&lt;h2 id="unigltfuniunlit-シェーダー">&lt;code>UniGLTF/UniUnlit&lt;/code> シェーダー&lt;/h2>
&lt;p>Unity の &lt;code>Unlit&lt;/code> 系シェーダーは、機能ごとに&lt;/p>
&lt;ul>
&lt;li>Unlit/Color&lt;/li>
&lt;li>Unlit/Texture&lt;/li>
&lt;li>Unlit/Transparent&lt;/li>
&lt;li>Unlit/Transparent Cutout&lt;/li>
&lt;/ul>
&lt;p>のように分かれています。&lt;/p>
&lt;p>また、&lt;code>GLTF&lt;/code> では設定可能なのだけど、標準の &lt;code>Unlit&lt;/code> 系シェーダーでは再現できない組み合わせがあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Texture&lt;/code> かつ &lt;code>Color&lt;/code> の乗算&lt;/li>
&lt;li>頂点カラー&lt;/li>
&lt;/ul>
&lt;p>これらを解決する、統一 &lt;code>unlit&lt;/code> シェーダーとして &lt;code>UniGLTF/UniUnlit&lt;/code> があります。&lt;/p>
&lt;p>&lt;code>UniVRM&lt;/code> で、&lt;code>GLTF&lt;/code> で &lt;code>Unlit&lt;/code> 設定のマテリアルをインポートすると、
すべて &lt;code>UniGLTF/UniUnlit&lt;/code> 使うようになります。&lt;/p>
&lt;p>エクスポートしてからインポートする場合の対応表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>export&lt;/th>
&lt;th>gltf&lt;/th>
&lt;th>import&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Unlit/Color&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Texture&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Transparent&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Transparent Cutout&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitTexture&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitTransparent&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitCutout&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>なお、UniVRM がサポートするシェーダーの中で、&lt;code>UniGLTF/UniUnlit&lt;/code> だけが頂点カラーをサポートしています。&lt;/p>
&lt;ul>
&lt;li>Meshに頂点カラーが含まれている&lt;/li>
&lt;li>Materialが &lt;code>Unlit&lt;/code> 判定である&lt;/li>
&lt;/ul>
&lt;p>場合に、import すると頂点カラーが適用されます。
頂点カラーが不要であるモデルに、Unity の &lt;code>unlit&lt;/code> 系マテリアルを適用してエクスポートすると、
次にインポートするときに意図せずに色が変わる場合があります。
この場合、エクスポート時に &lt;code>RemoveVertexColor&lt;/code> を有効にすることで、頂点カラーを含まない &lt;code>Mesh&lt;/code> をエクスポートすることができます。&lt;/p>
&lt;h2 id="gltf">GLTF&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">UniUnlit&lt;/th>
&lt;th align="left">GLTF Unlit&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">カラーファクター&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">カラーテクスチャ&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">レンダリングモード&lt;/td>
&lt;td align="left">/materials/alphaMode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">カリングモード&lt;/td>
&lt;td align="left">/materials/doubleSided&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: エクスポートダイアログ</title><link>https://vrm.dev/docs/univrm/export/univrm_export/</link><pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/export/univrm_export/</guid><description>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>用語&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Root&lt;/td>
&lt;td>エクスポート対象となる一番親のオブジェクト(ひとつだけ)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ヒエラルキー&lt;/td>
&lt;td>Root自身と子孫全部&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="v058">v0.58~&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export062_dialog.png" alt="vrm export" width="900" />
&lt;p>Unityの &lt;a href="https://docs.unity3d.com/ScriptReference/EditorWindow.html">EditorWindow&lt;/a> で画面を作成しています。&lt;/p>
&lt;h3 id="使い方">使い方&lt;/h3>
&lt;h4 id="window-を表示する">Window を表示する&lt;/h4>
&lt;p>以前と同じメニューから表示できます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>前のバージョン：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;ul>
&lt;li>シーン側でエクスポート可能なオブジェクトを先に選択する必要が無くなりました&lt;/li>
&lt;/ul>
&lt;h4 id="対象のオブジェクトをセットする">対象のオブジェクトをセットする&lt;/h4>
&lt;ul>
&lt;li>Drag&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/export058_drag.gif" alt="vrm export" width="600" />
&lt;ul>
&lt;li>Selector&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/export058_select.gif" alt="vrm export" width="600" />
&lt;h4 id="exportrootの条件">ExportRootの条件&lt;/h4>
&lt;img src="https://vrm.dev/images/vrm/export058_empty.jpg" alt="vrm export" width="600" />
&lt;p>ExportRoot が以下の条件を満たすと設定画面が表示されます。&lt;/p>
&lt;ul>
&lt;li>Root である(親が無い)&lt;/li>
&lt;li>Root に回転・スケールが無い(移動は可能)&lt;/li>
&lt;li>ヒューマノイドである(Animatorコンポーネントがアタッチしてあり、Humanoid.Avatarがセットしてある)&lt;/li>
&lt;li>Z+向きである(左足と右足のボーン位置から判定)&lt;/li>
&lt;li>ヒエラルキーの中に enable な mesh を含む&lt;/li>
&lt;/ul>
&lt;h4 id="エクスポート設定画面">エクスポート設定画面&lt;/h4>
&lt;p>Metaやエクスポートオプションを設定してください。
警告は修正するかしないかを判断して、問題無ければ無視してください。
選択状態のオブジェクトがエクスポート可能であれば、ダイアログ右下の &lt;code>export&lt;/code> ボタンを押すことができるようになります。
VRMモデルのファイルサイズの詳しい内容は&lt;a href="https://vrm.dev/docs/univrm/export/vrm_size/">こちら&lt;/a>を参考してください。&lt;/p>
&lt;h2 id="オプション">オプション&lt;/h2>
&lt;p>エクスポートのオプションです。
チェックするとエクスポート前に追加の処理を実行します。&lt;/p>
&lt;h3 id="force-t-pose">Force T Pose&lt;/h3>
&lt;p>エクスポート前に強制的にT-Poseにします。
手動でだいたいT-Poseに出来た場合は、チェックしなくても問題ありません。&lt;/p>
&lt;h3 id="pose-freeze">Pose Freeze&lt;/h3>
&lt;p>モデルを正規化します。
正規化済みのモデルを再正規化する必用はありませんが、正規化されていない部品を追加した場合は必要です。
正規化されているか否かは、ヒエラルキーのすべてのGameObjectの回転が0 スケールが1 であるか否かです。&lt;/p>
&lt;blockquote>
&lt;p>0.58 では自動でチェックボックスが On/Off されます&lt;/p>
&lt;/blockquote>
&lt;h3 id="useexperimentalexporter">UseExperimentalExporter&lt;/h3>
&lt;p>シリアライザーのバージョン。
どちらでも動作します。&lt;/p>
&lt;h3 id="usesparseaccessor">UseSparseAccessor&lt;/h3>
&lt;p>BlendShapeが多数ある場合にファイルサイズを削減できます。&lt;/p>
&lt;h3 id="onlyblendshapeposition">OnlyBlendshapePosition&lt;/h3>
&lt;p>BlendShapeのNormal, Tangent をエクスポートしない。
ファイルサイズを削減できます。
UniVRM-0.53 より前のバージョンはインポート時にエラーになるのに注意してください。&lt;/p>
&lt;h3 id="reduceblendshape">ReduceBlendshape&lt;/h3>
&lt;p>BlendShapeClip設定から参照されないBlendShapeをエクスポートしない。
ファイルサイズを削減できます。&lt;/p>
&lt;h3 id="reduceblendshapeclip">ReduceBlendshapeClip&lt;/h3>
&lt;p>Presetが Unknown であるBlendShapeClipをエクスポートしない。
ReduceBlendshapeと組み合わせて使います。&lt;/p>
&lt;h3 id="removevertexcolor">RemoveVertexColor&lt;/h3>
&lt;p>頂点カラーをエクスポートしない。
GLTFには、頂点カラーを含むが使わないという設定がありません。
UniVRMでは、 &lt;code>unlit&lt;/code> のみ頂点カラー対応です。&lt;/p>
&lt;h2 id="エラー項目">エラー項目&lt;/h2>
&lt;p>バージョン毎の判定。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>message&lt;/th>
&lt;th>0.56&lt;/th>
&lt;th>0.57&lt;/th>
&lt;th>0.58&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The Root translation, rotation and scale will be dropped&lt;/td>
&lt;td>error&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>error(移動は可)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Jaw bone&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Same name bone&lt;/td>
&lt;td>error&lt;/td>
&lt;td>warn(自動リネーム)&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Vertex color&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unknown shader&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require source&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require no parent&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>error(新規)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require Z+ forward&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>error(新規)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require animator&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require humanoid avatar&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require Title/Version/Author&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>No active mesh&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prefab export&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>ok(NO_ACTIVE_MESHだった)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Springbone validation&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="require-source">Require source&lt;/h3>
&lt;p>エクスポート可能なオブジェクトをシーンで選択してださい&lt;/p>
&lt;h3 id="require-animator">Require animator.&lt;/h3>
&lt;p>RootにAnimatorコンポーネントがついていません(ヒューマノイドでない)&lt;/p>
&lt;h3 id="require-animatoravatar">Require animator.avatar&lt;/h3>
&lt;p>RootのAnimatorにavatarがありません(ヒューマノイドでない)&lt;/p>
&lt;h3 id="animatoravatar-is-not-valid">Animator.avatar is not valid.&lt;/h3>
&lt;p>RootのAnimatorのavatarが正常でない(ヒューマノイドでない)&lt;/p>
&lt;h3 id="animatoravatar-is-not-humanoid-please-change-models-animationtype-to-humanoid">Animator.avatar is not humanoid. Please change model&amp;rsquo;s AnimationType to humanoid.&lt;/h3>
&lt;p>RootのAnimatorのavatarがhumanoidでない。FBXのimport設定の rig で humanoidに変更してください&lt;/p>
&lt;h3 id="require-title">Require Title.&lt;/h3>
&lt;p>ダイアログのタイトルを入力してください(必須項目)&lt;/p>
&lt;h3 id="require-version">Require Version.&lt;/h3>
&lt;p>ダイアログのバージョンを入力してください(必須項目)&lt;/p>
&lt;h3 id="require-author">Require Author.&lt;/h3>
&lt;p>ダイアログのAuthorを入力してください(必須項目)&lt;/p>
&lt;h3 id="no-active-mesh">No active mesh&lt;/h3>
&lt;p>ヒエラルキーに active なメッシュが含まれていない&lt;/p>
&lt;h3 id="filename-0-is-too-long">FileName &amp;lsquo;{0}&amp;rsquo; is too long.&lt;/h3>
&lt;p>material, texture, mesh の名前が長すぎる。
リネームしてください&lt;/p>
&lt;h3 id="the-root-translation-rotation-and-scale-will-be-dropped">The Root translation, rotation and scale will be dropped&lt;/h3>
&lt;p>Rootに移動・回転・スケール値が設定されている。
そのままエクスポートした場合、ルートの TRS は無くなります。
移動に関しては問題がない場合が多いと思われますが、回転・スケールに関しては意図したとおりにならないこともありそうなのでご注意ください。&lt;/p>
&lt;h3 id="jaw-bone-is-included-it-may-not-what-you-intended-please-check-the-humanoid-avatar-setting-screen">Jaw bone is included. It may not what you intended. Please check the humanoid avatar setting screen&lt;/h3>
&lt;p>humanoid設定に顎が含まれている。
FBXインポート時に意図せずに自動で割り当てられる場合があります。
間違えて、前髪等が顎になっていて顎にポーズが入力した場合に微妙に動く場合があります。
FBX importer の rig 設定に戻って設定を解除することをおすすめします。&lt;/p>
&lt;h3 id="there-are-bones-with-the-same-name-in-the-hierarchy-they-will-be-automatically-renamed-after-export">There are bones with the same name in the hierarchy. They will be automatically renamed after export&lt;/h3>
&lt;p>ヒエラルキーの中に同じ名前のGameObjectが含まれている。
エクスポートした場合に自動でリネームする。&lt;/p>
&lt;h3 id="this-model-contains-vertex-color">This model contains vertex color&lt;/h3>
&lt;p>ヒエラルキーに含まれる mesh に頂点カラーが含まれている。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>頂点カラー&lt;/th>
&lt;th>含まれている挙動&lt;/th>
&lt;th>挙動&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UniVRM-0.53以前&lt;/td>
&lt;td>未対応&lt;/td>
&lt;td>含まれているけど無視する挙動&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UniVRM-0.54～&lt;/td>
&lt;td>使う&lt;/td>
&lt;td>含まれているものは使う挙動&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Unlitで頂点カラーが含まれているが使わないという設定がありせん。
必要ない場合は、&lt;code>Remove Vertex Color&lt;/code> オプションで削除できます。&lt;/p>
&lt;h3 id="unknown-material-0-is-used-this-will-export-as-standard-fallback">unknown material &amp;lsquo;{0}&amp;rsquo; is used. this will export as &lt;code>Standard&lt;/code> fallback&lt;/h3>
&lt;p>standard, unlit, mtoon 以外のマテリアルは、standard になります。&lt;/p>
&lt;h2 id="v057">v0.57&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export_dialog_56.jpg" alt="vrm export" width="600" />
&lt;p>Unityの &lt;a href="https://docs.unity3d.com/ScriptReference/ScriptableWizard.html">ScriptableWizard&lt;/a> で画面を作成しています。
v0.58 以降でダイアログを改善予定です。&lt;/p></description></item><item><title>Docs: UniVRMをインストールする</title><link>https://vrm.dev/docs/univrm/install/univrm_install/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_install/</guid><description>
&lt;h2 id="unity-version">Unity Version&lt;/h2>
&lt;ul>
&lt;li>Unity-2019.4 が推奨バージョンです。その他のバージョンは、&lt;a href="https://vrm.dev/docs/univrm/install/unity_version/">Unityのバージョン&lt;/a> を参照してください。&lt;/li>
&lt;/ul>
&lt;h2 id="unitypackage-の入手">unitypackage の入手&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>&lt;/p>
&lt;p>&lt;code>UniVRM-0.XX.X_XXXX.unitypackage&lt;/code>&lt;/p>
&lt;p>です。&lt;/p>
&lt;h2 id="インストール前の準備">インストール前の準備&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Unityで新規のプロジェクトを作成します&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Rendering&lt;/code> - &lt;code>ColorSpace&lt;/code> を &lt;code>Linear&lt;/code> に設定します(推奨)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/linear_setting.jpg" alt="linear setting" width="600" />
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Unity-2018.3, Unity-2018.4, Unity-2019.1 で作業する場合&lt;/h4>
&lt;ul>
&lt;li>&lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Scripting Runtime Version&lt;/code> を &lt;code>.Net4.X equivalent&lt;/code> にしてください&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">既存のプロジェクト&lt;/h4>
事前に、古いバージョンの VRM を削除することを推奨しています。
&lt;a href="https://vrm.dev/docs/univrm/install/univrm_uninstall/">UniVRMをアンインストール&lt;/a> を参照してください。
&lt;/div>
&lt;h2 id="unitypackage-の-import">unitypackage の import&lt;/h2>
&lt;p>&lt;code>unitypackage&lt;/code> を Import します。&lt;/p>
&lt;p>&lt;code>Assets&lt;/code> - &lt;code>Import Package&lt;/code> - &lt;code>Custom Package...&lt;/code> で &lt;code>UniVRM-0.XX.X_XXXX.unitypackage&lt;/code> を選択します。&lt;/p>
&lt;p>&lt;code>Assets/VRM&lt;/code>、&lt;code>Assets/UniGLTF&lt;/code>お及び&lt;code>Assets/VRMShaders&lt;/code> の３つのフォルダに import されます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="350" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UnityPackageをインポート&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="import-が成功したか確認する方法">import が成功したか確認する方法&lt;/h2>
&lt;p>VRM menu が表示されていれば動作しています：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm menu" />
&lt;hr>
&lt;p>前のバージョン：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu_old.jpg" alt="vrm menu old" />
&lt;hr>
&lt;p>menu が出てこない場合は、&lt;/p>
&lt;ul>
&lt;li>Console を表示させます。左上の clear ボタンを推して、エラー(赤いメッセージ)が無いことを確認してください&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/show_console.jpg" alt="show console" width="500" />
&lt;img src="https://vrm.dev/images/vrm/clear_console.jpg" alt="clear console" width="500" />
&lt;h2 id="関連セクション">関連セクション&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/how_to_make_vrm/">VRMファイルを作ってみたい&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/import/univrm_import/">VRMをインポートする&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: モデル情報</title><link>https://vrm.dev/docs/univrm/meta/univrm_meta/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/meta/univrm_meta/</guid><description>
&lt;h2 id="vrmmeta">VRMMeta&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/meta_new.jpg" alt="meta" width="800" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMMetaコンポーネント&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="情報information">情報(Information)&lt;/h3>
&lt;h4 id="タイトルtitle">タイトル(Title)&lt;/h4>
&lt;p>アバターモデルの名前を設定します&lt;/p>
&lt;h4 id="作者author">作者(Author)&lt;/h4>
&lt;p>モデルの作者の名前を記述します&lt;/p>
&lt;h4 id="連絡先contact-information">連絡先(Contact Information)&lt;/h4>
&lt;p>モデルの作者への連絡先を記述します&lt;/p>
&lt;h4 id="参照reference">参照(Reference)&lt;/h4>
&lt;p>何か「親作品」に相当するものがある場合は参照URLなどを記述します&lt;/p>
&lt;h4 id="サムネイルthumbnail">サムネイル(Thumbnail)&lt;/h4>
&lt;p>アバターモデルのサムネイルを登録します。2048x2048程度の解像度を推奨します。&lt;/p>
&lt;h4 id="バージョン">バージョン&lt;/h4>
&lt;p>モデルのバージョンを文字列で指定します。
自由に記述できます。&lt;/p>
&lt;h3 id="使用許諾ライセンス情報license">使用許諾・ライセンス情報(License)&lt;/h3>
&lt;h4 id="アバターの人格に関する許諾範囲personation--characterization-permission">アバターの人格に関する許諾範囲(Personation / Characterization Permission)&lt;/h4>
&lt;h5 id="アバターに人格を与えることの許諾範囲a-person-who-can-perform-with-this-avatar">アバターに人格を与えることの許諾範囲(A person who can perform with this avatar)&lt;/h5>
&lt;ul>
&lt;li>アバターを操作することはアバター作者にのみ許される(The avatar may only be manipulated by its creator)&lt;/li>
&lt;li>明確に許可された人限定(Authorized only to explicitly specified person)&lt;/li>
&lt;li>全員に許可(Authorized to anyone)&lt;/li>
&lt;/ul>
&lt;h5 id="このアバターを用いて暴力表現を演じることの許可permission-to-perform-violent-acts-with-this-avatar">このアバターを用いて暴力表現を演じることの許可(Permission to perform violent acts with this avatar)&lt;/h5>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h5 id="このアバターを用いて性的表現を演じることの許可permission-to-perform-sexual-acts-with-this-avatar">このアバターを用いて性的表現を演じることの許可(Permission to perform sexual acts with this avatar)&lt;/h5>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h5 id="商用利用の許可for-commercial-use">商用利用の許可(For commercial use)&lt;/h5>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h5 id="その他のライセンス条件other-license-url">その他のライセンス条件(Other License Url)&lt;/h5>
&lt;p>上記許諾条件以外のライセンス条件がある場合はそのライセンス文書へのURLを記述&lt;/p>
&lt;h4 id="再配布改変に関する許諾範囲redistribution--modifications-license">再配布・改変に関する許諾範囲(Redistribution / Modifications License)&lt;/h4>
&lt;h5 id="ライセンスタイプlicense-type">ライセンスタイプ(License Type)&lt;/h5>
&lt;ul>
&lt;li>再配布禁止(Redistribution Prohibited)&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/publicdomain/zero/1.0/deed.ja">著作権放棄(CC0)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by/4.0/deed.ja">Creative Commons CC BYライセンス(CC_BY)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/deed.ja">Creative Commons CC BY NCライセンス(CC_BY_NC)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.ja">Creative Commons CC BY SAライセンス(CC_BY_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.ja">Creative Commons CC BY NC SAライセンス(CC_BY_NC_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nd/4.0/deed.ja">Creative Commons CC BY NDライセンス(CC_BY_ND)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja">Creative Commons CC BY NC NDライセンス(CC_BY_NC_ND)&lt;/a>&lt;/li>
&lt;li>その他(Other)&lt;/li>
&lt;/ul>
&lt;h5 id="その他ライセンス条件other-license-url">その他ライセンス条件(Other License Url)&lt;/h5>
&lt;p>上記許諾条件以外のライセンス条件がある場合はそのライセンス文書へのURLを記述&lt;/p></description></item><item><title>Docs: HumanoidComponent</title><link>https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/</guid><description>
&lt;p>&lt;code>UniVRM-0.60.0&lt;/code>&lt;/p>
&lt;p>fbx が無くても、シーンから直接 humanoid avatar を作成できます。&lt;/p>
&lt;h1 id="使い方">使い方&lt;/h1>
&lt;p>ヒューマノイドボーンがあるシーンを用意します。&lt;/p>
&lt;p>例として&lt;/p>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary&lt;/a>&lt;/p>
&lt;p>で説明します。&lt;/p>
&lt;p>まず、 &lt;code>RiggedFigure.glb&lt;/code> を Asset フォルダに import してください。
UniVRM の &lt;code>glb&lt;/code> import で prefab が生成されます。&lt;/p>
&lt;p>新規のシーンに &lt;code>RiggedFigure&lt;/code> prefab をインスタンス化します。&lt;/p>
&lt;p>AddComponent で &lt;code>Humanoid&lt;/code> を追加してください。(MeshUtility.Humanoid。UniVRMに含まれています。)&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/bone_required.jpg" />
&lt;p>適当に Bone を当てはめます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/create_avatar.jpg" />
&lt;p>&lt;code>Create UnityEngine.Avatar&lt;/code> ボタンを押します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/humanoid_animator.jpg" />
&lt;p>humanoid avatar が新規に作成されます。&lt;/p>
&lt;p>このまま、T-Pose にして VRM 化することもできます。&lt;/p></description></item><item><title>Docs: LookAt(Blendshape)</title><link>https://vrm.dev/docs/univrm/lookat/lookat_blendshape/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/lookat_blendshape/</guid><description>
&lt;p>VRMLookAtHead + VRMLookAtBlendShapeApplyer の２つのコンポーネントを組み合わせます。
&lt;code>VRMLookAtBoneApplyer&lt;/code> を削除して、代わりに &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> をアタッチしてください。&lt;/p>
&lt;p>&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; VRMLookAtBlendShapeApplyer&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/add_vrm_lookat_blendshape.jpg" alt="image">&lt;/p>
&lt;h2 id="モーフ制御の視線-vrmlookatblendshapeapplyer">モーフ制御の視線: VRMLookAtBlendShapeApplyer&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_applyer.png" alt="image">&lt;/p>
&lt;p>BlendShapeで視線制御するモデル用のコンポーネントです。
事前に、 &lt;code>LookUp&lt;/code>, &lt;code>LookDown&lt;/code>, &lt;code>LookLeft&lt;/code>, &lt;code>LookRight&lt;/code> の４つの BlendShape を設定してください。&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>以下の設定で、目標物への相対角度 yaw, pitch の適用度合を調整できます。&lt;/p>
&lt;ul>
&lt;li>yaw, pitch 角の上限値 =&amp;gt; Curve X Range Degree&lt;/li>
&lt;li>yaw, pitch が上限の時の blendShape の適用割合(0 ～ 1)。1にしてください =&amp;gt; Curve Y Range Degree&lt;/li>
&lt;/ul>
&lt;p>次の３つを設定してください。&lt;/p>
&lt;ul>
&lt;li>VerticalDown&lt;/li>
&lt;li>VerticalUp&lt;/li>
&lt;li>Horizontal&lt;/li>
&lt;/ul></description></item><item><title>Docs: Standard</title><link>https://vrm.dev/docs/univrm/shaders/univrm_standard/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_standard/</guid><description>
&lt;h2 id="standard">Standard&lt;/h2>
&lt;p>Unityの&lt;a href="https://docs.unity3d.com/ja/2019.3/Manual/StandardShaderMaterialParameters.html">デフォルト&lt;/a>でGLTF標準のPBRマテリアルとほぼ互換性があります。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Unityのデフォルト&lt;/th>
&lt;th align="left">GLTFのPBRマテリアル&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">Albedo カラー&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Albedo テクスチャ&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Metallic レベル&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/metallicFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Smoothness レベル&lt;/td>
&lt;td align="left">1.0f - (/materials/pbrMetallicRoughness/roughnessFactor)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Metallic テクスチャ&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/metallicRoughnessTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">法線マップ&lt;/td>
&lt;td align="left">/materials/normalTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">バンプスケール&lt;/td>
&lt;td align="left">/materials/normalTexture/scale&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ハイトマップ&lt;/td>
&lt;td align="left">N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">オクルージョンテクスチャ&lt;/td>
&lt;td align="left">/materials/occlusionTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">オクルージョン強度&lt;/td>
&lt;td align="left">/materials/occlusionTexture/strength&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Emission カラー&lt;/td>
&lt;td align="left">/materials/emissiveFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Emission テクスチャ&lt;/td>
&lt;td align="left">/materials/emissiveTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">詳細マスク&lt;/td>
&lt;td align="left">N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">セカンダリマップ&lt;/td>
&lt;td align="left">N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">レンダリングモード&lt;/td>
&lt;td align="left">/materials/alphaMode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>UniVRMのマテリアルインポートに関して、roughnessFactor値はMetallicテクスチャにベイクされる。マテリアルエクスポートではsmoothness値はMetallicテクスチャにベイクされる&lt;a href="https://github.com/vrm-c/UniVRM/pull/222">[参照]&lt;/a>。&lt;/p>
&lt;p>Unity と GLTF でテクスチャーの仕様に非互換があるので、 &lt;code>export/import&lt;/code> で変換しています。&lt;/p>
&lt;h2 id="テクスチャ変換">テクスチャ変換&lt;/h2>
&lt;p>Standardシェーダーのカラー以外のテクスチャ(Linear)の処理について。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ノーマルマップの修正。MToonと共通なので次項で説明します&lt;/p>
&lt;ul>
&lt;li>Materialのプロパティ名 &lt;code>_BumpMap&lt;/code> で判定します。&lt;/li>
&lt;li>EditorImport: &lt;code>TextureImporterType.NormalMap&lt;/code>&lt;/li>
&lt;li>RuntimeImport: 法線テクスチャのPack&lt;/li>
&lt;li>Export: 法線テクスチャのUnpack&lt;/li>
&lt;li>sRGBとLinearの対応&lt;/li>
&lt;li>Tangentの対応&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Metallic, Roughnes, OcclusionMapの変換&lt;/p>
&lt;ul>
&lt;li>RGBAチャンネル組み換え&lt;/li>
&lt;li>Roughness値とSmoothness値の反転&lt;/li>
&lt;li>sRGBとLinearの対応&lt;/li>
&lt;li>Importerで変換、Exporterで逆変換&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="トラブルシューティング">トラブルシューティング&lt;/h2>
&lt;ul>
&lt;li>ピカピカに反射してしまう。
&lt;ul>
&lt;li>Shaderの種類が &lt;code>Standard&lt;/code> (Unityの標準) で &lt;code>metallic&lt;/code> と &lt;code>smooth&lt;/code> 値が高い状態になっています。 マテリアルのシェーダーを &lt;code>Unlit/UniUnlit&lt;/code> にするとテクスチャがそのまま表示できます。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Glbインポート</title><link>https://vrm.dev/docs/univrm/gltf/glb_import/</link><pubDate>Mon, 12 Oct 2020 17:04:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/glb_import/</guid><description>
&lt;h2 id="エディタモードでglbファイルをインポートする">エディタモードでGlbファイルをインポートする&lt;/h2>
&lt;p>インポートする手順は&lt;a href="https://vrm.dev/docs/univrm/import/univrm_import/">VRM import&lt;/a>と同じです。UnityのAssetsにドラッグ＆ドロップするだけでGlbファイルをインポートできます。&lt;/p>
&lt;p>&lt;code>v0.68.0&lt;/code> 以降。&lt;/p>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet&lt;/a>&lt;/p>
&lt;p>をサンプルに使っています。&lt;/p>
&lt;h3 id="reverseaxis-反転軸の設定">&lt;code>ReverseAxis&lt;/code> 反転軸の設定&lt;/h3>
&lt;p>glTFの右手系Y-UP から Unityの左手系Y-UP に変換するときに反転する軸を選択できます。&lt;/p>
&lt;ul>
&lt;li>Z軸 (v0.68.0 より前と同じ)&lt;/li>
&lt;li>X軸 (v0.68.0 から追加)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_axis.gif" width="400" />
&lt;p>選択して &lt;code>Apply&lt;/code> を押すと反映されます。&lt;/p>
&lt;h3 id="extract-materials-and-textures-">&lt;code>Extract Materials and Textures ...&lt;/code>&lt;/h3>
&lt;p>fbx の import と同様に Material と Texture が glb の配下に import されます。
この状態では、Material と Texture は Readonly で設定を変更できません。&lt;/p>
&lt;img src="https://vrm.dev/images/unigltf/glb_material_tab.jpg" width="400" />
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すことで Material と Texture を外部アセット(&lt;code>Material.asset&lt;/code>, &lt;code>Texture.png/jpg&lt;/code>) として展開します。
通常の Material と同様に設定を変更できます。&lt;/p>
&lt;img src="https://vrm.dev/images/unigltf/glb_material_tab_extracted.jpg" width="400" />
&lt;p>&lt;code>Remaped Materials&lt;/code>と &lt;code>Remaped Textures&lt;/code> に参照しているリソースが設定されます。
&lt;code>Clear&lt;/code> で extract する前の状態に戻ります。&lt;/p>
&lt;h3 id="glb-の-extract">glb の extract&lt;/h3>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&lt;/a>&lt;/p>
&lt;h4 id="clear">clear&lt;/h4>
&lt;p>初期状態(clear)では、関連する Asset (Mesh, Material, Texture, AnimationClip)は SubAsset として配下にあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>texture_1.metallicRoughness&lt;/code> は、&lt;code>texture_1&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;li>&lt;code>texture_3.occlusion&lt;/code> は、 &lt;code>textrue_3&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;li>&lt;code>texture_4.normal&lt;/code> は、 &lt;code>textrue_4&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_clear.jpg" width="400" />
&lt;h4 id="extract">extract&lt;/h4>
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すと下記のように変化します。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code> の生成&lt;/li>
&lt;li>&lt;code>texture_0.jpg&lt;/code> の生成(color)&lt;/li>
&lt;li>&lt;code>texture_1.metallicRoughness.png&lt;/code> の生成。&lt;code>texture_1&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>texture_2.jpg&lt;/code> の生成(emission)&lt;/li>
&lt;li>&lt;code>texture_3.occlusion.png&lt;/code> の生成。&lt;code>textrue_3&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>texture_4.jpg&lt;/code> の生成(normalMap)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_extract.jpg" width="400" />
&lt;h3 id="gltf-の-extract">gltf の extract&lt;/h3>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&lt;/a>&lt;/p>
&lt;h4 id="clear-1">clear&lt;/h4>
&lt;p>初期状態(clear)では、関連する Asset (Mesh, Material, Texture(変換が必要なもの), AnimationClip)は SubAsset として配下にあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Default_AO.occlusion&lt;/code> は、 &lt;code>Default_AO&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;li>&lt;code>Defualt_metalRoughness.metallicRoughness&lt;/code> は、&lt;code>Defualt_metalRoughness&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_clear.jpg" width="400" />
&lt;h4 id="extract-1">extract&lt;/h4>
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すと下記のように変化します。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code> の生成&lt;/li>
&lt;li>&lt;code>Default_AO.occlusion.png&lt;/code> の生成。&lt;code>Default_AO&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>Default_metalRoughness.metallicRoughness.png&lt;/code> の生成。&lt;code>Default_metalRoughness&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_extract.jpg" width="400" /></description></item><item><title>Docs: 2. VRMをセットアップする</title><link>https://vrm.dev/how_to_make_vrm/setup_vrm/</link><pubDate>Wed, 26 Aug 2020 15:52:30 +0900</pubDate><guid>https://vrm.dev/how_to_make_vrm/setup_vrm/</guid><description>
&lt;h2 id="vrmモデル">VRMモデル&lt;/h2>
&lt;p>前節で VRM 出力したモデルの prefab。&lt;/p>
&lt;p>&lt;strong>VRMファイルを、UnityのAssetsにドラッグ＆ドロップする&lt;/strong> だけで、VRMファイルがインポートされ &lt;strong>モデルデータのPrefabが生成されます&lt;/strong> 。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_prefab.png" />
&lt;img src="https://vrm.dev/images/vrm/vrm_components.jpg" />
&lt;/p>
&lt;ul>
&lt;li>正規化されている&lt;/li>
&lt;li>VRMMeta, Animator, VRMBlendShapeProxy, VRMFirstPerson, VRMLookAtHead, VRMLookAtBoneApplyer 等がアタッチされている&lt;/li>
&lt;/ul>
&lt;h2 id="vrm-の-prefabをシーンに展開する">VRM の Prefabをシーンに展開する&lt;/h2>
&lt;p>&lt;code>File&lt;/code> - &lt;code>New Scene&lt;/code>&lt;/p>
&lt;p>prefab をシーンに展開します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene2.png" />
&lt;h2 id="vrm独自の設定を行う">VRM独自の設定を行う&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;p>読み込まれたモデルデータをHierarchyで選択すると、&lt;strong>インスペクタにさまざまな設定項目&lt;/strong> があらわれます。また、&lt;strong>secondaryには揺れ物の設定&lt;/strong>が入っています。これらを設定していきます。
&lt;strong>少なくとも、&lt;a href="https://vrm.dev/docs/univrm/meta/univrm_meta/">タイトル・作者・ライセンス情報&lt;/a>&lt;/strong> は埋めるようにしてください。 &lt;strong>特にライセンス情報は重要です！&lt;/strong>&lt;/p>
&lt;p>ほかに、&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/">表情や口パクの設定（BlendShape）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/">一人称視点の設定（一人称視点でモデルを操作する場合、邪魔になる頭などのパーツを指定する、標準の視点位置を設定する）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/lookat/univrm_lookat/">視線・眼球の可動範囲と可動曲線の設定。ボーンによる眼球回転だけでなく、BlendShapeによる眼球アニメーションにも対応。&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/springbone/univrm_secondary/">揺れ物（SpringBone/SpringBoneCollider）の設定&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>がありますので必要に応じて設定していきます。&lt;/p>
&lt;h3 id="vrmファイルを出力する">VRMファイルを出力する&lt;/h3>
&lt;p>調整が終わったら、UnityのHierarchyでモデルデータを選択し、再度メニューから&lt;code>VRM0&lt;/code> - &lt;code>Export UniVRM-0.XX&lt;/code>を実行します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>前のバージョンは &lt;code>VRM&lt;/code> - &lt;code>UniVRM-0.XX&lt;/code> - &lt;code>Export humanoid&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;br>&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Pose Freeze&lt;/h4>
&lt;p>エクスポート時に正規化します。
最新版は、 &lt;code>ExportRoot&lt;/code> をセットしたときにヒエラルキーに回転・拡縮があるかどうかを調べて、このチェックボックスを自動で設定するようになっています。
最初の正規化以降でも、&lt;/p>
&lt;ul>
&lt;li>アクセサリを追加&lt;/li>
&lt;/ul>
&lt;p>などの場合に必要です。 &lt;code>ExportRoot&lt;/code> を再セットすれば自動判定します。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/">BlendShape の Bake&lt;/a> もあります。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="完成">完成！&lt;/h3>
&lt;p>これでセットアップ済のVRMファイルが出来ました。&lt;a href="https://vrm.dev/vrm_applications/">対応アプリケーション&lt;/a>に読み込ませてみましょう！&lt;/p></description></item><item><title>Docs: VRMモデルのファイルサイズ</title><link>https://vrm.dev/docs/univrm/export/vrm_size/</link><pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/export/vrm_size/</guid><description>
&lt;p>VRMは、GLB形式なので、&lt;/p>
&lt;p>&lt;code>VRMエクスポートしたファイルのサイズ =&amp;gt; glb のサイズ&lt;/code>&lt;/p>
&lt;p>&lt;code>glb =&amp;gt; json + binary&lt;/code>&lt;/p>
&lt;p>です。&lt;/p>
&lt;p>json はテキストなので通常は 1MB にもなりません。&lt;/p>
&lt;p>binary で主なものは、&lt;/p>
&lt;p>&lt;code>image&lt;/code> と &lt;code>mesh&lt;/code> です。&lt;/p>
&lt;p>5万頂点、5万三角形のモデルを例としてどれくらいの容量になるかを計算する目安を説明します。&lt;/p>
&lt;h2 id="image">Image&lt;/h2>
&lt;p>Material が参照する Texture の PNG(JPG) のバイト列がそのまま入っています。
Meta の Thumbnail も対象になります。&lt;/p>
&lt;blockquote>
&lt;p>v0.56 でローカルの元ファイルをそのまま使うようにした結果、
元ファイルが巨大であった場合に、以前に比べて大きくなる問題が発生しています。4000x4000のような大きなファイルはPNG(JPG)を縮小してください。v0.58 修正予定。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/issues/502">https://github.com/vrm-c/UniVRM/issues/502&lt;/a>&lt;/p>
&lt;h2 id="mesh">Mesh&lt;/h2>
&lt;p>Index バッファ と 頂点バッファです。&lt;/p>
&lt;h3 id="indexバッファ">Indexバッファ&lt;/h3>
&lt;p>Indexバッファは、Intの配列を使っています。&lt;/p>
&lt;p>5万三角形のモデルの場合、&lt;/p>
&lt;p>&lt;code>50000 x 4(Int=4byte) x 3(三角形の3頂点) =&amp;gt; 0.6MB&lt;/code> の容量を使います。&lt;/p>
&lt;blockquote>
&lt;p>GLTFの仕様的には unsigned short も可能ですが、UniVRM のエクスポーターは未対応。65536 頂点までなので 50000 三角形は格納できません。&lt;/p>
&lt;/blockquote>
&lt;h3 id="頂点バッファ">頂点バッファ&lt;/h3>
&lt;p>一頂点は、&lt;/p>
&lt;pre>&lt;code>{
float3 Position; // 頂点位置 4(floatサイズ) x 3(xyz) =&amp;gt; 12byte
float3 Normal; // 頂点法線 4(floatサイズ) x 3(xyz) =&amp;gt; 12byte
float2 TEXCOORD_0; // 頂点UV 4(floatサイズ) x 2(xy) =&amp;gt; 8byte
short4 JOINTS_0; // 頂点BoneIndex 2(shortサイズ) x 4(4boneまで) =&amp;gt; 8byte
float4 WEIGHTS_0; // 頂点Weight 4(floatサイズ) x 4(4boneまで) =&amp;gt; 16byte
}
&lt;/code>&lt;/pre>&lt;p>となっています。&lt;/p>
&lt;blockquote>
&lt;p>頂点カラー、2つめのUV(未対応)などバリエーションがありうる。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>GLTFにはTangent(float4)も保存できますが、UniVRMでは保存せずUnityに計算させています。法線とUVから &lt;code>MIKK T Space&lt;/code> アルゴリズムで計算したものを使う仕様です。&lt;/p>
&lt;/blockquote>
&lt;p>５万頂点のモデルの場合、&lt;/p>
&lt;p>&lt;code>50000 x (12 + 12 + 8 + 8 + 16) =&amp;gt; 2.8MB&lt;/code> の容量を使います。&lt;/p>
&lt;h2 id="基本容量">基本容量&lt;/h2>
&lt;p>以上、 &lt;code>画像サイズ合計 + インデックスバッファ + 頂点バッファ&lt;/code> の合計がモデルの基本容量になります。
5万頂点、5万三角形のモデルの場合、 &lt;code>3.4MB + 画像サイズ合計&lt;/code> が基本容量になります。
基本容量は計算通りの値になります。
以降、時として容量爆発の原因となるブレンドシェイプの容量についてです。&lt;/p>
&lt;h2 id="ブレンドシェイプmorphtargetの容量">ブレンドシェイプ(MorphTarget)の容量&lt;/h2>
&lt;pre>&lt;code class="language-ブレンドシェイプ頂点" data-lang="ブレンドシェイプ頂点">{
float3 Position; // 頂点位置 4 x 3 =&amp;gt; 12byte. 必須
float3 Normal; // 頂点法線 4 x 3 =&amp;gt; 12byte. オプション
float3 Tangent; // 頂点Tangent 4 x 3 =&amp;gt; 12byte. 記録しない
}
&lt;/code>&lt;/pre>&lt;p>ひとつのブレンドシェイプで &lt;code>50000 x (12 + 12) =&amp;gt; 1.2MB&lt;/code> の容量を使います。&lt;/p>
&lt;p>20のブレンドシェイプがあったとすると,
&lt;code>50000 x (12 + 12) x 20 =&amp;gt; 24MB&lt;/code> の容量を使います。&lt;/p>
&lt;p>60のブレンドシェイプがあると、
&lt;code>50000 x (12 + 12) x 60 =&amp;gt; 72MB&lt;/code> の容量を使います。&lt;/p>
&lt;ul>
&lt;li>大量のBlendShapeがある&lt;/li>
&lt;li>BlendShapeのある場所と無い場所が分割されていない&lt;/li>
&lt;/ul>
&lt;p>の条件が揃うと大容量になることに注意してください。
以降、ブレンドシェイプ容量の削減方法についてです。&lt;/p>
&lt;h3 id="ブレンドシェイプの容量対策">ブレンドシェイプの容量対策&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/export/univrm_export/">エクスポートダイアログ&lt;/a>
の以下のオプションがブレンドシェイプの容量に関連します。&lt;/p>
&lt;h4 id="エクスポートオプション">エクスポートオプション&lt;/h4>
&lt;p>最初の２つは安全にです。３つめは修正中。4つめは、UniVRM-0.53(含む)以前でロードエラーになるバージョン問題があります。&lt;/p>
&lt;h5 id="reduceblendshape">ReduceBlendshape&lt;/h5>
&lt;p>BlendShapeClip設定から参照されないBlendShapeをエクスポートしない。
ファイルサイズを削減できます。&lt;/p>
&lt;h5 id="reduceblendshapeclip">ReduceBlendshapeClip&lt;/h5>
&lt;p>Presetが Unknown であるBlendShapeClipをエクスポートしない。
ReduceBlendshapeと組み合わせて使います。&lt;/p>
&lt;h5 id="usesparseaccessor">UseSparseAccessor&lt;/h5>
&lt;p>BlendShapeが多数ある場合にファイルサイズを削減できます。&lt;/p>
&lt;p>ブレンドシェイプの値が、 &lt;code>0&lt;/code> でない頂点のみを飛び飛びに記録することで容量を削減する GLTF の仕様です。&lt;/p>
&lt;blockquote>
&lt;p>修正中: GLTFの互換性の問題があって、UniVRM以外のローダーでエラーになる&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code class="language-ブレンドシェイプ頂点" data-lang="ブレンドシェイプ頂点">{
int Index; // 有効なブレンドシェイプの index =&amp;gt; 4
float3 Position; // 頂点位置 4 x 3 =&amp;gt; 12byte. 必須
float3 Normal; // 頂点法線 4 x 3 =&amp;gt; 12byte. オプション
float3 Tangent; // 頂点Tangent 4 x 3 =&amp;gt; 12byte. 記録しない
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>BlendShapeの有効な頂点数 x (12 + 12 + 4) =&amp;gt; ?MB&lt;/code>&lt;/p>
&lt;ul>
&lt;li>保存方法だけ変わる&lt;/li>
&lt;/ul>
&lt;h5 id="onlyblendshapeposition">OnlyBlendshapePosition&lt;/h5>
&lt;p>BlendShapeのNormal, Tangent をエクスポートしない。
ファイルサイズを削減できます。&lt;/p>
&lt;blockquote>
&lt;p>UniVRM-0.53 より前のバージョンはインポート時にエラーになるのに注意してください。&lt;/p>
&lt;/blockquote>
&lt;h4 id="meshutility-で-blendshape-の-あるmesh-と-ないmesh-に分割する">MeshUtility で BlendShape の あるMesh と ないMesh に分割する&lt;/h4>
&lt;p>例えば、顔(BlendShapeあり)が 10000 頂点、体(BlendShapeなし)が 40000 頂点に分割されていると、&lt;/p>
&lt;p>ひとつのブレンドシェイプで &lt;code>10000 x (12 + 12) =&amp;gt; 0.24MB&lt;/code> の容量を使います。&lt;/p>
&lt;p>分割前の一体型のモデル&lt;/p>
&lt;p>&lt;code>50000 x (12 + 12) =&amp;gt; 1.2MB&lt;/code>&lt;/p>
&lt;p>に比べて容量を節約できます。&lt;/p>
&lt;blockquote>
&lt;p>ランタイムにも良い可能性があるが、ドローコールは増えるかもしれないのでトレードオフがある&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/tree/master/Assets/UniGLTF/MeshUtility">https://github.com/vrm-c/UniVRM/tree/master/Assets/UniGLTF/MeshUtility&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>TODO: 導入方法の説明&lt;/p>
&lt;/blockquote>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>予想より大容量になってしまうときはブレンドシェイプ、次に画像に注意してください。&lt;/p></description></item><item><title>Docs: エクスポート時にBlendShapeの状態をベイクする</title><link>https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/</link><pubDate>Mon, 27 Jul 2020 19:28:41 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/</guid><description>
&lt;p>UniVRM ではエクスポートするときに、 &lt;code>SkinnedMeshRenderer&lt;/code> のスライダーを上げておくとその状態を基本状態にすることができます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/blendshape_value.jpg" width="400" />
&lt;p>&lt;code>Pose Freeze&lt;/code> のチェックボックスを有効にする必要があります。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/check_freeze.jpg" width="400" />
&lt;p>エクスポートすると・・・&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/bake_blink.gif" />
&lt;p>基本状態(blendShape が 0 の状態)が変更されます。&lt;/p></description></item><item><title>Docs: UPMでUniVRMをインストールする</title><link>https://vrm.dev/docs/univrm/install/univrm_upm/</link><pubDate>Wed, 08 Jul 2020 11:42:13 +0900</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_upm/</guid><description>
&lt;ul>
&lt;li>&lt;code>Unity 2019.4以降&lt;/code> が必要です。&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/">Git client&lt;/a> のインストールが必要です。&lt;/li>
&lt;/ul>
&lt;h3 id="unity-向けの-git-のインストール">Unity 向けの git のインストール&lt;/h3>
&lt;p>Unity Manual &lt;a href="https://docs.unity3d.com/Manual/upm-git.html#req">Requirements&lt;/a> を参照してください。&lt;/p>
&lt;blockquote>
&lt;p>To use Git dependencies in a project, make sure the &lt;a href="https://git-scm.com/">Git client&lt;/a> is installed on your machine and that you have added the Git executable path to the PATH system environment variable.&lt;/p>
&lt;/blockquote>
&lt;p>未インストールだと&lt;/p>
&lt;blockquote>
&lt;p>An error occurred while resolving packages:
Project has invalid dependencies:
com.vrmc.vrmshaders: No &amp;lsquo;git&amp;rsquo; executable was found. Please install Git on your system then restart Unity and Unity Hub&lt;/p>
&lt;/blockquote>
&lt;p>というようなエラーが出ます。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">他のgit&lt;/h4>
&lt;p>&lt;a href="https://git-scm.com/">https://git-scm.com/&lt;/a> からインストールした git.exe (デフォルトは、 &lt;code>C:\Program Files\Git\cmd\git.exe&lt;/code>) が、Path の中で最初に見つかるように設定してください。&lt;/p>
&lt;ul>
&lt;li>powershell からバージョンを確認した例 (20201130)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-dos" data-lang="dos">&amp;gt; git --version
git version 2.29.2.windows.2
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="unitypackagemanager-ウインドウによるインストール">UnityPackageManager ウインドウによるインストール&lt;/h3>
&lt;p>UnityPackageManagerのWindow&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/menu_packagemanager.jpg" />
&lt;hr>
&lt;p>&lt;code>add package from git URL&lt;/code>&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/from_git.jpg" />
&lt;hr>
&lt;p>新しいUniVRMバージョンがリリースされる時に、このバージョンに関連するgit urlsを公開します。&lt;/p>
&lt;p>たとえば、&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.66.0">v0.66.0&lt;/a> のgit urlは次のとおりです：&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.66.0&lt;/code>&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.66.0&lt;/code> =&amp;gt; VRMShaders に依存&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#v0.66.0&lt;/code> =&amp;gt; UniGLTFとVRMShaders に依存&lt;/li>
&lt;/ul>
&lt;p>パッケージ同士の依存関係を自動でダウンロードしてくれる機能は無いので、以上の git url を順に追加してください。&lt;/p>
&lt;p>ProjectウィンドウのPackagesフォルダにインポートしたパッケージを確認する：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/upm_package.jpg" />
&lt;hr>
&lt;p>バージョン番号を変更することで、お好きなバージョンに切り替えることができます。&lt;/p>
&lt;h3 id="packagesmanifestjson-直接編集によるインストール">packages/manifest.json 直接編集によるインストール&lt;/h3>
&lt;p>以下の内容を追記してください（&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.66.0">v0.66.0&lt;/a>の例)。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.66.0&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.66.0&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#v0.66.0&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gitの特定コミットを指定する場合">gitの特定コミットを指定する場合&lt;/h2>
&lt;p>&lt;code>dependencies&lt;/code> に特定のコミットを指定します。&lt;/p>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#39d54ce7d3b0061d2d9ee236017dca129c7cdc51&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#39d54ce7d3b0061d2d9ee236017dca129c7cdc51&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#39d54ce7d3b0061d2d9ee236017dca129c7cdc51&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: BlendShapeProxyの使い方</title><link>https://vrm.dev/docs/univrm/programming/univrm_use_blendshape/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/programming/univrm_use_blendshape/</guid><description>
&lt;h2 id="環境">環境&lt;/h2>
&lt;p>UniVRM v0.58.0&lt;/p>
&lt;h2 id="使用するメソッド">使用するメソッド&lt;/h2>
&lt;ul>
&lt;li>[推奨] &lt;code>SetValues&lt;/code>&lt;/li>
&lt;li>[非推奨] &lt;code>ImmediatelySetValue&lt;/code>&lt;/li>
&lt;li>[上級者向け] &lt;code>AccumulateValue&lt;/code>&lt;/li>
&lt;li>[上級者向け] &lt;code>Apply&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="スクリプトから-blendshape-weight-を適用する">スクリプトから BlendShape weight を適用する&lt;/h2>
&lt;p>&lt;code>SetValues&lt;/code> 関数のみを使用します。
そのフレームで必要な表情の weight 値をすべて集めてから &lt;code>SetValues&lt;/code> を 1 回だけ呼んで設定します。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = GetComponent&amp;lt;VRMBlendShapeProxy&amp;gt;();
proxy.SetValues(&lt;span style="color:#069;font-weight:bold">new&lt;/span> Dictionary&amp;lt;BlendShapeKey, &lt;span style="color:#078;font-weight:bold">float&lt;/span>&amp;gt;
{
{BlendShapeKey.CreateFromPreset(BlendShapePreset.A), &lt;span style="color:#f60">1f&lt;/span>}, &lt;span style="color:#09f;font-style:italic">// [0, 1] の範囲で Weight を指定
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> {BlendShapeKey.CreateFromPreset(BlendShapePreset.Joy), &lt;span style="color:#f60">1f&lt;/span>}, &lt;span style="color:#09f;font-style:italic">// システム定義の表情は enum で指定
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> {BlendShapeKey.CreateUnknown(&lt;span style="color:#c30">&amp;#34;USER_DEFINED_FACIAL&amp;#34;&lt;/span>), &lt;span style="color:#f60">1f&lt;/span>}, &lt;span style="color:#09f;font-style:italic">// ユーザ定義の表情は string で指定
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>});
&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="複数の-blendshape-weight-を適用する際の競合の問題について">複数の BlendShape weight を適用する際の競合の問題について&lt;/h2>
&lt;p>この節では、なぜ &lt;code>SetValues&lt;/code> を使わなければならないのかという疑問に回答します。&lt;/p>
&lt;p>たとえば 2 つの VRMBlendShape &lt;code>Blink_L&lt;/code> と &lt;code>Blink_R&lt;/code> が&lt;/p>
&lt;p>VRMBlendShape &lt;code>Blink_L&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Mesh &lt;code>A&lt;/code> の Blendshape &lt;code>eye_close_L&lt;/code> の weight 値 &lt;code>100&lt;/code>&lt;/li>
&lt;li>Mesh &lt;code>A&lt;/code> の Blendshape &lt;code>eye_close_R&lt;/code> の weight 値 &lt;code>1&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>VRMBlendShape &lt;code>Blink_R&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Mesh &lt;code>A&lt;/code> の Blendshape &lt;code>eye_close_L&lt;/code> の weight 値 &lt;code>1&lt;/code>&lt;/li>
&lt;li>Mesh &lt;code>A&lt;/code> の Blendshape &lt;code>eye_close_R&lt;/code> の weight 値 &lt;code>100&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>で定義されているとします。
このとき両目を閉じたいモチベーションから、両方を有効にする意図で下記のように実行します。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">proxy.ImmediatelySetValue(BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_L), &lt;span style="color:#f60">1.0f&lt;/span>);
proxy.ImmediatelySetValue(BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_R), &lt;span style="color:#f60">1.0f&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>すると、左目だけが開いてしまいます。
これは後から &lt;code>ImmediateSetValue&lt;/code> した &lt;code>Blink_R&lt;/code> が &lt;code>Blink_L&lt;/code> と競合して weight を上書きしてしまうからです。
したがって VRM の表情制御においては下記の 2 通りのどちらかの方法で書くことが求められます。
これらの方法はこの競合の問題を解決して表情を設定することができます。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">proxy.SetValues(&lt;span style="color:#069;font-weight:bold">new&lt;/span> Dictionary&amp;lt;BlendShapeKey, &lt;span style="color:#078;font-weight:bold">float&lt;/span>&amp;gt;
{
{BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_L), &lt;span style="color:#f60">1.0f&lt;/span>},
{BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_R), &lt;span style="color:#f60">1.0f&lt;/span>},
});
&lt;/code>&lt;/pre>&lt;/div>
&lt;p>または&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">proxy.AccumulateValue(BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_L), &lt;span style="color:#f60">1.0f&lt;/span>); &lt;span style="color:#09f;font-style:italic">// すぐに適用せずにたくわえる
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>proxy.AccumulateValue(BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_R), &lt;span style="color:#f60">1.0f&lt;/span>);
proxy.Apply(); &lt;span style="color:#09f;font-style:italic">// 蓄積した値をまとめて適用する
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>WIP&lt;/p>
&lt;h2 id="何故複数のsetterがあるのか">何故、複数のSetterがあるのか&lt;/h2>
&lt;ul>
&lt;li>LipSync&lt;/li>
&lt;li>瞬き&lt;/li>
&lt;li>視線制御(BlendShapeで視線を動かすタイプのモデル)&lt;/li>
&lt;li>プログラムによる喜怒哀楽&lt;/li>
&lt;/ul>
&lt;p>上記のような複数のBlendShapeが別々のコンポーネントから設定された場合に、
BlendShape同士が競合することがわかりました。
後で設定した値で上書きされて希望のBlendShapeが適用されないという状態になります。
これを解決するために、一か所で中央集権的に制御する必要があります。&lt;/p>
&lt;p>合成したり排他制御した、BlendShapeClipの集合のスナップショットをまとめて適用することを想定して &lt;code>SetValues&lt;/code>&lt;/p>
&lt;h2 id="immediatelysetvalue">ImmediatelySetValue&lt;/h2>
&lt;p>簡単なテストプログラムでの利用を想定しています。&lt;/p>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = GetComponent&amp;lt;VRMBlendShapeProxy&amp;gt;();
proxy.ImmediatelySetValue(BlendShapeKey.CreateFromPreset(BlendShapePreset.A), &lt;span style="color:#f60">1.0f&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="accumulatevalue--apply">AccumulateValue + Apply&lt;/h2>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = GetComponent&amp;lt;VRMBlendShapeProxy&amp;gt;();
proxy.AccumulateValue(BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_L), &lt;span style="color:#f60">1.0f&lt;/span>); &lt;span style="color:#09f;font-style:italic">// すぐに適用せずにたくわえる
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>proxy.AccumulateValue(BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_R), &lt;span style="color:#f60">1.0f&lt;/span>);
proxy.Apply(); &lt;span style="color:#09f;font-style:italic">// 蓄積した値をまとめて適用する
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下記のSetValuesを推奨しています。&lt;/p>
&lt;h2 id="setvalues">SetValues&lt;/h2>
&lt;p>BlendShape合成器が必要に応じ呼び出すことを想定しています。&lt;/p>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> proxy = GetComponent&amp;lt;VRMBlendShapeProxy&amp;gt;();
proxy.SetValues(&lt;span style="color:#069;font-weight:bold">new&lt;/span> Dictionary&amp;lt;BlendShapeKey, &lt;span style="color:#078;font-weight:bold">float&lt;/span>&amp;gt;
{
{BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_L), &lt;span style="color:#f60">1.0f&lt;/span>},
{BlendShapeKey.CreateFromPreset(BlendShapePreset.Blink_R), &lt;span style="color:#f60">1.0f&lt;/span>},
});
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: VRMFirstPerson</title><link>https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/</guid><description>
&lt;p>２系統の設定があります。&lt;/p>
&lt;ul>
&lt;li>VRMモデル内で、VRヘッドセット位置を指定する&lt;/li>
&lt;li>VRで、メッシュごとにカメラの可視設定を分ける&lt;/li>
&lt;/ul>
&lt;p>※ アプリケーション側でこれらのパラメーターを使っている場合のみ有効です&lt;/p>
&lt;h2 id="ヘッドセットの位置指定">ヘッドセットの位置指定&lt;/h2>
&lt;p>ヘッドの動きの頭部への反映を微調整できます。&lt;/p>
&lt;h3 id="firstpersonbone">FirstPersonBone&lt;/h3>
&lt;p>通常頭ボーンを指定します。
一人称時にヘッドセットに追随させるボーンです。&lt;/p>
&lt;h3 id="firstpersonoffset">FirstPersonOffset&lt;/h3>
&lt;p>追随する位置をFirstPersonBoneの位置からオフセットします。
デフォルト値[0, 0.06, 0]は、Headから両目の間へのオフセットを想定しています。&lt;/p>
&lt;h2 id="vrの可視設定">VRの可視設定&lt;/h2>
&lt;p>VRアプリでの可視設定です。
VRアプリでは２種類のカメラが想定されます。&lt;/p>
&lt;ul>
&lt;li>一人称(HMDにレンダリングされる)&lt;/li>
&lt;li>三人称(HMD以外。配信用、鏡、マルチユーザーの他のユーザーのHMD)&lt;/li>
&lt;/ul>
&lt;p>です。
このとき、一人称で普通に自身のモデルがすべて見えると不都合があります。&lt;/p>
&lt;ul>
&lt;li>近平面で自分の輪切りが見える&lt;/li>
&lt;li>髪が邪魔で何も見えない&lt;/li>
&lt;li>自分モデルの頭部の中身が見えてしまう(歯とか)&lt;/li>
&lt;/ul>
&lt;p>など。
これらの自体に対処するために、メッシュ毎に２種類のカメラに対する可視性を設定できます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>設定&lt;/th>
&lt;th>一人称カメラ&lt;/th>
&lt;th>三人称カメラ&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Both&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>体、手、足など頭部から遠い部位を指する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FirstPersonOnly&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>&lt;/td>
&lt;td>使わない？&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ThirdPersonOnly&lt;/td>
&lt;td>&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>外部カメラしか見えない。頭部、髪、帽子などを指定する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Auto&lt;/td>
&lt;td>後述&lt;/td>
&lt;td>後述&lt;/td>
&lt;td>デフォルト&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="設定のリセット">設定のリセット&lt;/h3>
&lt;p>FirstPerson は、最初に自動で Auto の設定になるようになっています。
Mesh が増減するなどでモデルの構成が変わった場合に、参照が &lt;code>Missing&lt;/code> になるなどエクスポートできない状態になる場合があります。
VRMFirstPerson をリセットすることで再設定することができます。
リセットする方法は、&lt;/p>
&lt;p>&lt;code>VRM First Person(Script)&lt;/code> インスペクタの右上角の &lt;code>歯車アイコン ⚙&lt;/code> で表示されるメニューから &lt;code>Reset&lt;/code> を選択してください。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/firstperson_reset.gif" alt="firstperson reset" width="600" />
&lt;h3 id="auto-による-both-と-thirdpersononly-への自動分割">Auto による Both と ThirdPersonOnly への自動分割&lt;/h3>
&lt;p>設定をAutoにしておくと、ロード時にメッシュを自動で &lt;code>Both&lt;/code> と &lt;code>ThirdPersonOnly&lt;/code> に分離することを指示できます。
UniVRMでは &lt;a href="https://vrm.dev/docs/univrm/programming/univrm_use_firstperson/#実行時にsetupを呼び出してカメラにlayermaskを設定する">VRMFirstPerson.Setup()&lt;/a> を呼び出します。
Autoによる自動分割は、重めの処理になります。&lt;/p>
&lt;p>分割基準は、&lt;/p>
&lt;ul>
&lt;li>含まれる頂点が &lt;code>head&lt;/code> か &lt;code>head&lt;/code> の子孫の weight を持っているか否か&lt;/li>
&lt;/ul>
&lt;p>です。
すべて同じ側の場合は分割せずに、&lt;code>Both&lt;/code> か &lt;code>ThirdPersonOnly&lt;/code> として扱います。&lt;/p>
&lt;h3 id="推奨される構成">推奨される構成&lt;/h3>
&lt;p>あらかじめ、頭と体にモデルを分割しておき&lt;/p>
&lt;ul>
&lt;li>頭に &lt;code>ThirdPersonOnly&lt;/code> を指定&lt;/li>
&lt;li>体に &lt;code>Both&lt;/code> を指定&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/firstperson.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>立体ちゃんは頭とそれ以外が分かれているので体をBoth、頭をThirdPersonOnlyに設定します。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/firstperson_runtime.png" alt="firstperson" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>動作例。ThirdPersonOnlyに設定したメッシュがFirstPersonで非表示になりました。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: ビューアでVRMをインポートする</title><link>https://vrm.dev/how_to_view_vrm/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/how_to_view_vrm/</guid><description>
&lt;p>VRMビューアアプリは&lt;a href="https://vrm.dev/vrm_applications/#ビューア">こちら&lt;/a>。&lt;/p>
&lt;p>または&lt;a href="https://github.com/vrm-c/UniVRMTest/">UniVRMTest&lt;/a>のビューアを使用できます：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRMTest/releases">UniVRMTest/releases&lt;/a>からVRMビューア(VRMViewer_v0.xx.x.zip)をダウンロードしてください&lt;/li>
&lt;li>プログラム（VRMViewer_v0.xx.x.exe）を実行して&lt;code>VRMモデル&lt;/code>ボタンをクリックしてください&lt;/li>
&lt;li>VRMモデルを選んでモデルがシーンに表示されます&lt;/li>
&lt;/ol></description></item><item><title>Docs: Glbエクスポート</title><link>https://vrm.dev/docs/univrm/gltf/how_to_create_glb/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/how_to_create_glb/</guid><description>
&lt;p>&lt;code>v0.68.0&lt;/code> 以降&lt;/p>
&lt;p>UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p>
&lt;h3 id="1-unigltfexport-unigltf-2xy-メニューからダイアログを開きます">1. &lt;code>UniGLTF/Export UniGLTF-2.X.Y&lt;/code> メニューからダイアログを開きます&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/unigltf/glb_export_dialog.jpg" alt="image">&lt;/p>
&lt;h3 id="2-exportroot-に対象の-gameiobject-をセットしてください">2. &lt;code>ExportRoot&lt;/code> に対象の GameIObject をセットしてください&lt;/h3>
&lt;p>ドラッグアンドドロップや、右の◎ボタンを押すことで選択できます。&lt;/p>
&lt;ul>
&lt;li>一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/li>
&lt;/ul>
&lt;h3 id="3-export-を押す">3. &lt;code>Export&lt;/code> を押す&lt;/h3>
&lt;p>ファイル保存ダイアログが表示されるので出力先を指定してください。&lt;/p>
&lt;h2 id="glbのエクスポート対象になるコンポーネント">Glbのエクスポート対象になるコンポーネント&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li>
&lt;/ul>
&lt;h2 id="対応しているshader">対応しているShader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code>&lt;/li>
&lt;li>&lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code>, &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="v0680-より前">&lt;code>v0.68.0&lt;/code> より前&lt;/h1>
&lt;h2 id="手順">手順&lt;/h2>
&lt;p>UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p>
&lt;h3 id="1-空のシーンを用意します">1. 空のシーンを用意します。&lt;/h3>
&lt;h3 id="2-一番親になるemptyを作成します移動回転拡縮は無し">2. 一番親になるemptyを作成します。移動・回転・拡縮は無し。&lt;/h3>
&lt;p>一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/p>
&lt;h3 id="3-エクスポートしたいオブジェクトをemptyの子にします">3. エクスポートしたいオブジェクトをemptyの子にします。&lt;/h3>
&lt;p>(この例ではCubeを作成しました。Prefab等任意のオブジェクトを追加できます)&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/root_cube.png" alt="image">&lt;/p>
&lt;h3 id="4-一番親のオブジェクトを選択してエクスポートメニューを起動します">4. 一番親のオブジェクトを選択して、エクスポートメニューを起動します。&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/menu_unigltf_export.png" alt="image">&lt;/p>
&lt;h3 id="5-ファイル名を選択して-glb-ファイルを書き出せば完了です">5. ファイル名を選択して &lt;code>glb&lt;/code> ファイルを書き出せば完了です。&lt;/h3>
&lt;h2 id="glbのエクスポート対象になるコンポーネント-1">Glbのエクスポート対象になるコンポーネント&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li>
&lt;/ul>
&lt;h2 id="対応しているshader-1">対応しているShader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code> もしくは &lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code>, &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: BlendShape の法線を確認しよう</title><link>https://vrm.dev/docs/univrm/blendshape/check_blendshape_normal/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/check_blendshape_normal/</guid><description>
&lt;p>最近のバージョンの Unity（Unity 2018~）では、 fbx を import したときに blendshape 法線が自動で再計算される挙動になっていて blendshape の見た目がおかしくなることがあります。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">詳細&lt;/h4>
BlendShape の法線が (0, 0, 0) ならば、法線が変化しません。
これに、計算された法線が設定されて意図しない変化をするようです。
ベースになるメッシュの法線が加工されている場合、
ミラーリングで左右が分かれている場合の境界などで顕著です。
&lt;/div>
&lt;h2 id="mtoonの法線デバッグ表示で法線を確認する">MToonの法線デバッグ表示で法線を確認する&lt;/h2>
&lt;p>fbx の &lt;code>Materials&lt;/code> タブの &lt;code>Extract Materials...&lt;/code> を実行してマテリアルを取り出します。&lt;/p>
&lt;p>すべてのマテリアルを選択します。&lt;/p>
&lt;p>マテリアルの種類を &lt;code>VRM/MToon&lt;/code> に変更します。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">法線確認&lt;/h4>
法線確認のために仮に MToon 化するだけなので、テクスチャ等の設定は不要です。
&lt;/div>
&lt;p>MToon の &lt;code>Options - Debugging Options - Visualize&lt;/code> を &lt;code>Normal&lt;/code> に変更します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/mtoon_normal.gif" alt="debug normal">&lt;/p>
&lt;p>SkinnedMeshRenderer を選択します。&lt;/p>
&lt;p>BlendShape のスライダーを動かして法線を確認します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/broken_normal.jpg" alt="debug normal">&lt;/p>
&lt;ul>
&lt;li>鼻先&lt;/li>
&lt;li>下唇&lt;/li>
&lt;/ul>
&lt;p>の法線が顕著に乱れています。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">モデル情報&lt;/h4>
&lt;ul>
&lt;li>vroid さんの vrm を blender に import&lt;/li>
&lt;li>blender から fbx export&lt;/li>
&lt;li>unity に import&lt;/li>
&lt;/ul>
&lt;p>したものです。
&lt;/div>
&lt;h2 id="blendshape-の法線をなおす">BlendShape の法線をなおす&lt;/h2>
&lt;p>上記の方法で BlendShape がおかしいことが分かった場合に修復する方法。&lt;/p>
&lt;p>fbx の &lt;code>Model&lt;/code> タブを選択。&lt;/p>
&lt;p>&lt;code>Legacy Blend Shape Normals&lt;/code> をチェックして Apply。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/legacy_normal_fixed.jpg" alt="fixed normal">&lt;/p>
&lt;p>BlendShape がなおっていることを確認します。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">修正前との違い&lt;/h4>
鼻先、下唇に加えて、舌が全然違う法線になってます。
&lt;/div></description></item><item><title>Docs: LookAt(UV)</title><link>https://vrm.dev/docs/univrm/lookat/lookat_uv/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/lookat_uv/</guid><description>
&lt;p>VRMLookAtHead + VRMLookAtBlendShapeApplyer の２つのコンポーネントを組み合わせます。
&lt;code>VRMLookAtBoneApplyer&lt;/code> を削除して、代わりに &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> をアタッチしてください。&lt;/p>
&lt;p>&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; VRMLookAtBlendShapeApplyer&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/add_vrm_lookat_blendshape.jpg" alt="image">&lt;/p>
&lt;h2 id="textureのuv操作による視線制御">TextureのUV操作による視線制御&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_applyer.png" alt="image">&lt;/p>
&lt;p>Textureを上下左右にスライドさせることで目線を移動させる方法です。
&lt;code>Unityちゃん&lt;/code> はこのタイプです。&lt;/p>
&lt;h2 id="目のマテリアルを探す">目のマテリアルを探す&lt;/h2>
&lt;p>マテリアルのインスペクタの目のテクスチャの &lt;code>Tiling Offset&lt;/code> の設定に注目してください。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/material_tiling_offset.png" alt="image">&lt;/p>
&lt;p>&lt;code>1, 1, 0, 0&lt;/code> になっているはずです(なっていない場合は特殊なので以降を適切に読み替えてください)。&lt;/p>
&lt;p>試しに、&lt;code>Offset&lt;/code> Xの値を増減させてみてください。目が左右に動きます。Yの値では上下に動くはずです。
目的の設定が見つかったので元に戻して次に進みます。&lt;/p>
&lt;h2 id="blendshapeの準備">BlendShapeの準備&lt;/h2>
&lt;p>LookUp, LookDown, LookLeft, LookRight が、目標のマテリアルのカラーマテリアルの UV を操作するようにします。
例では、Materialに &lt;code>unlit/transparent cutout&lt;/code> を使用しています。&lt;/p>
&lt;h3 id="lookleftの例">LookLeftの例&lt;/h3>
&lt;p>&lt;code>LookLeft&lt;/code> 選択してください。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/lookleft.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material List&lt;/code> タブを選択&lt;/li>
&lt;li>&lt;code>+&lt;/code> を選択&lt;/li>
&lt;li>&lt;code>eye_L1&lt;/code> - &lt;code>_MainTex_ST&lt;/code> を選択&lt;/li>
&lt;li>&lt;code>Tliling = 1, 1&lt;/code>, &lt;code>Offset = 0, 0&lt;/code> に設定します&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/tiling_offset_1100.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Offsetを調整してLookLeftを作ります&lt;/li>
&lt;li>&lt;code>eye_R1&lt;/code> も同様に&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/look_left.png" alt="image">&lt;/p>
&lt;p>&lt;a href="http://unity-chan.com/">© UTJ/UCL&lt;/a>&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>以下の設定で、目標物への相対角度 yaw, pitch の適用度合を調整できます。&lt;/p>
&lt;ul>
&lt;li>yaw, pitch 角の上限値 =&amp;gt; Curve X Range Degree&lt;/li>
&lt;li>yaw, pitch が上限の時の blendShape の適用割合(0 ～ 1)。1にしてください =&amp;gt; Curve Y Range Degree&lt;/li>
&lt;/ul>
&lt;p>次の３つを設定してください。&lt;/p>
&lt;ul>
&lt;li>VerticalDown&lt;/li>
&lt;li>VerticalUp&lt;/li>
&lt;li>Horizontal&lt;/li>
&lt;/ul></description></item><item><title>Docs: UniVRMサンプルをインストールする</title><link>https://vrm.dev/docs/univrm/install/univrm_install_samples/</link><pubDate>Wed, 02 Sep 2020 12:29:28 +0900</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_install_samples/</guid><description>
&lt;p>このセクションでは、&lt;a href="https://vrm.dev/docs/univrm/install/univrm_install/">UniVRMパッケージをインストール&lt;/a>したことを想定しています。&lt;/p>
&lt;h2 id="univrmサンプルのパッケージ">UniVRMサンプルのパッケージ&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>&lt;/p>
&lt;p>&lt;code>UniVRM-samples-0.XX.X_XXXX.unitypackage&lt;/code>&lt;/p>
&lt;p>です。&lt;/p>
&lt;h2 id="インポート">インポート&lt;/h2>
&lt;p>メニューから &lt;code>Assets -&amp;gt; Import Package -&amp;gt; Custom Package&lt;/code> で &lt;code>UniVRM-samples-0.XX.X_XXXX.unitypackage&lt;/code> を選択します。&lt;/p>
&lt;p>以下の画像ようにインポートウィンドウを見たら、&lt;code>Import&lt;/code>ボタンをクリックしてください：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/sample_package_import.jpg" alt="sample_package_import" width="300" />
&lt;h2 id="univrmサンプルのシーンを実行する">UniVRMサンプルのシーンを実行する&lt;/h2>
&lt;p>&lt;code>VRM.Samples&lt;/code>フォルダは&lt;code>Assets&lt;/code>にあります。プロジェクトウィンドウに&lt;code>SampleViewer&lt;/code>を選択します：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/sample_scene.jpg" alt="sample_scene" width="300" />
&lt;p>&lt;code>Game&lt;/code>タブをクリックして、&lt;code>SampleViewer&lt;/code>のインタフェースを表示させます：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/sample_viewer.jpg" alt="sample_viewer" width="500" />
&lt;p>&lt;code>Play&lt;/code>ボタンをクリックして&lt;code>SampleViewer&lt;/code>を有効になります。実行時に&lt;code>Open&lt;/code>ボタンをクリックしてVRMモデルをシーンにインポートします：&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/play_mode.jpg" alt="play_mode" width="150" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/sample_viewer_activate.jpg" alt="sample_viewer_activate" width="600" />
&lt;/p>
&lt;p>&lt;code>VRM.Samples&lt;/code>に&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM.Samples/Scripts/VRMRuntimeExporter.cs">ランタイムVRMエクスポート&lt;/a>と&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM.Samples/Scripts/VRMRuntimeLoader.cs">一人称レンダリング&lt;/a>のサンプルがあります。&lt;/p>
&lt;p>Aliciaモデルは&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Tests/Models/Alicia_vrm-0.51/AliciaSolid_vrm-0.51.vrm">こちら&lt;/a>。&lt;/p></description></item><item><title>Docs: VRMの動作を確認する</title><link>https://vrm.dev/how_to_make_vrm/vrm_behavior_confirmation/</link><pubDate>Wed, 26 Aug 2020 15:52:48 +0900</pubDate><guid>https://vrm.dev/how_to_make_vrm/vrm_behavior_confirmation/</guid><description>
&lt;p>このセクションでは、作成したVRMモデルをUnity上で再生し挙動を確認することを想定しています。&lt;/p>
&lt;h3 id="目の動きを確認する">目の動きを確認する&lt;/h3>
&lt;p>&lt;code>AnimationClip/AnimationController&lt;/code>をセットしたり、&lt;code>VRMLookAtHead&lt;/code>の&lt;code>Target&lt;/code>に&lt;a href="https://vrm.dev/docs/univrm/lookat/univrm_lookat/#target">GameObject&lt;/a>をセットしたり（視線がどこを向くかの設定）、&lt;code>Head&lt;/code>欄にヘッドコンポーネントを探したり、実際にUnity上で動作を確認します。モデルはプレイモードでターゲット位置を追跡します（たとえば、&lt;code>GameObject -&amp;gt; 3D Object -&amp;gt; Cube&lt;/code>からターゲットとしてキュ​​ーブをヒエラルキーに作成できます）。シーンに配置されたオブジェクトをドラッグして、モデルの目がリアルタイムでオブジェクトを追跡しているかどうかをテストできます。モデルのクローズアップフェイスは、インスペクターウィンドウで見れます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/LookAtTarget.png" alt="LookAtTarget" width="900" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/TargetTracking.png" alt="TargetTracking" width="500" />
&lt;/p>
&lt;h3 id="表情を確認する">表情を確認する&lt;/h3>
&lt;p>モデルの表情を確認するには、非常に簡単なテストスクリプト「AIUEO」と「Blinker」を用意しています。&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/#vrmblendshapeproxy">BlendShape&lt;/a>をセットアップした後、&lt;code>Add Component&lt;/code>から「AIUEO」を選んでセットすれば「あ」「い」「う」「え」「お」の口の形に順番に切り替わるアニメーションが、「Blinker」を選んでセットすれば定期的にまばたきのアニメーションが行われます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeProxy.png" alt="BlendShapeProxy" width="650" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>BlendShapeAvatar&lt;/code>フィールドにダブルクリックして、3Dモデルの表情を設定します&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/AddExpressionScripts.png" alt="AddExpressionScripts" width="650" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/InspectorFaceView.png" alt="InspectorFaceView" width="400" />
&lt;/p></description></item><item><title>Docs: Export Import</title><link>https://vrm.dev/docs/univrm/shaders/univrm_export_import/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_export_import/</guid><description>
&lt;h2 id="エクスポート">エクスポート&lt;/h2>
&lt;h3 id="gltf-レイヤー">GLTF レイヤー&lt;/h3>
&lt;p>gltf の &lt;code>/materials[]&lt;/code> に記録します。&lt;/p>
&lt;ul>
&lt;li>PBR(default)&lt;/li>
&lt;li>Unlit(KHR_materials_unlit extension)&lt;/li>
&lt;/ul>
&lt;p>の２種類のみをサポートしています。&lt;/p>
&lt;h4 id="詳細">詳細&lt;/h4>
&lt;p>&lt;code>standard&lt;/code> と見做して処理します。&lt;/p>
&lt;p>Unityマテリアルが以下の何れかのシェーダーである場合に、
&lt;code>KHR_materials_unlit&lt;/code> extension を追加します。&lt;/p>
&lt;ul>
&lt;li>Unlit/Color(Unity標準)&lt;/li>
&lt;li>Unlit/Texture(Unity標準)&lt;/li>
&lt;li>Unlit/Transparent(Unity標準)&lt;/li>
&lt;li>Unlit/Transparent Cutout(Unity標準)&lt;/li>
&lt;li>UniGLTF/UniUnlit(UniVRM)&lt;/li>
&lt;li>VRM/UnlitTexture(UniVRM)&lt;/li>
&lt;li>VRM/UnlitTransparent(UniVRM)&lt;/li>
&lt;li>VRM/UnlitCutout(UniVRM)&lt;/li>
&lt;/ul>
&lt;h3 id="vrm-レイヤー">VRM レイヤー&lt;/h3>
&lt;p>gltf の &lt;code>/extensions/VRM/materialProperties[]&lt;/code> に記録します。&lt;/p>
&lt;ul>
&lt;li>VRM/UnlitTransparentZWrite&lt;/li>
&lt;li>VRM/MToon&lt;/li>
&lt;/ul>
&lt;p>以外の時は、 &lt;code>shaderName&lt;/code> に &lt;code>VRM_USE_GLTFSHADER&lt;/code> が記録されて、 &lt;code>unknown shader&lt;/code> として GLTF 処理されます。&lt;/p>
&lt;h2 id="インポート">インポート&lt;/h2>
&lt;h3 id="gltf-レイヤー-1">GLTF レイヤー&lt;/h3>
&lt;p>GLTFの &lt;code>/materials[]&lt;/code> からUnityマテリアルを作成します。
&lt;code>KHR_materials_unlit&lt;/code> extension を発見した場合に、&lt;/p>
&lt;ul>
&lt;li>UniGLTF/UniUnlit&lt;/li>
&lt;/ul>
&lt;p>でマテリアルを作成します。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/#uniunlit">UniUnlit&lt;/a>&lt;/p>
&lt;h3 id="vrm-レイヤー-1">VRM レイヤー&lt;/h3>
&lt;p>GLTFの &lt;code>/extensions/VRM/materialProperties[]&lt;/code> からUnityマテリアルを作成します。
&lt;code>shaderName&lt;/code> が &lt;code>VRM_USE_GLTFSHADER&lt;/code> の場合は、 &lt;code>/materials[]&lt;/code> に記録されている情報を使って &lt;code>GLTF&lt;/code> の &lt;code>PBR&lt;/code> か &lt;code>Unlit&lt;/code> として処理します。&lt;/p>
&lt;h2 id="エクスポートしてインポートしたときのシェーダーの変化">エクスポートしてインポートしたときのシェーダーの変化&lt;/h2>
&lt;p>エクスポートしてからインポートすると元と違うシェーダーになる場合があります。&lt;/p>
&lt;ul>
&lt;li>サポート外のシェーダーの場合。 &lt;code>Standard&lt;/code> になります。GLTF のデフォルトが &lt;code>PBR&lt;/code> で、それに対応するのが &lt;code>Standard&lt;/code> です。&lt;/li>
&lt;li>unlit 系の場合。 &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">UniGLTF/UniUnlit&lt;/a> になります。正常な動作です。&lt;/li>
&lt;/ul>
&lt;h2 id="vrm_use_gltfshader">VRM_USE_GLTFSHADER&lt;/h2>
&lt;p>&lt;code>/extensions/VRM/materialProperties[]&lt;/code>&lt;/p>
&lt;p>に記録した情報を使ってすべてのシェーダーを読みこめます。&lt;/p>
&lt;ul>
&lt;li>Runtimeは問題ない&lt;/li>
&lt;li>EditorはインスペクターをアクティブにしたタイミングでGUIに値が変更されたりして個別の対応が必要な場合があり完全ではない&lt;/li>
&lt;/ul>
&lt;p>ただし、この機能は&lt;/p>
&lt;ul>
&lt;li>VRM/UnlitTransparentZWrite&lt;/li>
&lt;li>VRM/MToon&lt;/li>
&lt;/ul>
&lt;p>以外では &lt;code>VRM_USE_GLTFSHADER&lt;/code> で無効になるように封じています(v0.44くらい)。実質 MToon 専用です。
VRMがサポートするシェーダーは、 &lt;code>PBR(Standard)&lt;/code>, &lt;code>Unlit&lt;/code>, &lt;code>MToon&lt;/code> の３種類です。&lt;/p>
&lt;blockquote>
&lt;p>歴史的経緯で &lt;code>UnlitTransparentZWrite&lt;/code> が存在していますが、整理予定です。 &lt;code>MToon&lt;/code> の &lt;code>ZWrite&lt;/code> 機能を使ってください&lt;/p>
&lt;/blockquote>
&lt;p>以前にエクスポートするなどして &lt;code>VRM_USE_GLTFSHADER&lt;/code> を回避していればロード出来る場合があります。
最初は、&lt;code>VRM&lt;/code> と無関係に Unity のマテリアルを読み書きする機能だった名残です。&lt;/p></description></item><item><title>Docs: VRMファイルが使えるアプリケーションは？</title><link>https://vrm.dev/vrm_applications/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/vrm_applications/</guid><description>
&lt;h2 id="3dキャラクターのプラットフォーム">3Dキャラクターのプラットフォーム&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://seed.online/">ザ・シードオンライン&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://3d.nicovideo.jp/">ニコニ立体&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.vroid.com/">VRoid Hub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://connect.vrlab.dmm.com/">DMM VR CONNECT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cryptoavatars.io/home">CryptoAvatars&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="プラグイン">プラグイン&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM">UniVRM&lt;/a>&lt;/td>
&lt;td>Unityエディタ拡張, Unityライブラリ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/saturday06/VRM_Addon_for_Blender">VRM Add-on for Blender&lt;/a>&lt;/td>
&lt;td>Blenderアドオン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/ruyo/VRM4U">VRM4U&lt;/a>&lt;/td>
&lt;td>UnrealEngineプラグイン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/kashikacojp/glTF-Maya-Exporter">glTF-Maya-Exporter&lt;/a>&lt;/td>
&lt;td>Mayaスクリプト&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://pokemori.booth.pm/items/1025226">VRM Converter for VRChat&lt;/a>&lt;/td>
&lt;td>Unityエディタ拡張&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://pokemori.booth.pm/items/1788660">UniVRMExtensions&lt;/a>&lt;/td>
&lt;td>Unityエディタ拡張&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="キャラメイクツール">キャラメイクツール&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://vroid.com/studio/">VRoid Studio&lt;/a>&lt;/td>
&lt;td>Windows, macOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://vroid.com/mobile/">VRoid Mobile&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://fantia.jp/fanclubs/10552">セシル変身アプリ&lt;/a>&lt;/td>
&lt;td>Windows, macOS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="配信ツール">配信ツール&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://sites.google.com/view/vdraw/">VDRAW&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://campaign.showroom-live.com/showroom-v/">SHOWROOM V&lt;/a>&lt;/td>
&lt;td>iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://sites.google.com/site/vhitogata/">Hitogata&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://3tene.com/">3tene&lt;/a>&lt;/td>
&lt;td>Windows, macOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/870820/Wakaru_ver_beta/">Wakaru&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://sh-akira.github.io/VirtualMotionCapture/">バーチャルモーションキャプチャー&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://facevtuber.com/">FaceVTuber&lt;/a>&lt;/td>
&lt;td>Google Chrome&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/m2wasabi/LiveAvatar">LiveAvatar&lt;/a>&lt;/td>
&lt;td>HTC VIVE&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://luppet.appspot.com/">Luppet&lt;/a>&lt;/td>
&lt;td>Windows + Leap Motion&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://apps.apple.com/jp/app/vear/id1490697369">vear&lt;/a>&lt;/td>
&lt;td>iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/xelloss120/CharWebCam">CharWebCam&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://malaybaku.github.io/VMagicMirror/">VMagicMirror&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://2dr.info/">2DR&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/1207050/VUPVTuber_Maker_Animation_MMDLive2D__facial_capture/">VUP-VTuber&lt;/a>&lt;/td>
&lt;td>Windows 10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.next-system.com/michicon">ミチコンPlus&lt;/a>&lt;/td>
&lt;td>iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://vovola.wixsite.com/website">VOVOLA&lt;/a>&lt;/td>
&lt;td>Windows 10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.vseeface.icu/">VSeeFace&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://halmin.wixsite.com/zz3d">ZZ3D&lt;/a>&lt;/td>
&lt;td>iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://liv.tv/">LIV&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="モーションキャプチャ">モーションキャプチャ&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Application&lt;/th>
&lt;th>Platform&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="http://deatrathias.net/TW/">TRACKING WORLD&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://booth.pm/ja/items/1779185">waidayo&lt;/a>&lt;/td>
&lt;td>PC, iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/digital-standard/ThreeDPoseTracker">ThreeDPoseTracker&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://digital-standard.com/tdpt_lp/">TDPT&lt;/a>&lt;/td>
&lt;td>iOS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="アニメーション">アニメーション&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Application&lt;/th>
&lt;th>Platform&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://lsengine.net/">Ls ENGINE&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/t-takasaka/AI4Animation/tree/master/AI4Animation/Assets/Demo/ARKit">AI4Animation&lt;/a>&lt;/td>
&lt;td>Unityライブラリ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://booth.pm/ja/items/2216222">Dance Dance Maker!&lt;/a>&lt;/td>
&lt;td>Oculus Quest&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="撮影">撮影&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Application&lt;/th>
&lt;th>Platform&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://120byte.booth.pm/items/1099618">VRMお人形遊び&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://120byte.booth.pm/items/1654585">VRMお人形遊びPC版&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://app.famitsu.com/gametitle/8356/">Vタビ&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://vismuth.com/">Vismuth&lt;/a>&lt;/td>
&lt;td>Android, iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bnut.jp/vstamp">Vスタンプ&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://matsuvr.booth.pm/items/2223918">VRM Automatic Photographing&lt;/a>&lt;/td>
&lt;td>Windows 10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://booth.pm/ja/items/1808860">VRMCardMaker&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://apps.apple.com/jp/app/pose-arch/id1483326327">Pose Arc‪h&lt;/a>&lt;/td>
&lt;td>iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://cocop.site/cocopstudio/">COCOPStudio&lt;/a>&lt;/td>
&lt;td>Android, iOS, Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://booth.pm/ja/items/2495794">Emmv Studio&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://ayato3d.booth.pm/items/2202577">PaSha!&lt;/a>&lt;/td>
&lt;td>Windows 10&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="メタバース">メタバース&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://virtualcast.jp/">バーチャルキャスト&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://cluster.mu/">cluster&lt;/a>&lt;/td>
&lt;td>PCVR, Windows, macOS, iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://biscrat.booth.pm/items/1193414">Clarie&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://exokit.org/">Exokit&lt;/a>&lt;/td>
&lt;td>Windows, macOS, Linux, VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://teco-vr.com/">TECO&lt;/a>&lt;/td>
&lt;td>Windows, macOS, Oculus&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://brother-pv.booth.pm/items/2016717">コラボル&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://webaverse.com/">Webaverse&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://ambr.co.jp/">ambr&lt;/a>&lt;/td>
&lt;td>Windows VR, macOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/1424930/Connect_Chat/">Connect Chat&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://facevtuber.com/vzero/">VZero&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ゲームなど">ゲームなど&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://naby.booth.pm/items/990663">Vワールド&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://wandv.jp/seiya/">SEIYA&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://orenodinner.booth.pm/items/952450">BONFIRE~焚き火~&lt;/a>&lt;/td>
&lt;td>Oculus Go&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/867090/VR__TSUNTSUN_VR/">つんつんVR&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.mediaplex.co.jp/korokoro/">コロコロシステム&lt;/a>&lt;/td>
&lt;td>Oculus Rift&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://n-mattun.booth.pm/">パイロットクロス&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://ootamato.itch.io/primitier">プリミティア&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://lasmi.booth.pm/items/1615146">Action Drill&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/885000/Synth_Riders/">Synth Riders&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/1144460/SOUNDART/">SOUNDART&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://rc-cobalt.booth.pm/items/1756359">VRAST!&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://bowman.vrlab.dmm.com/ja/">BOW MAN&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/1307550/Craftopia/">Craftopia&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/1366570/RESONARK_X/">RESONARK X&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://rakugaki-kingdom.com/">ラクキン&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://booth.pm/ja/items/1293100">FantasySeed&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://fujisunflower.booth.pm/items/2510498">Roduet&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://simplestar-game.booth.pm/items/2622434">Cube Art World&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://booth.pm/ja/items/2349960">TouroReminiscence&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://ktamayan.booth.pm/items/2790105">VRM Cyber walk&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="ブラウザゲーム">ブラウザゲーム&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/bakuretsu">あけろ！爆裂駐車場！&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/hyperdimension-virtual-super-extreme-vrm-soccer">スーパーエクストリームVRMサッカー&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/mitsussion">密ッションインポッシブル&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/aguroshoutest">スーパーVRMブラザーズ3D&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/paseup">ペースアップ！&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/vrm_bike">二輪VRM&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/vrmtriplejump">VRM三段跳び&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://unityroom.com/games/step-panel-match">(超)STEP PANEL MATCH&lt;/a>&lt;/td>
&lt;td>Web browser&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ビューア">ビューア&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/virtual-cast/babylon-vrm-loader/">Babylon VRM Viewer&lt;/a>&lt;/td>
&lt;td>Babylon.js拡張&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/pixiv/three-vrm/">Three-VRM&lt;/a>&lt;/td>
&lt;td>three.js拡張&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://booooooh.booth.pm/items/1033823">VPocket&lt;/a>&lt;/td>
&lt;td>Android, iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://w.atwiki.jp/beamman/">VRMビュアー&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://vrm-viewer.yukimochi.io/">VRM Viewer&lt;/a>&lt;/td>
&lt;td>Webブラウザ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/magicien/VRMQuickLook">VRMQuickLook&lt;/a>&lt;/td>
&lt;td>macOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://fantom1x.blog130.fc2.com/blog-entry-309.html">VRM Live Viewer&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/kirurobo/UniWinApi">UniWinApi Example project&lt;/a>&lt;/td>
&lt;td>Unityライブラリ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/m2wasabi/KinectV2VRM">KinectV2VRM&lt;/a>&lt;/td>
&lt;td>Unityライブラリ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.vrai.jp/vr_mocuvrm.html">MocuMocuVRM&lt;/a>&lt;/td>
&lt;td>Windows VR, Looking Glass&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://akarimichi.github.io/vrm-display-releases/">VRM Display&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/1096550/Desktop_Magic_Engine/">Desktop Magic Engine&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="その他のvrm対応アプリ">その他のVRM対応アプリ&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/m2wasabi/VRMLoaderUI">VRMLoaderUI&lt;/a>&lt;/td>
&lt;td>Unityライブラリ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://teator.jp/">テアトル&lt;/a>&lt;/td>
&lt;td>Windows 10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://neoseast-japan.booth.pm/items/2562276">NeoRoidHub for Unity&lt;/a>&lt;/td>
&lt;td>Unityエディタ拡張&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://eyesout.itch.io/virtual-presentation-space">Virtual Presentation Space&lt;/a>&lt;/td>
&lt;td>Windows VR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.steampowered.com/app/1454500/VTuber_Editor/">VTuber Editor&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://riemgoshawk.booth.pm/items/1990160">ACUAH β&lt;/a>&lt;/td>
&lt;td>Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://melonspeedruns.itch.io/tifa">TIFA&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://styly.cc/">STYLY&lt;/a>&lt;/td>
&lt;td>Windows, Windows VR, Android, iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://kuniyan.booth.pm/items/2437978">[HANA] BlendShapeをコントロールするツール&lt;/a>&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="内部的にvrmを活用しているサービス">内部的にVRMを活用しているサービス&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>アプリケーション&lt;/th>
&lt;th>プラットフォーム&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="http://vkatsu.jp/">Vカツ&lt;/a>&lt;/td>
&lt;td>Windows, iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://customcast.jp/">カスタムキャスト&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://reality.wrightflyer.net/">REALITY&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.puppemoji.com/">パペ文字&lt;/a>&lt;/td>
&lt;td>iOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://materializer.co/lab/mayalive">メイアライブオーダーメイド版&lt;/a>&lt;/td>
&lt;td>Windows, macOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://gugenka.jp/digital/make_avatar.php">MakeAvatar&lt;/a>&lt;/td>
&lt;td>iOS, Android&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: UniVRMの座標系変換について</title><link>https://vrm.dev/docs/univrm/programming/univrm_coordinate/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/programming/univrm_coordinate/</guid><description>
&lt;p>UniVRMは、インポート・エクスポート時に自動でGLTFとの座標変換を実行しています。&lt;/p>
&lt;h2 id="vrmの座標系">VRMの座標系&lt;/h2>
&lt;p>VRMはGLTFの拡張なので、GLTFの座標系に準拠します。
OpenGL標準の右手系Y-UP座標系です。&lt;/p>
&lt;ul>
&lt;li>右:X+&lt;/li>
&lt;li>上:Y+&lt;/li>
&lt;li>前:Z-&lt;/li>
&lt;/ul>
&lt;h2 id="unityの座標系">Unityの座標系&lt;/h2>
&lt;p>左手系Y-UP座標系です。&lt;/p>
&lt;ul>
&lt;li>右:X+&lt;/li>
&lt;li>上:Y+&lt;/li>
&lt;li>前:Z+(+-が反転)&lt;/li>
&lt;/ul>
&lt;h2 id="各値の変換">各値の変換&lt;/h2>
&lt;p>Z軸を反転します。&lt;/p>
&lt;h3 id="vector3position-normalなど">Vector3(Position, Normalなど)&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> Vector3 ReverseZ(&lt;span style="color:#069;font-weight:bold">this&lt;/span> Vector3 v)
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">new&lt;/span> Vector3(v.x, v.y, -v.z);
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="quaternionrotation">Quaternion(Rotation)&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> Quaternion ReverseZ(&lt;span style="color:#069;font-weight:bold">this&lt;/span> Quaternion q)
{
&lt;span style="color:#078;font-weight:bold">float&lt;/span> angle;
Vector3 axis;
q.ToAngleAxis(&lt;span style="color:#069;font-weight:bold">out&lt;/span> angle, &lt;span style="color:#069;font-weight:bold">out&lt;/span> axis);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> Quaternion.AngleAxis(-angle, ReverseZ(axis));
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="matrixbindmatrices">Matrix(BindMatrices)&lt;/h3>
&lt;p>スケール値が入っているとうまくいきません&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> Matrix4x4 ReverseZ(&lt;span style="color:#069;font-weight:bold">this&lt;/span> Matrix4x4 m)
{
&lt;span style="color:#099">#if UNITY_2017_1_OR_NEWER
&lt;/span>&lt;span style="color:#099">&lt;/span> m.SetTRS(m.GetColumn(&lt;span style="color:#f60">3&lt;/span>).ReverseZ(), m.rotation.ReverseZ(), Vector3.one);
&lt;span style="color:#099">#else
&lt;/span>&lt;span style="color:#099">&lt;/span> m.SetTRS(m.ExtractPosition().ReverseZ(), m.ExtractRotation().ReverseZ(), Vector3.one);
&lt;span style="color:#099">#endif
&lt;/span>&lt;span style="color:#099">&lt;/span> &lt;span style="color:#069;font-weight:bold">return&lt;/span> m;
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: アニメーション</title><link>https://vrm.dev/docs/univrm/gltf/animation_exporter/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/animation_exporter/</guid><description>
&lt;p>GLTF は、Animation の定義があります。&lt;/p>
&lt;blockquote>
&lt;p>VRM は、Animation を使わないという仕様です&lt;/p>
&lt;/blockquote>
&lt;h3 id="対応バージョン">対応バージョン&lt;/h3>
&lt;ul>
&lt;li>v0.44&lt;/li>
&lt;/ul>
&lt;h3 id="対応状況">対応状況&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">KeyName&lt;/th>
&lt;th align="center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">TranslationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">RotationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ScaleKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">BlendShapeKey&lt;/td>
&lt;td align="center">×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="animatorをエクスポートする場合">Animatorをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimatorコンポーネントを追加&lt;/li>
&lt;li>AnimatorControllerを作成し、それをAnimatorのController項目に設定&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>このクリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="animationをエクスポートする場合">Animationをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimationコンポーネントを追加&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>Inspectorの設定をDebugモードにしてAnimationClipのLegacyフラグをONにする&lt;br>
&lt;img src="https://vrm.dev/images/wiki/LegacyClip.png" alt="Interpolation">&lt;/li>
&lt;li>AnimationコンポーネントのAnimation項目に作成したAnimationClipを設定&lt;/li>
&lt;li>クリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="注意事項">注意事項&lt;/h3>
&lt;ol>
&lt;li>RotationKeyのInterpolation設定をQuaternionかまたはEulerAngles(Quaternion)にすること&lt;br>
&lt;img src="https://vrm.dev/images/wiki/Interpolation.png" alt="Interpolation">&lt;/li>
&lt;li>Animatorの場合は設定されている全てのClipを検索して書き出しをしているが、ステートの状態などは出力されない&lt;/li>
&lt;li>Animator経由だと複数のアニメーションが書き込まれるが、UniGLTFのImporterが読み込むのは最初の１つだけ(UniGLTF-1.25時点）&lt;/li>
&lt;/ol></description></item><item><title>Docs: UniVRMをアンインストールする</title><link>https://vrm.dev/docs/univrm/install/univrm_uninstall/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_uninstall/</guid><description>
&lt;p>以下のフォルダを削除してください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>folder&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Assets/VRM&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/UniGLTF&lt;/td>
&lt;td>v0.63.0以降&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/VRMShaders&lt;/td>
&lt;td>v0.56.0以降&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/MeshUtility&lt;/td>
&lt;td>v0.59.0以降～v0.63.0&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>folder&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Assets/VRM.Samples&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-samples-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/StreamingAssets/VRM.Samples&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-samples-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>UniVRMのバージョンを更新する前に一度上記を削除する方が安全です。&lt;/p>
&lt;ul>
&lt;li>バージョン間でファイルが移動していた場合に、元の場所で上書きされて不整合を起こす場合があります。&lt;/li>
&lt;/ul></description></item><item><title>Docs: VRMFirstPersonの使い方</title><link>https://vrm.dev/docs/univrm/programming/univrm_use_firstperson/</link><pubDate>Tue, 29 May 2018 10:00:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/programming/univrm_use_firstperson/</guid><description>
&lt;h1 id="vrmfirstpersonの設定">VRMFirstPersonの設定&lt;/h1>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/">VRMFirstPerson&lt;/a>ではRendererに対して設定があります。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>FirstPersonFlag&lt;/th>
&lt;th>レイヤー&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Both&lt;/td>
&lt;td>default&lt;/td>
&lt;td>一人称と三人称で分ける必要のない部分に指定します&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ThirdPersonOnly&lt;/td>
&lt;td>VRMThirdPersonOnly&lt;/td>
&lt;td>一人称時に描画したくない部分に指定します&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FirstPersonOnly&lt;/td>
&lt;td>VRMFirstPersonOnly&lt;/td>
&lt;td>三人称時に描画したくない部分に指定します。自動作成した頭部無しモデルが使います&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Auto&lt;/td>
&lt;td>VRMThirdPersonOnly&lt;/td>
&lt;td>実行時に一人称用モデルを自動で作成し、それをFIRSTPERSON_ONLY_LAYERに設定します&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>実行時に&lt;strong>VRMFirstPerson.Setup&lt;/strong>を呼び出すことで、上記のレイヤー設定を行うことができます。明示的に外部から呼び出してください。&lt;/p>
&lt;h1 id="アプリケーションに追加の描画レイヤーを指定する">アプリケーションに追加の描画レイヤーを指定する&lt;/h1>
&lt;p>定数で以下のレイヤーを定義しています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">VRMFirstPerson&lt;/span> : MonoBehaviour
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">int&lt;/span> FIRSTPERSON_ONLY_LAYER = &lt;span style="color:#f60">9&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">int&lt;/span> THIRDPERSON_ONLY_LAYER = &lt;span style="color:#f60">10&lt;/span>;
&lt;span style="color:#09f;font-style:italic">// 省略
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/layer_setting.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>9番と１０番にLayerを設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="実行時にsetupを呼び出してカメラにlayermaskを設定する">実行時にSetupを呼び出して、カメラにLayerMaskを設定する&lt;/h1>
&lt;ul>
&lt;li>VRMFirstPerson.Setupの呼び出し&lt;/li>
&lt;li>一人称カメラとその他のカメラに対してLayerMask&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Collections&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Collections.Generic&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">VRM&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">SetupExample&lt;/span> : MonoBehaviour
{
&lt;span style="color:#309"> [SerializeField]&lt;/span>
Camera m_firstPersonCamera; &lt;span style="color:#09f;font-style:italic">// HMDのカメラ
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [SerializeField]&lt;/span>
LayerMask m_firstPersonMask; &lt;span style="color:#09f;font-style:italic">// HMDのカメラにセットするマスク default | VRMFirstPersonOnly など
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [SerializeField]&lt;/span>
LayerMask m_otherMask; &lt;span style="color:#09f;font-style:italic">// HMDのカメラにセットするマスク default | VRMThirdPersonOnly など
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [SerializeField]&lt;/span>
VRMFirstPerson m_firstPerson;
&lt;span style="color:#069;font-weight:bold">void&lt;/span> Reset()
{
m_firstPerson = GameObject.FindObjectOfType&amp;lt;VRMFirstPerson&amp;gt;();
}
&lt;span style="color:#069;font-weight:bold">void&lt;/span> Start()
{
&lt;span style="color:#069;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> camera &lt;span style="color:#069;font-weight:bold">in&lt;/span> GameObject.FindObjectsOfType&amp;lt;Camera&amp;gt;())
{
camera.cullingMask = (camera == m_firstPersonCamera)
? m_firstPersonMask
: m_otherMask
;
}
&lt;span style="color:#09f;font-style:italic">// VRMFirstPersonの初期化
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span> (m_firstPerson != &lt;span style="color:#069;font-weight:bold">null&lt;/span>)
{
m_firstPerson.Setup();
}
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: VRMファイルに設定できるライセンスデータ</title><link>https://vrm.dev/docs/vrm/vrm_meta/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/vrm/vrm_meta/</guid><description>
&lt;p>VRMは複数アプリケーション間で相互利用されることが想定される、VR時代の3Dアバターフォーマットです。たとえば「ネットワークに相互接続されたアバターによるVRコミュニケーション」を考えた場合、 &lt;strong>自分のアバターデータを「他の人から自分の姿が見えるように」他のユーザへ送信する&lt;/strong> 、ということも行われることになります。
この場合、従来の考え方に基づく「再配布」規定だけでは対応できない場面が考えられます。そのため、VRMでは&lt;/p>
&lt;ul>
&lt;li>モデルデータ自体に対しての改変・再配布規定（Creative Commonsなどから設定可能）&lt;/li>
&lt;/ul>
&lt;p>のほかに&lt;/p>
&lt;ul>
&lt;li>モデルデータを使用して「人格を演じる」ことについての許諾規定&lt;/li>
&lt;/ul>
&lt;p>を &lt;strong>ファイルに設定できる&lt;/strong> など、VR時代を想定したフォーマットとなっています。&lt;/p>
&lt;h3 id="アバターの人格に関する許諾範囲personation--characterization-permission">アバターの人格に関する許諾範囲(Personation / Characterization Permission)&lt;/h3>
&lt;h4 id="アバターに人格を与えることの許諾範囲a-person-who-can-perform-with-this-avatar">アバターに人格を与えることの許諾範囲(A person who can perform with this avatar)&lt;/h4>
&lt;ul>
&lt;li>アバターを操作することはアバター作者にのみ許される(The avatar may only be manipulated by its creator)&lt;/li>
&lt;li>明確に許可された人限定(Authorized only to explicitly specified person)&lt;/li>
&lt;li>全員に許可(Authorized to anyone)&lt;/li>
&lt;/ul>
&lt;h4 id="このアバターを用いて暴力表現を演じることの許可permission-to-perform-violent-acts-with-this-avatar">このアバターを用いて暴力表現を演じることの許可(Permission to perform violent acts with this avatar)&lt;/h4>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h4 id="このアバターを用いて性的表現を演じることの許可permission-to-perform-sexual-acts-with-this-avatar">このアバターを用いて性的表現を演じることの許可(Permission to perform sexual acts with this avatar)&lt;/h4>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h4 id="商用利用の許可for-commercial-use">商用利用の許可(For commercial use)&lt;/h4>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h4 id="その他のライセンス条件other-license-url">その他のライセンス条件(Other License Url)&lt;/h4>
&lt;p>上記許諾条件以外のライセンス条件がある場合はそのライセンス文書へのURLを記述&lt;/p>
&lt;h3 id="再配布改変に関する許諾範囲redistribution--modifications-license">再配布・改変に関する許諾範囲(Redistribution / Modifications License)&lt;/h3>
&lt;h4 id="ライセンスタイプlicense-type">ライセンスタイプ(License Type)&lt;/h4>
&lt;ul>
&lt;li>再配布禁止(Redistribution Prohibited)&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/publicdomain/zero/1.0/deed.ja">著作権放棄(CC0)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by/4.0/deed.ja">Creative Commons CC BYライセンス(CC_BY)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/deed.ja">Creative Commons CC BY NCライセンス(CC_BY_NC)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.ja">Creative Commons CC BY SAライセンス(CC_BY_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.ja">Creative Commons CC BY NC SAライセンス(CC_BY_NC_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nd/4.0/deed.ja">Creative Commons CC BY NDライセンス(CC_BY_ND)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja">Creative Commons CC BY NC NDライセンス(CC_BY_NC_ND)&lt;/a>&lt;/li>
&lt;li>その他(Other)&lt;/li>
&lt;/ul>
&lt;h4 id="その他ライセンス条件other-license-url">その他ライセンス条件(Other License Url)&lt;/h4>
&lt;p>上記許諾条件以外のライセンス条件がある場合はそのライセンス文書へのURLを記述&lt;/p></description></item><item><title>Docs: VRMSpringBone</title><link>https://vrm.dev/docs/univrm/springbone/univrm_secondary/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/springbone/univrm_secondary/</guid><description>
&lt;p>揺れモノ設定。&lt;/p>
&lt;h1 id="コンポーネントのアタッチされるノード">コンポーネントのアタッチされるノード&lt;/h1>
&lt;p>VRMをインポートしたとき、揺れモノ関連のコンポーネントは以下のようにアタッチされます。&lt;/p>
&lt;ul>
&lt;li>VRMSpringBoneは、名前が&lt;code>secondary&lt;/code>のノードが自動的に作成されてそこにアタッチされます。&lt;/li>
&lt;li>VRMSpringBoneColliderGroupは、エクスポート時にアタッチされていたノードに復旧されます。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMSpringBoneが見つからない場合には&lt;code>secondary&lt;/code>ノードをご確認ください。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="vrmspringbone">VRMSpringBone&lt;/h1>
&lt;p>尻尾、髪の毛、衣装などで動きに合わせて揺れて欲しいものの設定です。
揺らしたいオブジェクトの一番親のGameObjectをRootBonesにセットしてください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMSpringBone.png" alt="lookat" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>RootBonesに髪の毛とリボンを設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>これだけで、指定したボーンが動きに合わせて揺れます。&lt;/p>
&lt;h1 id="オプションvrmspringbonecollidergroup当たり判定">[オプション]VRMSpringBoneColliderGroup(当たり判定)&lt;/h1>
&lt;p>揺れモノが特定の部位を貫通しないように、当たり判定を入れることができます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/collider.png" alt="collider" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>headに頭に当たり判定(VRMSpringBoneColliderGroup)を設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>当たり判定を入れたいボーンにVRMSpringBoneColliderGroupをアタッチして、VRMSpringBoneのColliderGroupsにセットしてください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/set_collider.png" alt="set_collider" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>headにVRMSpringBoneColliderGroupをアタッチして、VRMSpringBoneのCollierGroupsに設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/spring_gizmo.png" alt="gizmo" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>動作時のGizmo。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ひとつのvrmspringbonecollidergroupに複数の当たり判定を設定できます">ひとつのVRMSpringBoneColliderGroupに複数の当たり判定を設定できます&lt;/h2>
&lt;p>VRMSpringBoneColliderGroupには最初からひとつの球が設定されますが、複数の球をセットすることができます。&lt;/p>
&lt;h1 id="設定したvrmspringboneが居なくなった">設定したVRMSpringBoneが居なくなった&lt;/h1>
&lt;p>VRMSpringBoneはインポート時に&lt;code>secondary&lt;/code>ノードにアタッチされます。
エクスポート時と違う場所に現れるのでご注意ください。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/springbone/univrm_secondary/#コンポーネントのアタッチされるノード">VRMSpringBone&lt;/a>&lt;/p></description></item><item><title>Docs: Mesh Utility</title><link>https://vrm.dev/docs/univrm/gltf/mesh_utility/</link><pubDate>Wed, 21 Apr 2021 16:09:47 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/mesh_utility/</guid><description>
&lt;h1 id="meshutility">MeshUtility&lt;/h1>
&lt;p>&lt;code>MeshUtility&lt;/code>はメッシュ処理のツールです。&lt;br>
現在利用可能な機能： &lt;code>MeshSeparator&lt;/code>、&lt;code>MeshIntegrator&lt;/code>、&lt;code>StaticMeshIntegrator&lt;/code>と&lt;code>BoneMeshEraser&lt;/code>。&lt;/p>
&lt;h2 id="使用例">使用例&lt;/h2>
&lt;p>ここでは、&lt;code>MeshSeparator&lt;/code>の使い方を紹介していきます。他の機能の使い方は大体同じです。&lt;br>
&lt;code>MeshSeparator&lt;/code>が適用されると、BlendShapeを含むメッシュは分割されます。
先ず、ヒエラルキーにモデルのGameObjectを選択します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp1.jpg" width="200" />
&lt;hr>
&lt;p>または、GameObjectを&lt;code>TargetObject&lt;/code>フィールドにドラッグ＆ドロップします。&lt;br>
メッシュ処理のウィンドウを表示するため、メニューから&lt;code>UniGLTF&lt;/code> -&amp;gt; &lt;code>MeshUtility&lt;/code> -&amp;gt; &lt;code>MeshProcessing Wizard&lt;/code>をクリックしてください：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_ja_exp2.jpg" width="800" />
&lt;hr>
&lt;p>&lt;code>Process&lt;/code>ボタンをクリックすると、処理したモデルのGameObjectを生成されます。このGameObjectを選択してエクスポータします（&lt;code>VRM0&lt;/code> -&amp;gt; &lt;code>Export UniVRM-0.xx&lt;/code>）。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp3.jpg" width="300" />
&lt;hr>
&lt;p>分割されたメッシュも&lt;code>Assets&lt;/code>フォルダーに保存されます。&lt;br>
この例では、モデルのメッシュは顔と体の2つの部分に分割された。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">顔: BlendShapeを含む 　&lt;/th>
&lt;th align="center">体: BlendShapeを含まない&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_1.jpg" width="200" />
&lt;/td>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_2.jpg" width="200" />
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="meshseparator">MeshSeparator&lt;/h3>
&lt;p>BlendShapeを含むメッシュは分割されます。BlendShapeのサイズを削減できます。&lt;/p>
&lt;h3 id="meshintegrator">MeshIntegrator&lt;/h3>
&lt;p>Prefab GameObjectのすべてのメッシュを統合します。BlendShapeを含むメッシュは独立して統合されます。&lt;/p>
&lt;h3 id="staticmeshintegrator">StaticMeshIntegrator&lt;/h3>
&lt;p>Prefab GameObjectのすべての静的メッシュを一つに統合します。&lt;/p>
&lt;h3 id="bonemesheraser">BoneMeshEraser&lt;/h3>
&lt;p>ボーン（Erase Rootのヒエラルキー）に関連するメッシュを削除します。&lt;/p></description></item><item><title>Docs: VRMで開発する</title><link>https://vrm.dev/docs/vrm/vrm_development/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/vrm/vrm_development/</guid><description>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/programming/">programming&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/install/univrm_install_samples/">samples&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="vrmの特徴開発者的な視点">VRMの特徴(開発者的な視点)&lt;/h2>
&lt;ul>
&lt;li>右手系Y-UPである ➡️ &lt;a href="https://vrm.dev/docs/univrm/programming/univrm_coordinate/">Coordinate&lt;/a>&lt;/li>
&lt;li>メートル単位である ➡️ 1が、1メートルなのか、1cmなのか心配がありません&lt;/li>
&lt;li>人型モデルでありボーン構成が決まっている ➡️ 汎用の人型モーションやモーションキャプチャーが使いやすい&lt;/li>
&lt;li>初期姿勢が決まっている(Z-向きのT-Pose) ➡️ TPS的な用途でそのまま使えます&lt;/li>
&lt;li>初期姿勢で回転・スケールが無いことが保証されている ➡️ 初期姿勢を加味したコードを書く負担が軽減できます&lt;/li>
&lt;li>初期姿勢でボーンとMeshが重なることが保証されている(スキニングのBind行列に移動しか含まれていない) ➡️ Meshを加工する前にBakeするなどの負担が軽減できます&lt;/li>
&lt;li>表情・視線操作が統一されている ➡️ &lt;a href="https://vrm.dev/docs/univrm/programming/univrm_use_blendshape/">BlendShapeProxy&lt;/a>&lt;/li>
&lt;li>物理でない揺れものがセットアップ済み ➡️ 物理と干渉せずに揺れるのでゲームのギミックと干渉したり、暴れたりしません&lt;/li>
&lt;li>VRの設定が含まれている ➡️ &lt;a href="https://vrm.dev/docs/univrm/programming/univrm_use_firstperson/">FirstPerson&lt;/a>&lt;/li>
&lt;li>ライセンス情報が定義されている ➡️ モデルの持ち主の意思にそぐわない使用を回避できます&lt;/li>
&lt;/ul>
&lt;p>従来のゲーム開発のようにプロジェクトにアセットとして作り込むというよりは、
ランタイムにロードして動かす、という用途が想定されます。&lt;/p>
&lt;h2 id="univrmで-ランタイムロードする">UniVRMで ランタイムロードする&lt;/h2>
&lt;p>ランタイムで UniVRM の ロード機能を使うことができます。
UniVRM は Asset(Prefab) を作成せずに、シーン上に直接 GameObject を作ります。
ロードした GameObject は、Instanciate した Prefab と同様に扱うことができます。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/programming/runtime_import/">runtime load&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="univrmで-ランタイムエクスポートする">UniVRMで ランタイムエクスポートする&lt;/h2>
&lt;p>ランタイムで UniVRM の エクスポート機能 を使うことができます。
この機能を使って、キャラクタークリエーションツール を実装することができます。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/install/univrm_install_samples/">samples&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Assets/VRM.Samples/Scenes/VRMRuntimeExporterSample.unity&lt;/code>&lt;/p>
&lt;p>が例です。&lt;/p>
&lt;h2 id="univrm以外の実装">UniVRM以外の実装&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ruyo/VRM4U">https://github.com/ruyo/VRM4U&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/saturday06/VRM_IMPORTER_for_Blender">https://github.com/saturday06/VRM_IMPORTER_for_Blender&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/virtual-cast/babylon-vrm-loader/">https://github.com/virtual-cast/babylon-vrm-loader/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pixiv/three-vrm/">https://github.com/pixiv/three-vrm/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 拡張を実装する</title><link>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</guid><description>
&lt;p>&lt;code>UniVRM-0.63.2&lt;/code> から &lt;a href="https://vrm.dev/docs/univrm/gltf/unigltf/">UniGLTF&lt;/a> の構成が変わって、 &lt;code>extensions&lt;/code> / &lt;code>extras&lt;/code> の実装方法が変わりました。&lt;/p>
&lt;h2 id="gltf-拡張とは">GLTF 拡張とは&lt;/h2>
&lt;p>例 &lt;a href="https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras">https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;asset&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#f60">2.0&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;extras&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;guid&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;#34;&lt;/span>,
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>名前(JsonPath)が &lt;code>asset.extras.guid&lt;/code> で値が &lt;code>&amp;quot;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;quot;&lt;/code> です。
&lt;code>extensions&lt;/code> (&lt;code>extras&lt;/code> 。複数形に注意) の&lt;/p>
&lt;ul>
&lt;li>JsonPath。例 &lt;code>extensions.VRM&lt;/code>, &lt;code>asset.extras.guid&lt;/code>&lt;/li>
&lt;li>型、内容。例 object(VRMに関する諸々), string(guid文字列)&lt;/li>
&lt;/ul>
&lt;p>の取り決めが &lt;code>GTTF拡張&lt;/code> です。&lt;/p>
&lt;p>&lt;code>extensions&lt;/code> はオフィシャルに仕様を策定して &lt;code>JsonSchema&lt;/code> として公開する。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF/tree/master/extensions">https://github.com/KhronosGroup/glTF/tree/master/extensions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>extras&lt;/code> は &lt;code>JsonSchema&lt;/code> を作るほどでもないちょっとした追加データを手軽に追加という気持ちの違いです。仕組みは同じです。&lt;/p>
&lt;blockquote>
&lt;p>This enables glTF models to contain application-specific properties without creating a full glTF extension&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>extensions&lt;/code> は、&lt;code>{ベンダー名}_{拡張名}&lt;/code> という命名規則です。
ベンダー名は、 &lt;a href="https://github.com/KhronosGroup/glTF">https://github.com/KhronosGroup/glTF&lt;/a> に申し込んで登録できます。&lt;/p>
&lt;h2 id="unigltf-の-extensions">UniGLTF の extensions&lt;/h2>
&lt;p>&lt;code>v0.63.0&lt;/code> 以前は、&lt;code>GLTF 型&lt;/code> の &lt;code>extensions&lt;/code> フィールドに、&lt;code>GLTFExtensions&lt;/code> 型を定義して、&lt;code>VRM&lt;/code> フィールドを定義するという方法をとっていました。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">VRM&lt;/span>
{
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFExtensions&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> VRM VRM;
}
&lt;span style="color:#09f;font-style:italic">// すべての拡張の型を事前に知っている必要があり、拡張を分離できない
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTF&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GLTFExtensions extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// 個々の extensions に対して別個の型を定義する必要がある
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFMaterialExtensions&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> KHR_materials_unlit KHR_materials_unlit;
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFMaterial&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GLTFMaterialExtensions extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この設計だと GLTF と拡張を別ライブラリとして分離することができませんでした。&lt;/p>
&lt;p>&lt;code>v0.63.1&lt;/code> から設計を変更して、すべての &lt;code>extensions/extras&lt;/code> に同じ型の入れ物を使うように変更しました。
UniGLTF は &lt;code>import/export&lt;/code> の具体的な内容を知らずに中間データの入れ物として扱います。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// extensions / extras の入れ物として使う型
&lt;/span>&lt;span style="color:#09f;font-style:italic">// 実行時は、 glTFExtensionImport / glTFExtensionExport を使う
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">abstract&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">glTFExtension&lt;/span>
{
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTF&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// UniGLTFは具体的な型を知らない。利用側が処理(serialize/deserialize)する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> glTFExtension extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unigltf-の拡張の書き方">UniGLTF の拡張の書き方&lt;/h2>
&lt;p>拡張は、以下の部品要素から作れます。&lt;/p>
&lt;ul>
&lt;li>名前(JsonPath)。例: &lt;code>extensions.VRM&lt;/code>, &lt;code>materials[*].extensions.KHR_materials_unlit&lt;/code>&lt;/li>
&lt;li>拡張の型。&lt;code>T型&lt;/code>&lt;/li>
&lt;li>デシリアライザー(import)。 &lt;code>jsonバイト列 =&amp;gt; T型&lt;/code>&lt;/li>
&lt;li>シリアライザーexport)。&lt;code>T型 =&amp;gt; jsonバイト列&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="jsonpath-と-型を決める">JSONPATH と 型を決める&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">&lt;span style="color:#09f;font-style:italic">// 型
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GoodMaterial&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// `materials[*].extensions.CUSTOM_materials_good`
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> EXTENSION_NAME = &lt;span style="color:#c30">&amp;#34;CUSTOM_materials_good&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#078;font-weight:bold">int&lt;/span> GoodValue;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="import">import&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">GoodMaterial DeserializeGoodMaterial(ListTreeNode&amp;lt;JsonValue&amp;gt; json)
{
&lt;span style="color:#09f;font-style:italic">// デシリアライズ。手で書くかコード生成する(後述)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>}
&lt;span style="color:#09f;font-style:italic">// ユーティリティ関数例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#078;font-weight:bold">bool&lt;/span> TryGetExtension&amp;lt;T&amp;gt;(UniGLTF.glTFExtension extension, &lt;span style="color:#078;font-weight:bold">string&lt;/span> key, Func&amp;lt;ListTreeNode&amp;lt;JsonValue&amp;gt;, T&amp;gt; deserializer, &lt;span style="color:#069;font-weight:bold">out&lt;/span> T &lt;span style="color:#069;font-weight:bold">value&lt;/span>)
{
&lt;span style="color:#069;font-weight:bold">if&lt;/span>(material.extensions &lt;span style="color:#069;font-weight:bold">is&lt;/span> UniGLTF.glTFExtensionsImport import)
{
&lt;span style="color:#09f;font-style:italic">// null check 完了
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">foreach&lt;/span>(&lt;span style="color:#078;font-weight:bold">var&lt;/span> kv &lt;span style="color:#069;font-weight:bold">in&lt;/span> import.ObjectItems())
{
&lt;span style="color:#069;font-weight:bold">if&lt;/span>(kv.key.GetString()==key)
{
&lt;span style="color:#069;font-weight:bold">value&lt;/span> = Deserialize(kv.Value);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
}
}
}
&lt;span style="color:#069;font-weight:bold">value&lt;/span> = &lt;span style="color:#069;font-weight:bold">default&lt;/span>;
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">false&lt;/span>;
}
&lt;span style="color:#069;font-weight:bold">void&lt;/span> ImportMaterial(UniGLTF.glTFMaterial material)
{
&lt;span style="color:#09f;font-style:italic">// material の処理に割り込んで
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(TryGetExtension(material.extension, GoodMaterial.EXTENSION_NAME, DeserializeGoodMaterial, &lt;span style="color:#069;font-weight:bold">out&lt;/span> GoodMaterial good))
{
&lt;span style="color:#09f;font-style:italic">// good material 独自の処理
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="export">export&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">void&lt;/span> SerializeGoodMaterial(UniJSON.JsonFormatter f, GoodMaterial &lt;span style="color:#069;font-weight:bold">value&lt;/span>)
{
&lt;span style="color:#09f;font-style:italic">// シリアライズ。手で書くかコード生成する(後述)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>}
&lt;span style="color:#09f;font-style:italic">// ユーティリティ関数例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">public&lt;/span> ArraySegment&amp;lt;&lt;span style="color:#078;font-weight:bold">byte&lt;/span>&amp;gt; SerializeExtension&amp;lt;T&amp;gt;(T &lt;span style="color:#069;font-weight:bold">value&lt;/span>, Func&amp;lt;T, ArraySegment&amp;lt;&lt;span style="color:#078;font-weight:bold">byte&lt;/span>&amp;gt;&amp;gt; serialize)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> f = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniJSON.JsonFormatter();
serialize(f, &lt;span style="color:#069;font-weight:bold">value&lt;/span>);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> f.GetStoreBytes();
}
&lt;span style="color:#069;font-weight:bold">void&lt;/span> ExportGoodMaterial(UniGLTF.glTFMaterial material, GoodMaterial good)
{
&lt;span style="color:#09f;font-style:italic">// material の処理に割り込んで
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(!(material.extensions &lt;span style="color:#069;font-weight:bold">is&lt;/span> UniGLTF.glTFExtensionsExport export))
{
&lt;span style="color:#09f;font-style:italic">// 無かった。新規作成
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> export = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniGLTF.glTFExtensionsExport();
material.extensions = export;
}
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = SerializeExtension(good, SerializeGoodMaterial);
export.Add(GoodMaterial.EXTENSION_NAME, bytes);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="実装例">実装例&lt;/h2>
&lt;h3 id="gltf-gltf全体">GLTF: GLTF全体&lt;/h3>
&lt;p>&lt;code>C#の型からコード生成&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\GltfSerializer.g.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\GltfDeserializer.g.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>ジェネレーターの呼び出しコード&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-meshesextrastargetnames">GLTF: &lt;code>meshes[*].extras.targetNames&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\gltf_mesh_extras_targetNames.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-materialsextensionskhr_materials_unlit">GLTF: &lt;code>materials[*].extensions.KHR_materials_unlit&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_materials_unlit.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-materialsextensionskhr_texture_transform">GLTF: &lt;code>materials[*].extensions.KHR_texture_transform&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_texture_transform.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296">https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193">https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="vrm0-extensionsvrm">VRM0: &lt;code>extensions.VRM&lt;/code>&lt;/h3>
&lt;p>&lt;code>C#の型からコード生成&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\VRM\Runtime\Format\VRMSerializer.g.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\VRM\Runtime\Format\VRMDeserializer.g.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>ジェネレーターの呼び出しコード&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\VRM\Editor\VRMSerializerGenerator.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\VRM\Editor\VRMDeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41">https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209">https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="vrm1-extensionsvrmc_vrm-など">VRM1: &lt;code>extensions.VRMC_vrm&lt;/code> など&lt;/h3>
&lt;p>&lt;code>JsonSchemaからコード生成&lt;/code>&lt;/p>
&lt;p>5つの Extensions に分かれたので個別に作成。
ささる場所(JsonPath)が違うのに注意。&lt;/p>
&lt;h4 id="extensionsvrmc_vrm">&lt;code>extensions.VRMC_vrm&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\VRM&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="materialsextensionsvrmc_materials_mtoon">&lt;code>materials[*].extensions.VRMC_materials_mtoon&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\MaterialsMToon&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="nodesextensionsvrmc_node_collider">&lt;code>nodes[*].extensions.VRMC_node_collider&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\NodeCollider&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="extensionsvrmc_springbone">&lt;code>extensions.VRMC_springBone&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\SpringBone&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="extensionsvrmc_vrm_constraints">&lt;code>extensions.VRMC_vrm_constraints&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\Constraints&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="ジェネレーターの呼び出しコード">ジェネレーターの呼び出しコード&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Editor\GeneratorMenu.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="生成コードの呼び出し">生成コードの呼び出し&lt;/h4>
&lt;h2 id="コード生成">コード生成&lt;/h2>
&lt;p>JSON と C# の型との シリアライズ/デシリアライズは定型コードになるので、ジェネレーターがあります。
C# の型から生成するものと、JsonSchema から C# の型とともに生成するものがあります。&lt;/p>
&lt;h3 id="c-の型から生成">C# の型から生成&lt;/h3>
&lt;h4 id="シリアライザー">シリアライザー&lt;/h4>
&lt;p>ジェネレーターを呼び出すコードを作成します。&lt;/p>
&lt;ul>
&lt;li>元になる型&lt;/li>
&lt;li>出力先&lt;/li>
&lt;/ul>
&lt;p>の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p>
&lt;p>例&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Collections.Generic&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Reflection&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Text&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniJSON&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEditor&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">SerializerGenerator&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">const&lt;/span> BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> Begin = &lt;span style="color:#c30">@&amp;#34;// Don&amp;#39;t edit manually. This is generaged.
&lt;/span>&lt;span style="color:#c30">using System;
&lt;/span>&lt;span style="color:#c30">using System.Collections.Generic;
&lt;/span>&lt;span style="color:#c30">using UniJSON;
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">namespace UniGLTF {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30"> static public class GltfSerializer
&lt;/span>&lt;span style="color:#c30"> {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> End = &lt;span style="color:#c30">@&amp;#34;
&lt;/span>&lt;span style="color:#c30"> } // class
&lt;/span>&lt;span style="color:#c30">} // namespace
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> OutPath
{
&lt;span style="color:#069;font-weight:bold">get&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> Path.Combine(UnityEngine.Application.dataPath,
&lt;span style="color:#c30">&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfSerializer.g.cs&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Serializer&amp;#34;)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> GenerateSerializer()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> info = &lt;span style="color:#069;font-weight:bold">new&lt;/span> ObjectSerialization(&lt;span style="color:#069;font-weight:bold">typeof&lt;/span>(glTF), &lt;span style="color:#c30">&amp;#34;gltf&amp;#34;&lt;/span>, &lt;span style="color:#c30">&amp;#34;Serialize_&amp;#34;&lt;/span>);
Debug.Log(info);
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> s = File.Open(OutPath, FileMode.Create))
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> w = &lt;span style="color:#069;font-weight:bold">new&lt;/span> StreamWriter(s, &lt;span style="color:#069;font-weight:bold">new&lt;/span> UTF8Encoding(&lt;span style="color:#069;font-weight:bold">false&lt;/span>)))
{
w.Write(Begin);
info.GenerateSerializer(w, &lt;span style="color:#c30">&amp;#34;Serialize&amp;#34;&lt;/span>);
w.Write(End);
}
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;write: {0}&amp;#34;&lt;/span>, OutPath);
UnityPath.FromFullpath(OutPath).ImportAsset();
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="デシリアライザー">デシリアライザー&lt;/h4>
&lt;p>ジェネレーターを呼び出すコードを作成します。&lt;/p>
&lt;ul>
&lt;li>元になる型&lt;/li>
&lt;li>出力先&lt;/li>
&lt;/ul>
&lt;p>の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p>
&lt;p>例&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Reflection&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Text&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEditor&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">/// &amp;lt;summary&amp;gt;
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">/// Generate deserializer from ListTreeNode&amp;lt;JsonValue&amp;gt; to glTF using type reflection
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">/// &amp;lt;/summary&amp;gt;
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">DeserializerGenerator&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> Begin = &lt;span style="color:#c30">@&amp;#34;// Don&amp;#39;t edit manually. This is generaged.
&lt;/span>&lt;span style="color:#c30">using UniJSON;
&lt;/span>&lt;span style="color:#c30">using System;
&lt;/span>&lt;span style="color:#c30">using System.Collections.Generic;
&lt;/span>&lt;span style="color:#c30">using UnityEngine;
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">namespace UniGLTF {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">public static class GltfDeserializer
&lt;/span>&lt;span style="color:#c30">{
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> End = &lt;span style="color:#c30">@&amp;#34;
&lt;/span>&lt;span style="color:#c30">} // GltfDeserializer
&lt;/span>&lt;span style="color:#c30">} // UniGLTF
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> OutPath
{
&lt;span style="color:#069;font-weight:bold">get&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> Path.Combine(UnityEngine.Application.dataPath,
&lt;span style="color:#c30">&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfDeserializer.g.cs&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Deserializer&amp;#34;)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> GenerateSerializer()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> info = &lt;span style="color:#069;font-weight:bold">new&lt;/span> ObjectSerialization(&lt;span style="color:#069;font-weight:bold">typeof&lt;/span>(glTF), &lt;span style="color:#c30">&amp;#34;gltf&amp;#34;&lt;/span>, &lt;span style="color:#c30">&amp;#34;Deserialize_&amp;#34;&lt;/span>);
Debug.Log(info);
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> s = File.Open(OutPath, FileMode.Create))
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> w = &lt;span style="color:#069;font-weight:bold">new&lt;/span> StreamWriter(s, &lt;span style="color:#069;font-weight:bold">new&lt;/span> UTF8Encoding(&lt;span style="color:#069;font-weight:bold">false&lt;/span>)))
{
w.Write(Begin);
info.GenerateDeserializer(w, &lt;span style="color:#c30">&amp;#34;Deserialize&amp;#34;&lt;/span>);
w.Write(End);
}
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;write: {0}&amp;#34;&lt;/span>, OutPath);
UnityPath.FromFullpath(OutPath).ImportAsset();
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="キー出力の抑制">キー出力の抑制&lt;/h4>
&lt;p>&lt;code>index&lt;/code> に無効な値として &lt;code>-1&lt;/code> を入れる場合に、JSONではキーを出力しないとしたいことがあります。&lt;/p>
&lt;p>TODO: &lt;code>int?&lt;/code> にするべきだった&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#309">[JsonSchema(Minimum = 0)]&lt;/span>
&lt;span style="color:#078;font-weight:bold">int&lt;/span> index = -&lt;span style="color:#f60">1&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>のようにすることで、キーの出力を抑制できます。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#09f;font-style:italic">// 生成コードのキー出力例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(&lt;span style="color:#069;font-weight:bold">value&lt;/span>.index&amp;gt;=&lt;span style="color:#f60">0&lt;/span>){
&lt;/code>&lt;/pre>&lt;/div>&lt;p>何も付けないと&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#09f;font-style:italic">// 出力制御無し
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(&lt;span style="color:#069;font-weight:bold">true&lt;/span>){
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="enum-のエンコーディング">enum のエンコーディング&lt;/h4>
&lt;p>enumの値の名前を文字列で使う、enumの値の数値を使うの2種類がありえます。
enumの場合はデフォルト値が無いので必須です。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#309">[JsonSchema(EnumSerializationType = EnumSerializationType.AsInt)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> glBufferTarget target;
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309">[JsonSchema(EnumSerializationType = EnumSerializationType.AsLowerString)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> ProjectionType type;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="jsonschemaから生成">JsonSchemaから生成&lt;/h3>
&lt;p>VRM-1.0 の実装&lt;/p>
&lt;p>TODO:&lt;/p></description></item><item><title>Docs: VRMShaders UPMパッケージ</title><link>https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/</guid><description>
&lt;p>&lt;code>UniVRM-0.56&lt;/code> からフォルダ構成を変更して、
&lt;code>UniVRM&lt;/code> のマテリアル関連の機能は、 &lt;code>Assets/VRMShaders&lt;/code> に移動しました。&lt;/p>
&lt;h2 id="upm-パッケージ">UPM パッケージ&lt;/h2>
&lt;p>パッケージとして独立して、 &lt;code>UniVRM&lt;/code> とは関係なくマテリアル関連だけ単体で使うことできます。
( &lt;code>UniVRM&lt;/code> が &lt;code>VRMShaders&lt;/code> を使う関係)。
&lt;code>UniUnlit&lt;/code> と &lt;code>MToon&lt;/code> を内包しています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">manifest.json&lt;/span> &lt;span style="color:#a00;background-color:#faa">抜粋&lt;/span>
{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.57.0&amp;#34;&lt;/span>,
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#0.57.0&lt;/code> 部分で UniVRM のリリース番号(github の tag)を指定します。
&lt;code>VRMShaders&lt;/code> は &lt;code>VRM&lt;/code> と同じリリース番号を適用する運用をしています。&lt;/p>
&lt;h3 id="uniunlit">UniUnlit&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">unlit&lt;/a>&lt;/p>
&lt;h3 id="mtoon">MToon&lt;/h3>
&lt;p>&lt;a href="https://github.com/Santarh/MToon">https://github.com/Santarh/MToon&lt;/a>&lt;/p>
&lt;p>で開発しています。
git submodule で、VRMShaders 配下になるようにしています。&lt;/p>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/tree/master/Assets/VRMShaders">https://github.com/vrm-c/UniVRM/tree/master/Assets/VRMShaders&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">mtoon&lt;/a>&lt;/p></description></item></channel></rss>