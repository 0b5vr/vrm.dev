<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – Material</title><link>https://vrm.dev/docs/univrm/shaders/</link><description>Recent content in Material on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 16 Apr 2018 16:30:00 +0900</lastBuildDate><atom:link href="https://vrm.dev/docs/univrm/shaders/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: MToon</title><link>https://vrm.dev/docs/univrm/shaders/shader_mtoon/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/shaders/shader_mtoon/</guid><description>
&lt;p>&lt;a href="https://www.slideshare.net/VirtualCast/vrm-mtoon">MToonの使い方&lt;/a>&lt;/p>
&lt;h1 id="mtoon-について">MToon について&lt;/h1>
&lt;p>MToon は日本のアニメ的表現をすることを目標としています。
主色 (Lit Color) と陰色 (Shade Color) の 2 色を、Lighting パラメータや光源環境に応じて混合することでそれを実現します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_about.png" alt="alicia MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MToon を適用したニコニ立体ちゃん&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="手早く設定したい人向け">手早く設定したい人向け&lt;/h1>
&lt;h2 id="共通項目">共通項目&lt;/h2>
&lt;ul>
&lt;li>目的のマテリアルを選択し、シェーダを &lt;code>VRM/MToon&lt;/code> に変更&lt;/li>
&lt;li>&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> と &lt;code>Color-&amp;gt;Shade Color&lt;/code> に同じテクスチャを設定&lt;/li>
&lt;li>&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> は白色 &lt;code>Color-&amp;gt;Shade Color&lt;/code> は好きな陰色を設定&lt;/li>
&lt;li>&lt;code>Shading-&amp;gt;Toony&lt;/code> は好きな値。主色と影色をパキッとさせたいときは &lt;code>1&lt;/code>&lt;/li>
&lt;li>&lt;code>Rim-&amp;gt;Additive&lt;/code> は &lt;code>Spheremap&lt;/code> や &lt;code>MatCap&lt;/code> と同等のテクスチャを設定&lt;/li>
&lt;li>&lt;code>Outline-&amp;gt;Width-&amp;gt;Mode&lt;/code> は輪郭線を必要とするなら &lt;code>WorldCoordinates&lt;/code> で、しないなら &lt;code>None&lt;/code>&lt;/li>
&lt;li>&lt;code>Outline-&amp;gt;Width-&amp;gt;Width&lt;/code> は 見た目上好きな値&lt;/li>
&lt;/ul>
&lt;h2 id="普通のマテリアル">普通のマテリアル&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Shading Shift&lt;/code> は &lt;code>0&lt;/code>&lt;/li>
&lt;li>&lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> は &lt;code>1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="キャラクタの顔など影があまりついてほしくないマテリアル">キャラクタの顔など、影があまりついてほしくないマテリアル&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Shading Shift&lt;/code> はマイナスの値&lt;/li>
&lt;li>&lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> は &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="設定項目">設定項目&lt;/h1>
&lt;h2 id="準備">準備&lt;/h2>
&lt;p>目的のマテリアルを選択し、シェーダを &lt;code>VRM/MToon&lt;/code> に変更します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/set_mtoon.png" alt="select MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Material の Shader を VRM/MToon に変更.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rendering">Rendering&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_inspector_rendering.png" alt="MToon Rendering" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Rendering Inspector に含まれる項目.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Rendering 項目では主色と影色、および描画方法を設定します。&lt;/p>
&lt;h3 id="rendering-type">Rendering Type&lt;/h3>
&lt;p>マテリアルが不透明か半透明かどうかを設定します。&lt;/p>
&lt;ul>
&lt;li>Opaque
&lt;ul>
&lt;li>不透明です。基本的には Opaque を設定することを推奨します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cutout
&lt;ul>
&lt;li>不透明ですが &lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> のアルファ値情報を参照して &lt;code>Color-&amp;gt;Alpha-&amp;gt;Cutoff&lt;/code> の値より小さな箇所の描画をスキップします。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transparent
&lt;ul>
&lt;li>半透明です。&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> のアルファ値どおりの不透明度になります。&lt;/li>
&lt;li>デメリットとして輪郭線描画は正しく行われません。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cull-mode">Cull Mode&lt;/h3>
&lt;p>ポリゴンのどちら側の面を描画するかを設定します。&lt;/p>
&lt;ul>
&lt;li>Back
&lt;ul>
&lt;li>表側を描画します。基本的にはこの Back を選択します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Front
&lt;ul>
&lt;li>裏側を描画します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>None
&lt;ul>
&lt;li>両面を描画します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="alpha">Alpha&lt;/h3>
&lt;p>&lt;code>Rendering Type&lt;/code> が &lt;code>Cutout&lt;/code> であるときだけ設定する必要があります。&lt;/p>
&lt;ul>
&lt;li>Cutoff (&lt;code>Color-&amp;gt;Alpha&lt;/code>)
&lt;ul>
&lt;li>描画するしないのしきい値を設定します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="color">Color&lt;/h2>
&lt;p>描画色を設定します。
テクスチャと色は乗算されます。
光が当たる主色は &lt;code>Lit Color, Alpha&lt;/code> に、光が当たらない陰色は &lt;code>Shade Color&lt;/code> に設定します。
また &lt;code>Lit Color, Alpha&lt;/code> のアルファ値には不透明度情報を設定します。&lt;/p>
&lt;h2 id="lighting">Lighting&lt;/h2>
&lt;h3 id="shading-shift">Shading Shift&lt;/h3>
&lt;p>光の当たり方に対して、主色と陰色のしきい値を調整します。
&lt;code>0&lt;/code> のとき普通のライティングになります。
マイナス値にするとアニメ的な、主色の範囲が広いライティングになります。
マイナス値のときはセルフシャドウを無効化する必要があるため、表示された警告に従い &lt;code>Shadow Receive Multiplier&lt;/code> を &lt;code>0&lt;/code> に設定する必要があります。&lt;/p>
&lt;h3 id="shading-toony">Shading Toony&lt;/h3>
&lt;p>&lt;code>Shading Shift&lt;/code> の項目における主色と陰色のしきい値付近を滑らかに変化させるか否かを設定します。
&lt;code>0&lt;/code> のときは通常の Lambert モデルのような写実寄りの滑らかさになります。
&lt;code>1&lt;/code> のときはしきい値ではっきり主色と陰色が変化するアニメ調のライティングになります。&lt;/p>
&lt;h3 id="shadow-receive-multiplier">Shadow Receive Multiplier&lt;/h3>
&lt;p>セルフシャドウや落影の影響度を設定します。
&lt;code>0&lt;/code> のときは影響を受けません。
&lt;code>1&lt;/code> のときは影響を受けます。&lt;/p>
&lt;h3 id="lightcolor-attenuation">LightColor Attenuation&lt;/h3>
&lt;p>光源の色の影響度を設定します。
&lt;code>0&lt;/code> のときは光源の色の影響を受けます。
&lt;code>1&lt;/code> のときは光源の色の影響を無効化し、光源の色の輝度だけを反映します。&lt;/p>
&lt;h3 id="rim-additive">Rim Additive&lt;/h3>
&lt;p>カメラと法線の関係による追加光源を表現します。
一般にはスフィアマップや MatCap と呼ばれます。&lt;/p>
&lt;h3 id="emission">Emission&lt;/h3>
&lt;p>光源環境によらず一定な色を設定します。&lt;/p>
&lt;h3 id="normal-map">Normal Map&lt;/h3>
&lt;p>法線マップを設定します。
右側の値は法線マップの強さを設定します。&lt;/p>
&lt;h2 id="outline">Outline&lt;/h2>
&lt;p>輪郭線を設定します。&lt;/p>
&lt;h3 id="width-mode">Width Mode&lt;/h3>
&lt;ul>
&lt;li>None
&lt;ul>
&lt;li>輪郭線を描画しません&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WorldCoordinates
&lt;ul>
&lt;li>世界に対して一定の幅の輪郭線を描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ScreenCoordinates
&lt;ul>
&lt;li>スクリーンに対して一定の幅の輪郭線を描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="width">Width&lt;/h3>
&lt;p>輪郭線の幅を設定します。
&lt;code>Width Mode&lt;/code> が &lt;code>WorldCoordinates&lt;/code> のとき単位はメートルです。&lt;/p>
&lt;h3 id="color-mode">Color Mode&lt;/h3>
&lt;ul>
&lt;li>FixedColor
&lt;ul>
&lt;li>固定色で描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MixedLighting
&lt;ul>
&lt;li>ライティングの影響を乗算します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="color-1">Color&lt;/h3>
&lt;p>輪郭線の色を設定します。&lt;/p>
&lt;h3 id="color-lighting-mix">Color Lighting Mix&lt;/h3>
&lt;p>&lt;code>Color Mode&lt;/code> が &lt;code>MixedLighting&lt;/code> のとき、その乗算係数を設定します。&lt;/p></description></item><item><title>Docs: UniUnlit</title><link>https://vrm.dev/docs/univrm/shaders/univrm_unlit/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_unlit/</guid><description>
&lt;h2 id="unigltfuniunlit-シェーダー">&lt;code>UniGLTF/UniUnlit&lt;/code> シェーダー&lt;/h2>
&lt;p>Unity の &lt;code>Unlit&lt;/code> 系シェーダーは、機能ごとに&lt;/p>
&lt;ul>
&lt;li>Unlit/Color&lt;/li>
&lt;li>Unlit/Texture&lt;/li>
&lt;li>Unlit/Transparent&lt;/li>
&lt;li>Unlit/Transparent Cutout&lt;/li>
&lt;/ul>
&lt;p>のように分かれています。&lt;/p>
&lt;p>また、&lt;code>GLTF&lt;/code> では設定可能なのだけど、標準の &lt;code>Unlit&lt;/code> 系シェーダーでは再現できない組み合わせがあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Texture&lt;/code> かつ &lt;code>Color&lt;/code> の乗算&lt;/li>
&lt;li>頂点カラー&lt;/li>
&lt;/ul>
&lt;p>これらを解決する、統一 &lt;code>unlit&lt;/code> シェーダーとして &lt;code>UniGLTF/UniUnlit&lt;/code> があります。&lt;/p>
&lt;p>&lt;code>UniVRM&lt;/code> で、&lt;code>GLTF&lt;/code> で &lt;code>Unlit&lt;/code> 設定のマテリアルをインポートすると、
すべて &lt;code>UniGLTF/UniUnlit&lt;/code> 使うようになります。&lt;/p>
&lt;p>エクスポートしてからインポートする場合の対応表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>export&lt;/th>
&lt;th>gltf&lt;/th>
&lt;th>import&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Unlit/Color&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Texture&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Transparent&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Transparent Cutout&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitTexture&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitTransparent&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitCutout&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>なお、UniVRM がサポートするシェーダーの中で、&lt;code>UniGLTF/UniUnlit&lt;/code> だけが頂点カラーをサポートしています。&lt;/p>
&lt;ul>
&lt;li>Meshに頂点カラーが含まれている&lt;/li>
&lt;li>Materialが &lt;code>Unlit&lt;/code> 判定である&lt;/li>
&lt;/ul>
&lt;p>場合に、import すると頂点カラーが適用されます。
頂点カラーが不要であるモデルに、Unity の &lt;code>unlit&lt;/code> 系マテリアルを適用してエクスポートすると、
次にインポートするときに意図せずに色が変わる場合があります。
この場合、エクスポート時に &lt;code>RemoveVertexColor&lt;/code> を有効にすることで、頂点カラーを含まない &lt;code>Mesh&lt;/code> をエクスポートすることができます。&lt;/p>
&lt;h2 id="gltf">GLTF&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">UniUnlit&lt;/th>
&lt;th align="left">GLTF Unlit&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">カラーファクター&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">カラーテクスチャ&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">レンダリングモード&lt;/td>
&lt;td align="left">/materials/alphaMode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">カリングモード&lt;/td>
&lt;td align="left">/materials/doubleSided&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Standard</title><link>https://vrm.dev/docs/univrm/shaders/univrm_standard/</link><pubDate>Fri, 11 Dec 2020 21:36:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_standard/</guid><description>
&lt;h2 id="standard">Standard&lt;/h2>
&lt;p>Unityの&lt;a href="https://docs.unity3d.com/ja/2019.3/Manual/StandardShaderMaterialParameters.html">デフォルト&lt;/a>でGLTF標準のPBRマテリアルとほぼ互換性があります。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">Unityのデフォルト&lt;/th>
&lt;th align="left">GLTFのPBRマテリアル&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">Albedo カラー&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Albedo テクスチャ&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Metallic レベル&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/metallicFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Smoothness レベル&lt;/td>
&lt;td align="left">1.0f - (/materials/pbrMetallicRoughness/roughnessFactor)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Metallic テクスチャ&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/metallicRoughnessTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">法線マップ&lt;/td>
&lt;td align="left">/materials/normalTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">バンプスケール&lt;/td>
&lt;td align="left">/materials/normalTexture/scale&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ハイトマップ&lt;/td>
&lt;td align="left">N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">オクルージョンテクスチャ&lt;/td>
&lt;td align="left">/materials/occlusionTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">オクルージョン強度&lt;/td>
&lt;td align="left">/materials/occlusionTexture/strength&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Emission カラー&lt;/td>
&lt;td align="left">/materials/emissiveFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Emission テクスチャ&lt;/td>
&lt;td align="left">/materials/emissiveTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">詳細マスク&lt;/td>
&lt;td align="left">N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">セカンダリマップ&lt;/td>
&lt;td align="left">N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">レンダリングモード&lt;/td>
&lt;td align="left">/materials/alphaMode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>UniVRMのマテリアルインポートに関して、roughnessFactor値はMetallicテクスチャにベイクされる。マテリアルエクスポートではsmoothness値はMetallicテクスチャにベイクされる&lt;a href="https://github.com/vrm-c/UniVRM/pull/222">[参照]&lt;/a>。&lt;/p>
&lt;p>Unity と GLTF でテクスチャーの仕様に非互換があるので、 &lt;code>export/import&lt;/code> で変換しています。&lt;/p>
&lt;h2 id="テクスチャ変換">テクスチャ変換&lt;/h2>
&lt;p>Standardシェーダーのカラー以外のテクスチャ(Linear)の処理について。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ノーマルマップの修正。MToonと共通なので次項で説明します&lt;/p>
&lt;ul>
&lt;li>Materialのプロパティ名 &lt;code>_BumpMap&lt;/code> で判定します。&lt;/li>
&lt;li>EditorImport: &lt;code>TextureImporterType.NormalMap&lt;/code>&lt;/li>
&lt;li>RuntimeImport: 法線テクスチャのPack&lt;/li>
&lt;li>Export: 法線テクスチャのUnpack&lt;/li>
&lt;li>sRGBとLinearの対応&lt;/li>
&lt;li>Tangentの対応&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Metallic, Roughnes, OcclusionMapの変換&lt;/p>
&lt;ul>
&lt;li>RGBAチャンネル組み換え&lt;/li>
&lt;li>Roughness値とSmoothness値の反転&lt;/li>
&lt;li>sRGBとLinearの対応&lt;/li>
&lt;li>Importerで変換、Exporterで逆変換&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="トラブルシューティング">トラブルシューティング&lt;/h2>
&lt;ul>
&lt;li>ピカピカに反射してしまう。
&lt;ul>
&lt;li>Shaderの種類が &lt;code>Standard&lt;/code> (Unityの標準) で &lt;code>metallic&lt;/code> と &lt;code>smooth&lt;/code> 値が高い状態になっています。 マテリアルのシェーダーを &lt;code>Unlit/UniUnlit&lt;/code> にするとテクスチャがそのまま表示できます。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Export Import</title><link>https://vrm.dev/docs/univrm/shaders/univrm_export_import/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_export_import/</guid><description>
&lt;h2 id="エクスポート">エクスポート&lt;/h2>
&lt;h3 id="gltf-レイヤー">GLTF レイヤー&lt;/h3>
&lt;p>gltf の &lt;code>/materials[]&lt;/code> に記録します。&lt;/p>
&lt;ul>
&lt;li>PBR(default)&lt;/li>
&lt;li>Unlit(KHR_materials_unlit extension)&lt;/li>
&lt;/ul>
&lt;p>の２種類のみをサポートしています。&lt;/p>
&lt;h4 id="詳細">詳細&lt;/h4>
&lt;p>&lt;code>standard&lt;/code> と見做して処理します。&lt;/p>
&lt;p>Unityマテリアルが以下の何れかのシェーダーである場合に、
&lt;code>KHR_materials_unlit&lt;/code> extension を追加します。&lt;/p>
&lt;ul>
&lt;li>Unlit/Color(Unity標準)&lt;/li>
&lt;li>Unlit/Texture(Unity標準)&lt;/li>
&lt;li>Unlit/Transparent(Unity標準)&lt;/li>
&lt;li>Unlit/Transparent Cutout(Unity標準)&lt;/li>
&lt;li>UniGLTF/UniUnlit(UniVRM)&lt;/li>
&lt;li>VRM/UnlitTexture(UniVRM)&lt;/li>
&lt;li>VRM/UnlitTransparent(UniVRM)&lt;/li>
&lt;li>VRM/UnlitCutout(UniVRM)&lt;/li>
&lt;/ul>
&lt;h3 id="vrm-レイヤー">VRM レイヤー&lt;/h3>
&lt;p>gltf の &lt;code>/extensions/VRM/materialProperties[]&lt;/code> に記録します。&lt;/p>
&lt;ul>
&lt;li>VRM/UnlitTransparentZWrite&lt;/li>
&lt;li>VRM/MToon&lt;/li>
&lt;/ul>
&lt;p>以外の時は、 &lt;code>shaderName&lt;/code> に &lt;code>VRM_USE_GLTFSHADER&lt;/code> が記録されて、 &lt;code>unknown shader&lt;/code> として GLTF 処理されます。&lt;/p>
&lt;h2 id="インポート">インポート&lt;/h2>
&lt;h3 id="gltf-レイヤー-1">GLTF レイヤー&lt;/h3>
&lt;p>GLTFの &lt;code>/materials[]&lt;/code> からUnityマテリアルを作成します。
&lt;code>KHR_materials_unlit&lt;/code> extension を発見した場合に、&lt;/p>
&lt;ul>
&lt;li>UniGLTF/UniUnlit&lt;/li>
&lt;/ul>
&lt;p>でマテリアルを作成します。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/#uniunlit">UniUnlit&lt;/a>&lt;/p>
&lt;h3 id="vrm-レイヤー-1">VRM レイヤー&lt;/h3>
&lt;p>GLTFの &lt;code>/extensions/VRM/materialProperties[]&lt;/code> からUnityマテリアルを作成します。
&lt;code>shaderName&lt;/code> が &lt;code>VRM_USE_GLTFSHADER&lt;/code> の場合は、 &lt;code>/materials[]&lt;/code> に記録されている情報を使って &lt;code>GLTF&lt;/code> の &lt;code>PBR&lt;/code> か &lt;code>Unlit&lt;/code> として処理します。&lt;/p>
&lt;h2 id="エクスポートしてインポートしたときのシェーダーの変化">エクスポートしてインポートしたときのシェーダーの変化&lt;/h2>
&lt;p>エクスポートしてからインポートすると元と違うシェーダーになる場合があります。&lt;/p>
&lt;ul>
&lt;li>サポート外のシェーダーの場合。 &lt;code>Standard&lt;/code> になります。GLTF のデフォルトが &lt;code>PBR&lt;/code> で、それに対応するのが &lt;code>Standard&lt;/code> です。&lt;/li>
&lt;li>unlit 系の場合。 &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">UniGLTF/UniUnlit&lt;/a> になります。正常な動作です。&lt;/li>
&lt;/ul>
&lt;h2 id="vrm_use_gltfshader">VRM_USE_GLTFSHADER&lt;/h2>
&lt;p>&lt;code>/extensions/VRM/materialProperties[]&lt;/code>&lt;/p>
&lt;p>に記録した情報を使ってすべてのシェーダーを読みこめます。&lt;/p>
&lt;ul>
&lt;li>Runtimeは問題ない&lt;/li>
&lt;li>EditorはインスペクターをアクティブにしたタイミングでGUIに値が変更されたりして個別の対応が必要な場合があり完全ではない&lt;/li>
&lt;/ul>
&lt;p>ただし、この機能は&lt;/p>
&lt;ul>
&lt;li>VRM/UnlitTransparentZWrite&lt;/li>
&lt;li>VRM/MToon&lt;/li>
&lt;/ul>
&lt;p>以外では &lt;code>VRM_USE_GLTFSHADER&lt;/code> で無効になるように封じています(v0.44くらい)。実質 MToon 専用です。
VRMがサポートするシェーダーは、 &lt;code>PBR(Standard)&lt;/code>, &lt;code>Unlit&lt;/code>, &lt;code>MToon&lt;/code> の３種類です。&lt;/p>
&lt;blockquote>
&lt;p>歴史的経緯で &lt;code>UnlitTransparentZWrite&lt;/code> が存在していますが、整理予定です。 &lt;code>MToon&lt;/code> の &lt;code>ZWrite&lt;/code> 機能を使ってください&lt;/p>
&lt;/blockquote>
&lt;p>以前にエクスポートするなどして &lt;code>VRM_USE_GLTFSHADER&lt;/code> を回避していればロード出来る場合があります。
最初は、&lt;code>VRM&lt;/code> と無関係に Unity のマテリアルを読み書きする機能だった名残です。&lt;/p></description></item><item><title>Docs: VRMShaders UPMパッケージ</title><link>https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/</guid><description>
&lt;p>&lt;code>UniVRM-0.56&lt;/code> からフォルダ構成を変更して、
&lt;code>UniVRM&lt;/code> のマテリアル関連の機能は、 &lt;code>Assets/VRMShaders&lt;/code> に移動しました。&lt;/p>
&lt;h2 id="upm-パッケージ">UPM パッケージ&lt;/h2>
&lt;p>パッケージとして独立して、 &lt;code>UniVRM&lt;/code> とは関係なくマテリアル関連だけ単体で使うことできます。
( &lt;code>UniVRM&lt;/code> が &lt;code>VRMShaders&lt;/code> を使う関係)。
&lt;code>UniUnlit&lt;/code> と &lt;code>MToon&lt;/code> を内包しています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">manifest.json&lt;/span> &lt;span style="color:#a00;background-color:#faa">抜粋&lt;/span>
{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.57.0&amp;#34;&lt;/span>,
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#0.57.0&lt;/code> 部分で UniVRM のリリース番号(github の tag)を指定します。
&lt;code>VRMShaders&lt;/code> は &lt;code>VRM&lt;/code> と同じリリース番号を適用する運用をしています。&lt;/p>
&lt;h3 id="uniunlit">UniUnlit&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">unlit&lt;/a>&lt;/p>
&lt;h3 id="mtoon">MToon&lt;/h3>
&lt;p>&lt;a href="https://github.com/Santarh/MToon">https://github.com/Santarh/MToon&lt;/a>&lt;/p>
&lt;p>で開発しています。
git submodule で、VRMShaders 配下になるようにしています。&lt;/p>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/tree/master/Assets/VRMShaders">https://github.com/vrm-c/UniVRM/tree/master/Assets/VRMShaders&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">mtoon&lt;/a>&lt;/p></description></item><item><title>Docs: テクスチャーのインポート</title><link>https://vrm.dev/docs/univrm/shaders/texture_import/</link><pubDate>Mon, 22 Mar 2021 14:03:14 +0900</pubDate><guid>https://vrm.dev/docs/univrm/shaders/texture_import/</guid><description>
&lt;h2 id="unity-standardシェーダー向け-のテクスチャ変換">Unity Standardシェーダー向け のテクスチャ変換&lt;/h2>
&lt;p>glTF の material(Physically Based Rendering) と Unity の Standard は、
&lt;code>MetallicRoughness&lt;/code> テクスチャーと &lt;code>Occlusion&lt;/code> テクスチャーの RGB チャンネルの使い方が違います。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">用途&lt;/th>
&lt;th align="left">glTF&lt;/th>
&lt;th align="left">Unity&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">Occlusion&lt;/td>
&lt;td align="left">materials[*].occlusionTexture の R channel&lt;/td>
&lt;td align="left">Standard._MetallicGlossMap.G channel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Roughness&lt;/td>
&lt;td align="left">materials[*].pbrMetallicRoughness.metallicRoughnessTexture の G channel&lt;/td>
&lt;td align="left">Standard._MetallicGlossMap.A channel (smoothness = 1 - roughness) &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">Metallic&lt;/td>
&lt;td align="left">materials[*].pbrMetallicRoughness.metallicRoughnessTexture の B channel&lt;/td>
&lt;td align="left">Standard._OcclusionMap.R channel&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>UniGLTF&lt;/code> では、import 時に変換しています。&lt;/p>
&lt;h3 id="metallicsmoothocclusionテクスチャを１枚にまとめる-v0690">MetallicSmoothOcclusionテクスチャを１枚にまとめる &lt;code>v0.69.0&lt;/code>&lt;/h3>
&lt;p>&lt;code>v0.69.0&lt;/code> からテクスチャーを１枚にまとめる動作をします。&lt;/p>
&lt;ul>
&lt;li>import: glTFの metallicRoughnessTexture と occlusionTexture を１枚にまとめます(上表参照)&lt;/li>
&lt;li>export: Standard の _MetallicGlossMap と _OcclusionMap を1枚にまとめます(上表参照)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>v0.68.0&lt;/code> 以前&lt;/p>
&lt;ul>
&lt;li>import: _MetallicGlossMap 用と _OcclusionMap 用の２枚のテクスチャを変換して Import&lt;/li>
&lt;li>export: Standard の _MetallicGlossMap と _OcclusionMap から２枚のテクスチャを変換して Export&lt;/li>
&lt;/ul>
&lt;h3 id="gltf">glTF&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#materialocclusiontexture">https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#materialocclusiontexture&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>The occlusion values are sampled from the R channel&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#pbrmetallicroughnessmetallicroughnesstexture">https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#pbrmetallicroughnessmetallicroughnesstexture&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>The metalness values are sampled from the B channel. The roughness values are sampled from the G channel&lt;/p>
&lt;/blockquote>
&lt;h3 id="unity">Unity&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://docs.unity3d.com/Manual/StandardShaderMaterialParameterMetallic.html">https://docs.unity3d.com/Manual/StandardShaderMaterialParameterMetallic.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>the Metallic levels for the material are controlled by the values in the Red channel of the texture
the Smoothness levels for the material are controlled by the Alpha channel of the texture&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://docs.unity3d.com/Manual/StandardShaderMaterialParameterOcclusionMap.html">https://docs.unity3d.com/Manual/StandardShaderMaterialParameterOcclusionMap.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>G channel を使うというドキュメントを探しています。&lt;/p>
&lt;h3 id="metallicroughness-テクスチャー">&lt;code>MetallicRoughness&lt;/code> テクスチャー&lt;/h3>
&lt;ul>
&lt;li>glTF の Metallic =&amp;gt; Blue&lt;/li>
&lt;li>glTF の Roughness =&amp;gt; Green&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.pbrMetallicRoughness.schema.json#L45">https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.pbrMetallicRoughness.schema.json#L45&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The metalness values are sampled from the B channel. The roughness values are sampled from the G channel.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Unity の Standard(Metallic Alpha) の Metallic =&amp;gt; Alpha&lt;/li>
&lt;li>Unity の Standard(Metallic Alpha) の Smooth =&amp;gt; Red&lt;/li>
&lt;/ul>
&lt;p>となっており RGBA の割り当てと &lt;code>Roughness&lt;/code>, &lt;code>Smoothness&lt;/code> の持ち方が異なります。
UniGLTF ではまず &lt;code>png/jpg&lt;/code> をロードして、それを元に変換テクスチャを作成します。&lt;/p>
&lt;h3 id="occlusion-テクスチャー">&lt;code>Occlusion&lt;/code> テクスチャー&lt;/h3>
&lt;h2 id="unity-の-linear-の-テクスチャーの挙動について">Unity の linear の テクスチャーの挙動について&lt;/h2>
&lt;h3 id="runtime">Runtime&lt;/h3>
&lt;p>new する場合は、&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> texture = &lt;span style="color:#069;font-weight:bold">new&lt;/span> Texture2D(width, height, format, mipChain, linear = &lt;span style="color:#069;font-weight:bold">true&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とする。&lt;/p>
&lt;h3 id="asset">Asset&lt;/h3>
&lt;p>AssetFolder の png/jpg からloadする場合は、
ロードする前に設定が必用。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> textureImporter = AssetImporter.GetAtPath(assetPath) &lt;span style="color:#069;font-weight:bold">as&lt;/span> TextureImporter;
textureImporter.sRGBTexture = &lt;span style="color:#069;font-weight:bold">false&lt;/span>; &lt;span style="color:#09f;font-style:italic">// Linear
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>textureImporter.SaveAndReimport();
&lt;span style="color:#09f;font-style:italic">// linear でロードされます
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#078;font-weight:bold">var&lt;/span> texture =AssetDatabase.LoadAssetAtPath&amp;lt;Texture2D&amp;gt;(assetPath);
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unity-の-normalmap-の挙動について">Unity の NormalMap の挙動について&lt;/h2>
&lt;blockquote>
&lt;p>MToon の NormalMap も同じです&lt;/p>
&lt;/blockquote>
&lt;h3 id="runtime-1">Runtime&lt;/h3>
&lt;p>new する場合は、&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> texture = &lt;span style="color:#069;font-weight:bold">new&lt;/span> Texture2D(width, height, format, mipChain, linear = &lt;span style="color:#069;font-weight:bold">true&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>とする。
また、 &lt;code>DXT5nm&lt;/code> という仕様で格納する必要があるので変換します。
y と w の２要素だけを使います。&lt;/p>
&lt;pre>&lt;code class="language-hlsl" data-lang="hlsl">half4 normal;
normal.x = 1.0;
normal.y = col.y;
normal.z = 1.0;
normal.w = col.x;
&lt;/code>&lt;/pre>&lt;h3 id="asset-1">Asset&lt;/h3>
&lt;p>AssetFolder の png/jpg からloadする場合は、
ロードする前に設定が必用。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#078;font-weight:bold">var&lt;/span> textureImporter = AssetImporter.GetAtPath(assetPath) &lt;span style="color:#069;font-weight:bold">as&lt;/span> TextureImporter;
textureImporter.textureType = TextureImporterType.NormalMap; &lt;span style="color:#09f;font-style:italic">// normalMap
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>textureImporter.SaveAndReimport();
&lt;span style="color:#09f;font-style:italic">// DXT5nm でロードされます。
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#078;font-weight:bold">var&lt;/span> texture =AssetDatabase.LoadAssetAtPath&amp;lt;Texture2D&amp;gt;(assetPath);
&lt;/code>&lt;/pre>&lt;/div>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;code>v0.69.0&lt;/code> で修正されます。https://github.com/vrm-c/UniVRM/issues/388 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>