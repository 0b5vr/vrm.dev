<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – GLTF</title><link>https://vrm.dev/docs/univrm/gltf/</link><description>Recent content in GLTF on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 07 Jan 2021 14:04:51 +0900</lastBuildDate><atom:link href="https://vrm.dev/docs/univrm/gltf/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: GLTFについて</title><link>https://vrm.dev/docs/univrm/gltf/gltf_about/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/gltf_about/</guid><description>
&lt;p>glTFはOpenGLの仕様策定をしているKHRONOSによる3Dフォーマットです。2017年にVersion2が策定されました。
VRMはglTF2.0をベースとしたフォーマットとなっています。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF">https://github.com/KhronosGroup/glTF&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gltfはどんな情報を記録できるのか">glTFはどんな情報を記録できるのか&lt;/h2>
&lt;ul>
&lt;li>メッシュ(頂点配列、インデックス配列)
&lt;ul>
&lt;li>モーフターゲット&lt;/li>
&lt;li>スキニング(4weight)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テクスチャ&lt;/li>
&lt;li>マテリアル(PBR)&lt;/li>
&lt;li>シーン&lt;/li>
&lt;li>アニメーション&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>カメラ&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>光源&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;p>3Dのシーン全体を記録できます。&lt;/p>
&lt;ul>
&lt;li>OpenGLの右手系Y-UP座標&lt;/li>
&lt;li>メートル単位&lt;/li>
&lt;li>リトルエンディアン&lt;/li>
&lt;/ul>
&lt;h2 id="gltfフォーマット概説">glTFフォーマット概説&lt;/h2>
&lt;p>JSON記述部と、画像や頂点配列を記録するバイナリ部の２つの部分からなります。&lt;/p>
&lt;p>gltf形式では、URLやパスで参照する方法で外部のバイナリデータにアクセスします。
glb形式ではJSON部とバイナリ部をひとつのファイルにまとめていて、バイト列のオフセットでバイナリデータにアクセスします。
プログラムから扱うには外部ファイルへのアクセスが無いglb形式の方が簡単&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>です。&lt;/p>
&lt;h2 id="glb形式">glb形式&lt;/h2>
&lt;p>&lt;code>ヘッダ部 + チャンク部繰り返し&lt;/code>という構造になっています。
実質的には、
&lt;code>ヘッダ部 + JSON CHUNk + BINARY CHUNK&lt;/code>となります。&lt;/p>
&lt;p>ヘッダ部&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">長さ&lt;/th>
&lt;th align="left">内容&lt;/th>
&lt;th align="left">型&lt;/th>
&lt;th align="left">値&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">&lt;/td>
&lt;td align="left">ascii&lt;/td>
&lt;td align="left">&amp;ldquo;glTF&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">gltfバージョン&lt;/td>
&lt;td align="left">int32&lt;/td>
&lt;td align="left">2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">file size&lt;/td>
&lt;td align="left">int32&lt;/td>
&lt;td align="left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>チャンク部&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">長さ&lt;/th>
&lt;th align="left">内容&lt;/th>
&lt;th align="left">型&lt;/th>
&lt;th align="left">値&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">chunk size&lt;/td>
&lt;td align="left">int32&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">4&lt;/td>
&lt;td align="left">chunk type&lt;/td>
&lt;td align="left">ascii&lt;/td>
&lt;td align="left">&amp;ldquo;JSON&amp;rdquo; or &amp;ldquo;BIN\x00&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">chunk size&lt;/td>
&lt;td align="left">chunk body&lt;/td>
&lt;td align="left">バイト列&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="python3によるパース例">python3によるパース例&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#069;font-weight:bold">import&lt;/span> &lt;span style="color:#0cf;font-weight:bold">struct&lt;/span>
&lt;span style="color:#069;font-weight:bold">import&lt;/span> &lt;span style="color:#0cf;font-weight:bold">json&lt;/span>
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">Reader&lt;/span>:
&lt;span style="color:#069;font-weight:bold">def&lt;/span> __init__(self, data: &lt;span style="color:#366">bytes&lt;/span>)&lt;span style="color:#555">-&amp;gt;&lt;/span>None:
self&lt;span style="color:#555">.&lt;/span>data &lt;span style="color:#555">=&lt;/span> data
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">=&lt;/span> &lt;span style="color:#f60">0&lt;/span>
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">read_str&lt;/span>(self, size):
result &lt;span style="color:#555">=&lt;/span> self&lt;span style="color:#555">.&lt;/span>data[self&lt;span style="color:#555">.&lt;/span>pos: self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+&lt;/span> size]
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+=&lt;/span> size
&lt;span style="color:#069;font-weight:bold">return&lt;/span> result&lt;span style="color:#555">.&lt;/span>strip()
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">read&lt;/span>(self, size):
result &lt;span style="color:#555">=&lt;/span> self&lt;span style="color:#555">.&lt;/span>data[self&lt;span style="color:#555">.&lt;/span>pos: self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+&lt;/span> size]
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+=&lt;/span> size
&lt;span style="color:#069;font-weight:bold">return&lt;/span> result
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">read_uint&lt;/span>(self):
result &lt;span style="color:#555">=&lt;/span> struct&lt;span style="color:#555">.&lt;/span>unpack(&lt;span style="color:#c30">&amp;#39;I&amp;#39;&lt;/span>, self&lt;span style="color:#555">.&lt;/span>data[self&lt;span style="color:#555">.&lt;/span>pos:self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+&lt;/span> &lt;span style="color:#f60">4&lt;/span>])[&lt;span style="color:#f60">0&lt;/span>]
self&lt;span style="color:#555">.&lt;/span>pos &lt;span style="color:#555">+=&lt;/span> &lt;span style="color:#f60">4&lt;/span>
&lt;span style="color:#069;font-weight:bold">return&lt;/span> result
&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">parse_glb&lt;/span>(data: &lt;span style="color:#366">bytes&lt;/span>):
reader &lt;span style="color:#555">=&lt;/span> Reader(data)
magic &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_str(&lt;span style="color:#f60">4&lt;/span>)
&lt;span style="color:#069;font-weight:bold">if&lt;/span> magic &lt;span style="color:#555">!=&lt;/span> &lt;span style="color:#c30">b&lt;/span>&lt;span style="color:#c30">&amp;#39;glTF&amp;#39;&lt;/span>:
&lt;span style="color:#069;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span>(f&lt;span style="color:#c30">&amp;#39;magic not found: #{magic}&amp;#39;&lt;/span>)
version &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_uint()
&lt;span style="color:#069;font-weight:bold">if&lt;/span> version &lt;span style="color:#555">!=&lt;/span> &lt;span style="color:#f60">2&lt;/span>:
&lt;span style="color:#069;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span>(f&lt;span style="color:#c30">&amp;#39;version:#{version} is not 2&amp;#39;&lt;/span>)
size &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_uint()
size &lt;span style="color:#555">-=&lt;/span> &lt;span style="color:#f60">12&lt;/span>
json_str &lt;span style="color:#555">=&lt;/span> None
body &lt;span style="color:#555">=&lt;/span> None
&lt;span style="color:#069;font-weight:bold">while&lt;/span> size &lt;span style="color:#555">&amp;gt;&lt;/span> &lt;span style="color:#f60">0&lt;/span>:
&lt;span style="color:#09f;font-style:italic">#print(size)&lt;/span>
chunk_size &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_uint()
size &lt;span style="color:#555">-=&lt;/span> &lt;span style="color:#f60">4&lt;/span>
chunk_type &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read_str(&lt;span style="color:#f60">4&lt;/span>)
size &lt;span style="color:#555">-=&lt;/span> &lt;span style="color:#f60">4&lt;/span>
chunk_data &lt;span style="color:#555">=&lt;/span> reader&lt;span style="color:#555">.&lt;/span>read(chunk_size)
size &lt;span style="color:#555">-=&lt;/span> chunk_size
&lt;span style="color:#069;font-weight:bold">if&lt;/span> chunk_type &lt;span style="color:#555">==&lt;/span> &lt;span style="color:#c30">b&lt;/span>&lt;span style="color:#c30">&amp;#39;BIN&lt;/span>&lt;span style="color:#c30;font-weight:bold">\x00&lt;/span>&lt;span style="color:#c30">&amp;#39;&lt;/span>:
body &lt;span style="color:#555">=&lt;/span> chunk_data
&lt;span style="color:#069;font-weight:bold">elif&lt;/span> chunk_type &lt;span style="color:#555">==&lt;/span> &lt;span style="color:#c30">b&lt;/span>&lt;span style="color:#c30">&amp;#39;JSON&amp;#39;&lt;/span>:
json_str &lt;span style="color:#555">=&lt;/span> chunk_data
&lt;span style="color:#069;font-weight:bold">else&lt;/span>:
&lt;span style="color:#069;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">Exception&lt;/span>(f&lt;span style="color:#c30">&amp;#39;unknown chunk_type: {chunk_type}&amp;#39;&lt;/span>)
&lt;span style="color:#069;font-weight:bold">return&lt;/span> json&lt;span style="color:#555">.&lt;/span>loads(json_str), body
&lt;span style="color:#069;font-weight:bold">with&lt;/span> &lt;span style="color:#366">open&lt;/span>(&lt;span style="color:#c30">&amp;#39;AliciaSolid.vrm&amp;#39;&lt;/span>, &lt;span style="color:#c30">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#069;font-weight:bold">as&lt;/span> f:
parsed, body &lt;span style="color:#555">=&lt;/span> parse_glb(f&lt;span style="color:#555">.&lt;/span>read())&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="vrmによる拡張情報">VRMによる拡張情報&lt;/h2>
&lt;p>JSONの&lt;code>json['extensions']['VRM']&lt;/code>以下に格納されています。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.ja.md">VRM仕様&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="vrmのgltf部分を3d-builderで表示する">VRMのglTF部分を3D Builderで表示する&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/alicia_3dbuilder.png" />
&lt;p>～.vrmとなっているファイル拡張子を ～.glb に変更すると、&lt;strong>Windows 10標準搭載の3D Builderで読み込み確認することができます&lt;/strong>（ただしVRM独自の設定は反映されません)。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>VRMではサポートしていません &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>VRMではglbを採用しています。 &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Docs: UniGLTF</title><link>https://vrm.dev/docs/univrm/gltf/unigltf/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/unigltf/</guid><description>
&lt;p>この記事は、 &lt;code>UniVRM-0.63.2&lt;/code> 以降を対象としています。&lt;/p>
&lt;p>&lt;code>UniVRM&lt;/code> に内包されていた &lt;code>UniGLTF&lt;/code> を単体で使えるように整理しました。
&lt;code>Assets/UniGLTF&lt;/code> フォルダに展開されます。&lt;/p>
&lt;h2 id="unitypackage">UnityPackage&lt;/h2>
&lt;p>&lt;code>UniVRM-0.XX.unitypackage&lt;/code> でインストールできます。
&lt;code>Assets/VRM&lt;/code> を削除すると &lt;code>glTF&lt;/code> 関連の機能だけを単体で利用できます。&lt;/p>
&lt;h2 id="upm">UPM&lt;/h2>
&lt;p>UniGLTF は　VRMShaders に依存しています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.63.2&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.63.2&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unigltf-に含まれる機能">UniGLTF に含まれる機能&lt;/h2>
&lt;ul>
&lt;li>glTF/glb の読み書き&lt;/li>
&lt;/ul>
&lt;h3 id="gltf拡張">glTF拡張&lt;/h3>
&lt;ul>
&lt;li>KHR_materials_unlit の読み書き
&lt;ul>
&lt;li>unityの unlit 系マテリアルのエクスポート&lt;/li>
&lt;li>VRMShadersの &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">UniUnlit&lt;/a> shader としてのインポート&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>KHR_texture_transform の読み書き&lt;/li>
&lt;li>morphTarget(blendShape)の名前を &lt;code>/meshes/*/primitives/*/extras/targetNames&lt;/code>, &lt;code>/meshes/*/extras/targetNames&lt;/code> に読み書きする&lt;/li>
&lt;/ul></description></item><item><title>Docs: Glbインポート</title><link>https://vrm.dev/docs/univrm/gltf/glb_import/</link><pubDate>Mon, 12 Oct 2020 17:04:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/glb_import/</guid><description>
&lt;h2 id="エディタモードでglbファイルをインポートする">エディタモードでGlbファイルをインポートする&lt;/h2>
&lt;p>インポートする手順は&lt;a href="https://vrm.dev/docs/univrm/import/univrm_import/">VRM import&lt;/a>と同じです。UnityのAssetsにドラッグ＆ドロップするだけでGlbファイルをインポートできます。&lt;/p>
&lt;p>&lt;code>v0.68.0&lt;/code> 以降。&lt;/p>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet&lt;/a>&lt;/p>
&lt;p>をサンプルに使っています。&lt;/p>
&lt;h3 id="reverseaxis-反転軸の設定">&lt;code>ReverseAxis&lt;/code> 反転軸の設定&lt;/h3>
&lt;p>glTFの右手系Y-UP から Unityの左手系Y-UP に変換するときに反転する軸を選択できます。&lt;/p>
&lt;ul>
&lt;li>Z軸 (v0.68.0 より前と同じ)&lt;/li>
&lt;li>X軸 (v0.68.0 から追加)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_axis.gif" width="400" />
&lt;p>選択して &lt;code>Apply&lt;/code> を押すと反映されます。&lt;/p>
&lt;h3 id="extract-materials-and-textures-">&lt;code>Extract Materials and Textures ...&lt;/code>&lt;/h3>
&lt;p>fbx の import と同様に Material と Texture が glb の配下に import されます。
この状態では、Material と Texture は Readonly で設定を変更できません。&lt;/p>
&lt;img src="https://vrm.dev/images/unigltf/glb_material_tab.jpg" width="400" />
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すことで Material と Texture を外部アセット(&lt;code>Material.asset&lt;/code>, &lt;code>Texture.png/jpg&lt;/code>) として展開します。
通常の Material と同様に設定を変更できます。&lt;/p>
&lt;img src="https://vrm.dev/images/unigltf/glb_material_tab_extracted.jpg" width="400" />
&lt;p>&lt;code>Remaped Materials&lt;/code>と &lt;code>Remaped Textures&lt;/code> に参照しているリソースが設定されます。
&lt;code>Clear&lt;/code> で extract する前の状態に戻ります。&lt;/p>
&lt;h3 id="glb-の-extract">glb の extract&lt;/h3>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&lt;/a>&lt;/p>
&lt;h4 id="clear">clear&lt;/h4>
&lt;p>初期状態(clear)では、関連する Asset (Mesh, Material, Texture, AnimationClip)は SubAsset として配下にあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>texture_1.metallicRoughness&lt;/code> は、&lt;code>texture_1&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;li>&lt;code>texture_3.occlusion&lt;/code> は、 &lt;code>textrue_3&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;li>&lt;code>texture_4.normal&lt;/code> は、 &lt;code>textrue_4&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_clear.jpg" width="400" />
&lt;h4 id="extract">extract&lt;/h4>
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すと下記のように変化します。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code> の生成&lt;/li>
&lt;li>&lt;code>texture_0.jpg&lt;/code> の生成(color)&lt;/li>
&lt;li>&lt;code>texture_1.metallicRoughness.png&lt;/code> の生成。&lt;code>texture_1&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>texture_2.jpg&lt;/code> の生成(emission)&lt;/li>
&lt;li>&lt;code>texture_3.occlusion.png&lt;/code> の生成。&lt;code>textrue_3&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>texture_4.jpg&lt;/code> の生成(normalMap)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_extract.jpg" width="400" />
&lt;h3 id="gltf-の-extract">gltf の extract&lt;/h3>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&lt;/a>&lt;/p>
&lt;h4 id="clear-1">clear&lt;/h4>
&lt;p>初期状態(clear)では、関連する Asset (Mesh, Material, Texture(変換が必要なもの), AnimationClip)は SubAsset として配下にあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Default_AO.occlusion&lt;/code> は、 &lt;code>Default_AO&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;li>&lt;code>Defualt_metalRoughness.metallicRoughness&lt;/code> は、&lt;code>Defualt_metalRoughness&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;a href="https://vrm.dev/docs/univrm/shaders/texture_import/">テクスチャーのインポート&lt;/a>&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_clear.jpg" width="400" />
&lt;h4 id="extract-1">extract&lt;/h4>
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すと下記のように変化します。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code> の生成&lt;/li>
&lt;li>&lt;code>Default_AO.occlusion.png&lt;/code> の生成。&lt;code>Default_AO&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>Default_metalRoughness.metallicRoughness.png&lt;/code> の生成。&lt;code>Default_metalRoughness&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_extract.jpg" width="400" /></description></item><item><title>Docs: Glbエクスポート</title><link>https://vrm.dev/docs/univrm/gltf/how_to_create_glb/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/how_to_create_glb/</guid><description>
&lt;p>&lt;code>v0.68.0&lt;/code> 以降&lt;/p>
&lt;p>UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p>
&lt;h3 id="1-unigltfexport-unigltf-2xy-メニューからダイアログを開きます">1. &lt;code>UniGLTF/Export UniGLTF-2.X.Y&lt;/code> メニューからダイアログを開きます&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/unigltf/glb_export_dialog.jpg" alt="image">&lt;/p>
&lt;h3 id="2-exportroot-に対象の-gameiobject-をセットしてください">2. &lt;code>ExportRoot&lt;/code> に対象の GameIObject をセットしてください&lt;/h3>
&lt;p>ドラッグアンドドロップや、右の◎ボタンを押すことで選択できます。&lt;/p>
&lt;ul>
&lt;li>一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/li>
&lt;/ul>
&lt;h3 id="3-export-を押す">3. &lt;code>Export&lt;/code> を押す&lt;/h3>
&lt;p>ファイル保存ダイアログが表示されるので出力先を指定してください。&lt;/p>
&lt;h2 id="glbのエクスポート対象になるコンポーネント">Glbのエクスポート対象になるコンポーネント&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li>
&lt;/ul>
&lt;h2 id="対応しているshader">対応しているShader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code>&lt;/li>
&lt;li>&lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code>, &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="v0680-より前">&lt;code>v0.68.0&lt;/code> より前&lt;/h1>
&lt;h2 id="手順">手順&lt;/h2>
&lt;p>UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p>
&lt;h3 id="1-空のシーンを用意します">1. 空のシーンを用意します。&lt;/h3>
&lt;h3 id="2-一番親になるemptyを作成します移動回転拡縮は無し">2. 一番親になるemptyを作成します。移動・回転・拡縮は無し。&lt;/h3>
&lt;p>一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/p>
&lt;h3 id="3-エクスポートしたいオブジェクトをemptyの子にします">3. エクスポートしたいオブジェクトをemptyの子にします。&lt;/h3>
&lt;p>(この例ではCubeを作成しました。Prefab等任意のオブジェクトを追加できます)&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/root_cube.png" alt="image">&lt;/p>
&lt;h3 id="4-一番親のオブジェクトを選択してエクスポートメニューを起動します">4. 一番親のオブジェクトを選択して、エクスポートメニューを起動します。&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/menu_unigltf_export.png" alt="image">&lt;/p>
&lt;h3 id="5-ファイル名を選択して-glb-ファイルを書き出せば完了です">5. ファイル名を選択して &lt;code>glb&lt;/code> ファイルを書き出せば完了です。&lt;/h3>
&lt;h2 id="glbのエクスポート対象になるコンポーネント-1">Glbのエクスポート対象になるコンポーネント&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li>
&lt;/ul>
&lt;h2 id="対応しているshader-1">対応しているShader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code> もしくは &lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code>, &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: アニメーション</title><link>https://vrm.dev/docs/univrm/gltf/animation_exporter/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/animation_exporter/</guid><description>
&lt;p>GLTF は、Animation の定義があります。&lt;/p>
&lt;blockquote>
&lt;p>VRM は、Animation を使わないという仕様です&lt;/p>
&lt;/blockquote>
&lt;h3 id="対応バージョン">対応バージョン&lt;/h3>
&lt;ul>
&lt;li>v0.44&lt;/li>
&lt;/ul>
&lt;h3 id="対応状況">対応状況&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">KeyName&lt;/th>
&lt;th align="center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">TranslationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">RotationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ScaleKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">BlendShapeKey&lt;/td>
&lt;td align="center">×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="animatorをエクスポートする場合">Animatorをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimatorコンポーネントを追加&lt;/li>
&lt;li>AnimatorControllerを作成し、それをAnimatorのController項目に設定&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>このクリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="animationをエクスポートする場合">Animationをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimationコンポーネントを追加&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>Inspectorの設定をDebugモードにしてAnimationClipのLegacyフラグをONにする&lt;br>
&lt;img src="https://vrm.dev/images/wiki/LegacyClip.png" alt="Interpolation">&lt;/li>
&lt;li>AnimationコンポーネントのAnimation項目に作成したAnimationClipを設定&lt;/li>
&lt;li>クリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="注意事項">注意事項&lt;/h3>
&lt;ol>
&lt;li>RotationKeyのInterpolation設定をQuaternionかまたはEulerAngles(Quaternion)にすること&lt;br>
&lt;img src="https://vrm.dev/images/wiki/Interpolation.png" alt="Interpolation">&lt;/li>
&lt;li>Animatorの場合は設定されている全てのClipを検索して書き出しをしているが、ステートの状態などは出力されない&lt;/li>
&lt;li>Animator経由だと複数のアニメーションが書き込まれるが、UniGLTFのImporterが読み込むのは最初の１つだけ(UniGLTF-1.25時点）&lt;/li>
&lt;/ol></description></item><item><title>Docs: Mesh Utility</title><link>https://vrm.dev/docs/univrm/gltf/mesh_utility/</link><pubDate>Wed, 21 Apr 2021 16:09:47 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/mesh_utility/</guid><description>
&lt;h1 id="meshutility">MeshUtility&lt;/h1>
&lt;p>&lt;code>MeshUtility&lt;/code>はメッシュ処理のツールです。&lt;br>
現在利用可能な機能： &lt;code>MeshSeparator&lt;/code>、&lt;code>MeshIntegrator&lt;/code>、&lt;code>StaticMeshIntegrator&lt;/code>と&lt;code>BoneMeshEraser&lt;/code>。&lt;/p>
&lt;h2 id="使用例">使用例&lt;/h2>
&lt;p>ここでは、&lt;code>MeshSeparator&lt;/code>の使い方を紹介していきます。他の機能の使い方は大体同じです。&lt;br>
&lt;code>MeshSeparator&lt;/code>が適用されると、BlendShapeを含むメッシュは分割されます。
先ず、ヒエラルキーにモデルのGameObjectを選択します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp1.jpg" width="200" />
&lt;hr>
&lt;p>または、GameObjectを&lt;code>TargetObject&lt;/code>フィールドにドラッグ＆ドロップします。&lt;br>
メッシュ処理のウィンドウを表示するため、メニューから&lt;code>UniGLTF&lt;/code> -&amp;gt; &lt;code>MeshUtility&lt;/code> -&amp;gt; &lt;code>MeshProcessing Wizard&lt;/code>をクリックしてください：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_ja_exp2.jpg" width="800" />
&lt;hr>
&lt;p>&lt;code>Process&lt;/code>ボタンをクリックすると、処理したモデルのGameObjectを生成されます。このGameObjectを選択してエクスポータします（&lt;code>VRM0&lt;/code> -&amp;gt; &lt;code>Export UniVRM-0.xx&lt;/code>）。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp3.jpg" width="300" />
&lt;hr>
&lt;p>分割されたメッシュも&lt;code>Assets&lt;/code>フォルダーに保存されます。&lt;br>
この例では、モデルのメッシュは顔と体の2つの部分に分割された。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">顔: BlendShapeを含む 　&lt;/th>
&lt;th align="center">体: BlendShapeを含まない&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_1.jpg" width="200" />
&lt;/td>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_2.jpg" width="200" />
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="meshseparator">MeshSeparator&lt;/h3>
&lt;p>BlendShapeを含むメッシュは分割されます。BlendShapeのサイズを削減できます。&lt;/p>
&lt;h3 id="meshintegrator">MeshIntegrator&lt;/h3>
&lt;p>Prefab GameObjectのすべてのメッシュを統合します。BlendShapeを含むメッシュは独立して統合されます。&lt;/p>
&lt;h3 id="staticmeshintegrator">StaticMeshIntegrator&lt;/h3>
&lt;p>Prefab GameObjectのすべての静的メッシュを一つに統合します。&lt;/p>
&lt;h3 id="bonemesheraser">BoneMeshEraser&lt;/h3>
&lt;p>ボーン（Erase Rootのヒエラルキー）に関連するメッシュを削除します。&lt;/p></description></item><item><title>Docs: 拡張を実装する</title><link>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</guid><description>
&lt;p>&lt;code>UniVRM-0.63.2&lt;/code> から &lt;a href="https://vrm.dev/docs/univrm/gltf/unigltf/">UniGLTF&lt;/a> の構成が変わって、 &lt;code>extensions&lt;/code> / &lt;code>extras&lt;/code> の実装方法が変わりました。&lt;/p>
&lt;h2 id="gltf-拡張とは">GLTF 拡張とは&lt;/h2>
&lt;p>例 &lt;a href="https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras">https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;asset&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#f60">2.0&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;extras&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;guid&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;#34;&lt;/span>,
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>名前(JsonPath)が &lt;code>asset.extras.guid&lt;/code> で値が &lt;code>&amp;quot;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;quot;&lt;/code> です。
&lt;code>extensions&lt;/code> (&lt;code>extras&lt;/code> 。複数形に注意) の&lt;/p>
&lt;ul>
&lt;li>JsonPath。例 &lt;code>extensions.VRM&lt;/code>, &lt;code>asset.extras.guid&lt;/code>&lt;/li>
&lt;li>型、内容。例 object(VRMに関する諸々), string(guid文字列)&lt;/li>
&lt;/ul>
&lt;p>の取り決めが &lt;code>GTTF拡張&lt;/code> です。&lt;/p>
&lt;p>&lt;code>extensions&lt;/code> はオフィシャルに仕様を策定して &lt;code>JsonSchema&lt;/code> として公開する。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF/tree/master/extensions">https://github.com/KhronosGroup/glTF/tree/master/extensions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>extras&lt;/code> は &lt;code>JsonSchema&lt;/code> を作るほどでもないちょっとした追加データを手軽に追加という気持ちの違いです。仕組みは同じです。&lt;/p>
&lt;blockquote>
&lt;p>This enables glTF models to contain application-specific properties without creating a full glTF extension&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>extensions&lt;/code> は、&lt;code>{ベンダー名}_{拡張名}&lt;/code> という命名規則です。
ベンダー名は、 &lt;a href="https://github.com/KhronosGroup/glTF">https://github.com/KhronosGroup/glTF&lt;/a> に申し込んで登録できます。&lt;/p>
&lt;h2 id="unigltf-の-extensions">UniGLTF の extensions&lt;/h2>
&lt;p>&lt;code>v0.63.0&lt;/code> 以前は、&lt;code>GLTF 型&lt;/code> の &lt;code>extensions&lt;/code> フィールドに、&lt;code>GLTFExtensions&lt;/code> 型を定義して、&lt;code>VRM&lt;/code> フィールドを定義するという方法をとっていました。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">VRM&lt;/span>
{
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFExtensions&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> VRM VRM;
}
&lt;span style="color:#09f;font-style:italic">// すべての拡張の型を事前に知っている必要があり、拡張を分離できない
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTF&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GLTFExtensions extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// 個々の extensions に対して別個の型を定義する必要がある
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFMaterialExtensions&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> KHR_materials_unlit KHR_materials_unlit;
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFMaterial&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GLTFMaterialExtensions extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この設計だと GLTF と拡張を別ライブラリとして分離することができませんでした。&lt;/p>
&lt;p>&lt;code>v0.63.1&lt;/code> から設計を変更して、すべての &lt;code>extensions/extras&lt;/code> に同じ型の入れ物を使うように変更しました。
UniGLTF は &lt;code>import/export&lt;/code> の具体的な内容を知らずに中間データの入れ物として扱います。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// extensions / extras の入れ物として使う型
&lt;/span>&lt;span style="color:#09f;font-style:italic">// 実行時は、 glTFExtensionImport / glTFExtensionExport を使う
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">abstract&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">glTFExtension&lt;/span>
{
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTF&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// UniGLTFは具体的な型を知らない。利用側が処理(serialize/deserialize)する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> glTFExtension extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unigltf-の拡張の書き方">UniGLTF の拡張の書き方&lt;/h2>
&lt;p>拡張は、以下の部品要素から作れます。&lt;/p>
&lt;ul>
&lt;li>名前(JsonPath)。例: &lt;code>extensions.VRM&lt;/code>, &lt;code>materials[*].extensions.KHR_materials_unlit&lt;/code>&lt;/li>
&lt;li>拡張の型。&lt;code>T型&lt;/code>&lt;/li>
&lt;li>デシリアライザー(import)。 &lt;code>jsonバイト列 =&amp;gt; T型&lt;/code>&lt;/li>
&lt;li>シリアライザーexport)。&lt;code>T型 =&amp;gt; jsonバイト列&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="jsonpath-と-型を決める">JSONPATH と 型を決める&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">&lt;span style="color:#09f;font-style:italic">// 型
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GoodMaterial&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// `materials[*].extensions.CUSTOM_materials_good`
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> EXTENSION_NAME = &lt;span style="color:#c30">&amp;#34;CUSTOM_materials_good&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#078;font-weight:bold">int&lt;/span> GoodValue;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="import">import&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">GoodMaterial DeserializeGoodMaterial(ListTreeNode&amp;lt;JsonValue&amp;gt; json)
{
&lt;span style="color:#09f;font-style:italic">// デシリアライズ。手で書くかコード生成する(後述)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>}
&lt;span style="color:#09f;font-style:italic">// ユーティリティ関数例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#078;font-weight:bold">bool&lt;/span> TryGetExtension&amp;lt;T&amp;gt;(UniGLTF.glTFExtension extension, &lt;span style="color:#078;font-weight:bold">string&lt;/span> key, Func&amp;lt;ListTreeNode&amp;lt;JsonValue&amp;gt;, T&amp;gt; deserializer, &lt;span style="color:#069;font-weight:bold">out&lt;/span> T &lt;span style="color:#069;font-weight:bold">value&lt;/span>)
{
&lt;span style="color:#069;font-weight:bold">if&lt;/span>(material.extensions &lt;span style="color:#069;font-weight:bold">is&lt;/span> UniGLTF.glTFExtensionsImport import)
{
&lt;span style="color:#09f;font-style:italic">// null check 完了
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">foreach&lt;/span>(&lt;span style="color:#078;font-weight:bold">var&lt;/span> kv &lt;span style="color:#069;font-weight:bold">in&lt;/span> import.ObjectItems())
{
&lt;span style="color:#069;font-weight:bold">if&lt;/span>(kv.key.GetString()==key)
{
&lt;span style="color:#069;font-weight:bold">value&lt;/span> = Deserialize(kv.Value);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
}
}
}
&lt;span style="color:#069;font-weight:bold">value&lt;/span> = &lt;span style="color:#069;font-weight:bold">default&lt;/span>;
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">false&lt;/span>;
}
&lt;span style="color:#069;font-weight:bold">void&lt;/span> ImportMaterial(UniGLTF.glTFMaterial material)
{
&lt;span style="color:#09f;font-style:italic">// material の処理に割り込んで
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(TryGetExtension(material.extension, GoodMaterial.EXTENSION_NAME, DeserializeGoodMaterial, &lt;span style="color:#069;font-weight:bold">out&lt;/span> GoodMaterial good))
{
&lt;span style="color:#09f;font-style:italic">// good material 独自の処理
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="export">export&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">void&lt;/span> SerializeGoodMaterial(UniJSON.JsonFormatter f, GoodMaterial &lt;span style="color:#069;font-weight:bold">value&lt;/span>)
{
&lt;span style="color:#09f;font-style:italic">// シリアライズ。手で書くかコード生成する(後述)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>}
&lt;span style="color:#09f;font-style:italic">// ユーティリティ関数例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">public&lt;/span> ArraySegment&amp;lt;&lt;span style="color:#078;font-weight:bold">byte&lt;/span>&amp;gt; SerializeExtension&amp;lt;T&amp;gt;(T &lt;span style="color:#069;font-weight:bold">value&lt;/span>, Func&amp;lt;T, ArraySegment&amp;lt;&lt;span style="color:#078;font-weight:bold">byte&lt;/span>&amp;gt;&amp;gt; serialize)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> f = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniJSON.JsonFormatter();
serialize(f, &lt;span style="color:#069;font-weight:bold">value&lt;/span>);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> f.GetStoreBytes();
}
&lt;span style="color:#069;font-weight:bold">void&lt;/span> ExportGoodMaterial(UniGLTF.glTFMaterial material, GoodMaterial good)
{
&lt;span style="color:#09f;font-style:italic">// material の処理に割り込んで
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(!(material.extensions &lt;span style="color:#069;font-weight:bold">is&lt;/span> UniGLTF.glTFExtensionsExport export))
{
&lt;span style="color:#09f;font-style:italic">// 無かった。新規作成
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> export = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniGLTF.glTFExtensionsExport();
material.extensions = export;
}
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = SerializeExtension(good, SerializeGoodMaterial);
export.Add(GoodMaterial.EXTENSION_NAME, bytes);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="実装例">実装例&lt;/h2>
&lt;h3 id="gltf-gltf全体">GLTF: GLTF全体&lt;/h3>
&lt;p>&lt;code>C#の型からコード生成&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\GltfSerializer.g.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\GltfDeserializer.g.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>ジェネレーターの呼び出しコード&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-meshesextrastargetnames">GLTF: &lt;code>meshes[*].extras.targetNames&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\gltf_mesh_extras_targetNames.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-materialsextensionskhr_materials_unlit">GLTF: &lt;code>materials[*].extensions.KHR_materials_unlit&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_materials_unlit.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-materialsextensionskhr_texture_transform">GLTF: &lt;code>materials[*].extensions.KHR_texture_transform&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_texture_transform.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296">https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193">https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="vrm0-extensionsvrm">VRM0: &lt;code>extensions.VRM&lt;/code>&lt;/h3>
&lt;p>&lt;code>C#の型からコード生成&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\VRM\Runtime\Format\VRMSerializer.g.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\VRM\Runtime\Format\VRMDeserializer.g.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>ジェネレーターの呼び出しコード&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\VRM\Editor\VRMSerializerGenerator.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\VRM\Editor\VRMDeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41">https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209">https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="vrm1-extensionsvrmc_vrm-など">VRM1: &lt;code>extensions.VRMC_vrm&lt;/code> など&lt;/h3>
&lt;p>&lt;code>JsonSchemaからコード生成&lt;/code>&lt;/p>
&lt;p>5つの Extensions に分かれたので個別に作成。
ささる場所(JsonPath)が違うのに注意。&lt;/p>
&lt;h4 id="extensionsvrmc_vrm">&lt;code>extensions.VRMC_vrm&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\VRM&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="materialsextensionsvrmc_materials_mtoon">&lt;code>materials[*].extensions.VRMC_materials_mtoon&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\MaterialsMToon&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="nodesextensionsvrmc_node_collider">&lt;code>nodes[*].extensions.VRMC_node_collider&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\NodeCollider&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="extensionsvrmc_springbone">&lt;code>extensions.VRMC_springBone&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\SpringBone&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="extensionsvrmc_vrm_constraints">&lt;code>extensions.VRMC_vrm_constraints&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\Constraints&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="ジェネレーターの呼び出しコード">ジェネレーターの呼び出しコード&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Editor\GeneratorMenu.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="生成コードの呼び出し">生成コードの呼び出し&lt;/h4>
&lt;h2 id="コード生成">コード生成&lt;/h2>
&lt;p>JSON と C# の型との シリアライズ/デシリアライズは定型コードになるので、ジェネレーターがあります。
C# の型から生成するものと、JsonSchema から C# の型とともに生成するものがあります。&lt;/p>
&lt;h3 id="c-の型から生成">C# の型から生成&lt;/h3>
&lt;h4 id="シリアライザー">シリアライザー&lt;/h4>
&lt;p>ジェネレーターを呼び出すコードを作成します。&lt;/p>
&lt;ul>
&lt;li>元になる型&lt;/li>
&lt;li>出力先&lt;/li>
&lt;/ul>
&lt;p>の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p>
&lt;p>例&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Collections.Generic&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Reflection&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Text&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniJSON&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEditor&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">SerializerGenerator&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">const&lt;/span> BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> Begin = &lt;span style="color:#c30">@&amp;#34;// Don&amp;#39;t edit manually. This is generaged.
&lt;/span>&lt;span style="color:#c30">using System;
&lt;/span>&lt;span style="color:#c30">using System.Collections.Generic;
&lt;/span>&lt;span style="color:#c30">using UniJSON;
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">namespace UniGLTF {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30"> static public class GltfSerializer
&lt;/span>&lt;span style="color:#c30"> {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> End = &lt;span style="color:#c30">@&amp;#34;
&lt;/span>&lt;span style="color:#c30"> } // class
&lt;/span>&lt;span style="color:#c30">} // namespace
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> OutPath
{
&lt;span style="color:#069;font-weight:bold">get&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> Path.Combine(UnityEngine.Application.dataPath,
&lt;span style="color:#c30">&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfSerializer.g.cs&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Serializer&amp;#34;)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> GenerateSerializer()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> info = &lt;span style="color:#069;font-weight:bold">new&lt;/span> ObjectSerialization(&lt;span style="color:#069;font-weight:bold">typeof&lt;/span>(glTF), &lt;span style="color:#c30">&amp;#34;gltf&amp;#34;&lt;/span>, &lt;span style="color:#c30">&amp;#34;Serialize_&amp;#34;&lt;/span>);
Debug.Log(info);
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> s = File.Open(OutPath, FileMode.Create))
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> w = &lt;span style="color:#069;font-weight:bold">new&lt;/span> StreamWriter(s, &lt;span style="color:#069;font-weight:bold">new&lt;/span> UTF8Encoding(&lt;span style="color:#069;font-weight:bold">false&lt;/span>)))
{
w.Write(Begin);
info.GenerateSerializer(w, &lt;span style="color:#c30">&amp;#34;Serialize&amp;#34;&lt;/span>);
w.Write(End);
}
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;write: {0}&amp;#34;&lt;/span>, OutPath);
UnityPath.FromFullpath(OutPath).ImportAsset();
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="デシリアライザー">デシリアライザー&lt;/h4>
&lt;p>ジェネレーターを呼び出すコードを作成します。&lt;/p>
&lt;ul>
&lt;li>元になる型&lt;/li>
&lt;li>出力先&lt;/li>
&lt;/ul>
&lt;p>の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p>
&lt;p>例&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Reflection&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Text&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEditor&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">/// &amp;lt;summary&amp;gt;
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">/// Generate deserializer from ListTreeNode&amp;lt;JsonValue&amp;gt; to glTF using type reflection
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">/// &amp;lt;/summary&amp;gt;
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">DeserializerGenerator&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> Begin = &lt;span style="color:#c30">@&amp;#34;// Don&amp;#39;t edit manually. This is generaged.
&lt;/span>&lt;span style="color:#c30">using UniJSON;
&lt;/span>&lt;span style="color:#c30">using System;
&lt;/span>&lt;span style="color:#c30">using System.Collections.Generic;
&lt;/span>&lt;span style="color:#c30">using UnityEngine;
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">namespace UniGLTF {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">public static class GltfDeserializer
&lt;/span>&lt;span style="color:#c30">{
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> End = &lt;span style="color:#c30">@&amp;#34;
&lt;/span>&lt;span style="color:#c30">} // GltfDeserializer
&lt;/span>&lt;span style="color:#c30">} // UniGLTF
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> OutPath
{
&lt;span style="color:#069;font-weight:bold">get&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> Path.Combine(UnityEngine.Application.dataPath,
&lt;span style="color:#c30">&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfDeserializer.g.cs&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Deserializer&amp;#34;)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> GenerateSerializer()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> info = &lt;span style="color:#069;font-weight:bold">new&lt;/span> ObjectSerialization(&lt;span style="color:#069;font-weight:bold">typeof&lt;/span>(glTF), &lt;span style="color:#c30">&amp;#34;gltf&amp;#34;&lt;/span>, &lt;span style="color:#c30">&amp;#34;Deserialize_&amp;#34;&lt;/span>);
Debug.Log(info);
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> s = File.Open(OutPath, FileMode.Create))
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> w = &lt;span style="color:#069;font-weight:bold">new&lt;/span> StreamWriter(s, &lt;span style="color:#069;font-weight:bold">new&lt;/span> UTF8Encoding(&lt;span style="color:#069;font-weight:bold">false&lt;/span>)))
{
w.Write(Begin);
info.GenerateDeserializer(w, &lt;span style="color:#c30">&amp;#34;Deserialize&amp;#34;&lt;/span>);
w.Write(End);
}
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;write: {0}&amp;#34;&lt;/span>, OutPath);
UnityPath.FromFullpath(OutPath).ImportAsset();
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="キー出力の抑制">キー出力の抑制&lt;/h4>
&lt;p>&lt;code>index&lt;/code> に無効な値として &lt;code>-1&lt;/code> を入れる場合に、JSONではキーを出力しないとしたいことがあります。&lt;/p>
&lt;p>TODO: &lt;code>int?&lt;/code> にするべきだった&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#309">[JsonSchema(Minimum = 0)]&lt;/span>
&lt;span style="color:#078;font-weight:bold">int&lt;/span> index = -&lt;span style="color:#f60">1&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>のようにすることで、キーの出力を抑制できます。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#09f;font-style:italic">// 生成コードのキー出力例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(&lt;span style="color:#069;font-weight:bold">value&lt;/span>.index&amp;gt;=&lt;span style="color:#f60">0&lt;/span>){
&lt;/code>&lt;/pre>&lt;/div>&lt;p>何も付けないと&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#09f;font-style:italic">// 出力制御無し
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(&lt;span style="color:#069;font-weight:bold">true&lt;/span>){
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="enum-のエンコーディング">enum のエンコーディング&lt;/h4>
&lt;p>enumの値の名前を文字列で使う、enumの値の数値を使うの2種類がありえます。
enumの場合はデフォルト値が無いので必須です。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#309">[JsonSchema(EnumSerializationType = EnumSerializationType.AsInt)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> glBufferTarget target;
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309">[JsonSchema(EnumSerializationType = EnumSerializationType.AsLowerString)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> ProjectionType type;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="jsonschemaから生成">JsonSchemaから生成&lt;/h3>
&lt;p>VRM-1.0 の実装&lt;/p>
&lt;p>TODO:&lt;/p></description></item></channel></rss>