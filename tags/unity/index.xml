<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – unity</title><link>https://vrm.dev/tags/unity/</link><description>Recent content in unity on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 22 Mar 2021 14:13:01 +0900</lastBuildDate><atom:link href="https://vrm.dev/tags/unity/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Unity のバージョン</title><link>https://vrm.dev/docs/univrm/install/unity_version/</link><pubDate>Mon, 22 Mar 2021 14:13:01 +0900</pubDate><guid>https://vrm.dev/docs/univrm/install/unity_version/</guid><description>
&lt;h2 id="univrm-0560-">UniVRM-0.56.0 ～&lt;/h2>
&lt;p>Unity サポート状況は以下のようになっています。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Unity Version&lt;/th>
&lt;th>動作&lt;/th>
&lt;th>Scripting Runtime Version&lt;/th>
&lt;th>UPM&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Unity-2017&lt;/td>
&lt;td>×&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.1&lt;/td>
&lt;td>×&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.2&lt;/td>
&lt;td>×&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.3&lt;/td>
&lt;td>△&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>C#7.3。動くかもしれないが未確認&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.4 LTS&lt;/td>
&lt;td>◎&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRMの開発に使っているバージョン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.1&lt;/td>
&lt;td>○&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.2&lt;/td>
&lt;td>○&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>.Net3.5が無くなったので Scripting Runtime Version 設定が不要になった&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.3&lt;/td>
&lt;td>○&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>2019.3.4f1 から UPM(githubのサブフォルダ) が動作する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.4 LTS&lt;/td>
&lt;td>◎&lt;/td>
&lt;td>-&lt;/td>
&lt;td>○&lt;/td>
&lt;td>リリース時にUPMの動作確認をしてるバージョン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2020&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>-&lt;/td>
&lt;td>○&lt;/td>
&lt;td>Editor機能(Prefabなど)が一部動作せず。&lt;code>UniVRM-0.69.0&lt;/code> で修正&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="-univrm-055">～ UniVRM-0.55&lt;/h2>
&lt;ul>
&lt;li>Unity-5.6 以降&lt;/li>
&lt;/ul></description></item><item><title>Docs: VRMをインポートする</title><link>https://vrm.dev/docs/univrm/import/univrm_import/</link><pubDate>Mon, 12 Oct 2020 15:28:09 +0900</pubDate><guid>https://vrm.dev/docs/univrm/import/univrm_import/</guid><description>
&lt;h2 id="エディタモードでvrmファイルをインポートする">エディタモードでVRMファイルをインポートする&lt;/h2>
&lt;h3 id="1unityで空のプロジェクトを作る">1.Unityで空のプロジェクトを作る&lt;/h3>
&lt;img src="https://vrm.dev/images/vrm/unity_new_project.png" />
&lt;hr>
&lt;p>もしくは&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/new_project.jpg" />
&lt;hr>
&lt;p>Unityを起動し、プロジェクトを新規作成します。&lt;/p>
&lt;h3 id="2unityにunivrmをインストール">2.UnityにUniVRMをインストール&lt;/h3>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">UniVRM/releases&lt;/a>から最新のunitypackageをダウンロードし、&lt;code>Assets/VRM&lt;/code>、&lt;code>Assets/UniGLTF&lt;/code>及び&lt;code>Assets/VRMShaders&lt;/code>にインストールします。
&lt;strong>既存のUniVRMが存在している場合、あらかじめVRM、UniGLTF、VRMShaders、そしてMeshUtilityフォルダを削除することを推奨&lt;/strong>しています。
UniVRM-XXX.unitypackageファイルをUnityにインポートしてください。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="400" />
&lt;hr>
&lt;h3 id="3vrmファイルをunity上に読み込む">3.VRMファイルをUnity上に読み込む&lt;/h3>
&lt;p>&lt;strong>VRMファイルを、UnityのAssetsにドラッグ＆ドロップする&lt;/strong>だけで、VRMファイルがインポートされ&lt;strong>モデルデータのPrefabが生成されます&lt;/strong>。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_prefab.png" />
&lt;hr>
&lt;p>&lt;strong>VRMから生成されたPrefabをシーンに配置します&lt;/strong>。すると、モデルデータが表示されます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene2.png" />
&lt;hr>
&lt;p>読み込まれたモデルデータをHierarchyで選択すると、インスペクタに各種情報が表示されます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;hr>
&lt;h2 id="関連セクション">関連セクション&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/export/univrm_export/">VRMをエクスポートする&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: 0. Unityを用意して、UniVRMをインストールする</title><link>https://vrm.dev/docs/vrm/how_to_make_vrm/setup_unity/</link><pubDate>Wed, 26 Aug 2020 15:52:30 +0900</pubDate><guid>https://vrm.dev/docs/vrm/how_to_make_vrm/setup_unity/</guid><description>
&lt;h2 id="univrm-をダウンロードする">UniVRM をダウンロードする&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>&lt;/p>
&lt;p>から最新版をダウンロードしてください。
ファイル名は、&lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code> です。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/download_unitypackage.png" alt="download_unitypackage">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">XX YY&lt;/h4>
XX は UniVRM のバージョン。YYYY は バージョン識別 ID です。
&lt;/div>
&lt;h2 id="unity-をインストールする">Unity をインストールする&lt;/h2>
&lt;p>&lt;a href="https://create.unity3d.com/jp-howto-install-win">https://create.unity3d.com/jp-howto-install-win&lt;/a>&lt;/p>
&lt;p>UniVRMの対応するバージョンの Unity をインストールしてください。
対応するUnityのバージョンは、&lt;code>UniVRM をダウンロードする&lt;/code> の URL をご確認ください。&lt;/p>
&lt;p>推奨バージョン以外を使う場合は、 &lt;a href="https://vrm.dev/docs/univrm/install/">インストール&lt;/a> もご確認ください。&lt;/p>
&lt;h2 id="unityで空のプロジェクトを作る">Unityで空のプロジェクトを作る&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/unity_new_project.png" />
&lt;p>もしくは&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/new_project.jpg" />
&lt;p>Unityを起動し、プロジェクトを新規作成します。New→Create projectをクリック。&lt;/p>
&lt;h2 id="unity-に-univrm-unitypackage-を-import">Unity に UniVRM unitypackage を Import&lt;/h2>
&lt;p>メニューの &lt;code>Assets&lt;/code> - &lt;code>Import pacakge&lt;/code> - &lt;code>Custom Package&lt;/code> を選択して、
ダウンロードした &lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code> を選んでください。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="400" />
&lt;p>右下の &lt;code>import&lt;/code> ボタンを押します。&lt;/p>
&lt;h2 id="import-が成功したか確認する方法">import が成功したか確認する方法&lt;/h2>
&lt;p>VRM menu が表示されていれば動作しています：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm menu" />
&lt;hr>
&lt;p>前のバージョン：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu_old.jpg" alt="vrm menu old" />
&lt;hr>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Unity-2018 で menu が出てこない場合&lt;/h4>
&lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Scripting Runtime Version&lt;/code> を &lt;code>.Net4.X equivalent&lt;/code> になっていることを確認してください
&lt;/div>
&lt;h3 id="console">Console&lt;/h3>
&lt;p>Console を表示させると、Unity のエラーメッセージが見れます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/show_console.jpg" alt="show console" width="500" />
&lt;p>Console左上の clear ボタンを押して赤いメッセージが消えない場合は unitypackage のインストールに失敗しているなど、unity project に異常があります。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/error_in_console.jpg" alt="clear console" width="500" />
&lt;h2 id="manual">Manual&lt;/h2>
&lt;p>➡ &lt;a href="https://vrm.dev/docs/univrm/install/">インストール&lt;/a>&lt;/p></description></item><item><title>Docs: ブレンドシェイプの設定</title><link>https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/</guid><description>
&lt;p>UniVRM v0.45で導入された新機能は&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/blendshape_setup/">設定画面&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/">BlendShapeの状態をベイクする&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>をご覧ください。&lt;/p>
&lt;h2 id="vrmblendshapeproxy">VRMBlendShapeProxy&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxy.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>実行時のVRMBlendShapeProxyのインスペクタ。Editorをプレイ状態にすると表示されます&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>使い方は、&lt;/p>
&lt;ul>
&lt;li>BlendShapeAvatarのインスペクタで設定する(Editor)&lt;/li>
&lt;li>BlendShapeClipの値を０~１に変更する(実行時)&lt;/li>
&lt;/ul>
&lt;p>となっています。&lt;/p>
&lt;h2 id="blendshapeavatar">BlendShapeAvatar&lt;/h2>
&lt;p>このアセットのインスペクタで表情設定を作成します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyEditor.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>これをダブルクリックする&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>か&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeAvatarAsset.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>これを選択状態にする&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeAvatarEditor.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>BlendShapeEditorのインスペクタ&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>作りたい表情の名前を選択して表示を切り替えます。
以下、Funを選択した例です。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClip.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mouth_smileとeye_smileとeyeblow_smileを100にする&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>画像のように眉毛と目と口のBlendShapeがわかれているBlendShapeをグループ化して名前とプリセットを指定することができます。&lt;/p>
&lt;p>Sliderを変更してBlendShapeを作った後はApplyを押して値を記録してください。&lt;/p>
&lt;h2 id="blendshapeのプリセット">BlendShapeのプリセット&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShape_Preset.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Presetを選択する&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>BlendShapeClipに対して事前定義された名前です。
以下のものがあります。&lt;/p>
&lt;h3 id="neutral">NEUTRAL&lt;/h3>
&lt;p>標準の表情を指定します。
待機状態で使うことを想定しています。&lt;/p>
&lt;h3 id="a-i-u-e-o">A, I, U, E, O&lt;/h3>
&lt;p>リップシンクの&lt;code>あ・い・う・え・お&lt;/code>の音声に対応します。&lt;/p>
&lt;h3 id="blink">Blink&lt;/h3>
&lt;p>まばたきです。&lt;/p>
&lt;h3 id="blink_l-blink_r">Blink_L, Blink_R&lt;/h3>
&lt;p>片目だけつぶる動作です。&lt;/p>
&lt;h3 id="joy-angry-sorrow-fun">Joy, Angry, Sorrow, Fun&lt;/h3>
&lt;p>喜怒哀楽です。&lt;/p>
&lt;h3 id="lookup-lookdown-lookleft-lookright">LookUp, LookDown, LookLeft, LookRight&lt;/h3>
&lt;p>目線がモーフで制御されているタイプのモデルで使います。&lt;/p>
&lt;h3 id="unknown">Unknown&lt;/h3>
&lt;p>事前定義に無い表情などを作るときに指定します。&lt;/p>
&lt;h2 id="blendshapeproxyの値を変更する実行時">BlendShapeProxyの値を変更する(実行時)&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyRuntime.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Presetを使う&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>インスペクタから操作できます。&lt;/p>
&lt;h2 id="オプション表情を追加する">[オプション]表情を追加する&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyRuntime.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ボタンを押します&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>保存ファイルを決めます。
一番後ろのボタンを選択して名前を入力して設定を作成してください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClipOption.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ボタンを押します&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>コードからは以下のように呼び出せます。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// unknownなのでstringで呼び出し
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>proxy.ImmediatelySetValue(&lt;span style="color:#c30">&amp;#34;びっくり&amp;#34;&lt;/span>, &lt;span style="color:#f60">1.0f&lt;/span>); &lt;span style="color:#09f;font-style:italic">// 0から1で指定
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="オプションマテリアルの色をモーフする">[オプション]マテリアルの色をモーフする&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClipMaterial.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Materialモーフの設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: LookAt</title><link>https://vrm.dev/docs/univrm/lookat/univrm_lookat/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/univrm_lookat/</guid><description>
&lt;p>VRMでは頭から目標(注視点)への相対的な回転(Yaw, Pitch)を得て、
目に適用できます。&lt;/p>
&lt;ul>
&lt;li>VRMLookAtHead + VRMLookAtBoneApplyer または VRMLookAtBlendShapeApplyer の２つのコンポーネントで設定します。&lt;/li>
&lt;/ul>
&lt;h2 id="lookatの種類">LookAtの種類&lt;/h2>
&lt;p>注視点への Yaw, Pitch 角を適用する方法が以下の３種類あります。
モデルに応じて選択してください。&lt;/p>
&lt;h3 id="bone">Bone&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_bone/">eye ボーンが回転するタイプ&lt;/a>&lt;/p>
&lt;h3 id="blendshape">BlendShape&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_blendshape/">BlendShapeの頂点移動で制御するタイプ&lt;/a>&lt;/p>
&lt;h3 id="textureuv">TextureUV&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_uv/">目のテクスチャの &lt;code>UV Offset&lt;/code> で制御するタイプ&lt;/a>&lt;/p>
&lt;h2 id="vrmlookathead">VRMLookAtHead&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMLookAtHead.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMLookAtHead&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>このコンポーネントは頭から見たTargetの方向を計算します。&lt;/p>
&lt;h3 id="target">Target&lt;/h3>
&lt;blockquote>
&lt;p>Application設定 です。モデルのセットアップには使いません&lt;/p>
&lt;/blockquote>
&lt;p>注視する対象物です。目を向けたい場所にあるオブジェクトをセットしてください。
カメラをセットすればカメラ目線になります。&lt;/p>
&lt;h2 id="視線計算の基準位置">視線計算の基準位置&lt;/h2>
&lt;p>VRMFirstPerson の FirstPersonOffset で Head ボーンからの相対的な基準位置を設定できます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/firstperson.png" /></description></item><item><title>Docs: MToon</title><link>https://vrm.dev/docs/univrm/shaders/shader_mtoon/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/shaders/shader_mtoon/</guid><description>
&lt;p>&lt;a href="https://www.slideshare.net/VirtualCast/vrm-mtoon">MToonの使い方&lt;/a>&lt;/p>
&lt;h1 id="mtoon-について">MToon について&lt;/h1>
&lt;p>MToon は日本のアニメ的表現をすることを目標としています。
主色 (Lit Color) と陰色 (Shade Color) の 2 色を、Lighting パラメータや光源環境に応じて混合することでそれを実現します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_about.png" alt="alicia MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MToon を適用したニコニ立体ちゃん&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="手早く設定したい人向け">手早く設定したい人向け&lt;/h1>
&lt;h2 id="共通項目">共通項目&lt;/h2>
&lt;ul>
&lt;li>目的のマテリアルを選択し、シェーダを &lt;code>VRM/MToon&lt;/code> に変更&lt;/li>
&lt;li>&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> と &lt;code>Color-&amp;gt;Shade Color&lt;/code> に同じテクスチャを設定&lt;/li>
&lt;li>&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> は白色 &lt;code>Color-&amp;gt;Shade Color&lt;/code> は好きな陰色を設定&lt;/li>
&lt;li>&lt;code>Shading-&amp;gt;Toony&lt;/code> は好きな値。主色と影色をパキッとさせたいときは &lt;code>1&lt;/code>&lt;/li>
&lt;li>&lt;code>Rim-&amp;gt;Additive&lt;/code> は &lt;code>Spheremap&lt;/code> や &lt;code>MatCap&lt;/code> と同等のテクスチャを設定&lt;/li>
&lt;li>&lt;code>Outline-&amp;gt;Width-&amp;gt;Mode&lt;/code> は輪郭線を必要とするなら &lt;code>WorldCoordinates&lt;/code> で、しないなら &lt;code>None&lt;/code>&lt;/li>
&lt;li>&lt;code>Outline-&amp;gt;Width-&amp;gt;Width&lt;/code> は 見た目上好きな値&lt;/li>
&lt;/ul>
&lt;h2 id="普通のマテリアル">普通のマテリアル&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Shading Shift&lt;/code> は &lt;code>0&lt;/code>&lt;/li>
&lt;li>&lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> は &lt;code>1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="キャラクタの顔など影があまりついてほしくないマテリアル">キャラクタの顔など、影があまりついてほしくないマテリアル&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Shading Shift&lt;/code> はマイナスの値&lt;/li>
&lt;li>&lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> は &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="設定項目">設定項目&lt;/h1>
&lt;h2 id="準備">準備&lt;/h2>
&lt;p>目的のマテリアルを選択し、シェーダを &lt;code>VRM/MToon&lt;/code> に変更します。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/set_mtoon.png" alt="select MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Material の Shader を VRM/MToon に変更.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rendering">Rendering&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_inspector_rendering.png" alt="MToon Rendering" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Rendering Inspector に含まれる項目.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Rendering 項目では主色と影色、および描画方法を設定します。&lt;/p>
&lt;h3 id="rendering-type">Rendering Type&lt;/h3>
&lt;p>マテリアルが不透明か半透明かどうかを設定します。&lt;/p>
&lt;ul>
&lt;li>Opaque
&lt;ul>
&lt;li>不透明です。基本的には Opaque を設定することを推奨します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cutout
&lt;ul>
&lt;li>不透明ですが &lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> のアルファ値情報を参照して &lt;code>Color-&amp;gt;Alpha-&amp;gt;Cutoff&lt;/code> の値より小さな箇所の描画をスキップします。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transparent
&lt;ul>
&lt;li>半透明です。&lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> のアルファ値どおりの不透明度になります。&lt;/li>
&lt;li>デメリットとして輪郭線描画は正しく行われません。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cull-mode">Cull Mode&lt;/h3>
&lt;p>ポリゴンのどちら側の面を描画するかを設定します。&lt;/p>
&lt;ul>
&lt;li>Back
&lt;ul>
&lt;li>表側を描画します。基本的にはこの Back を選択します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Front
&lt;ul>
&lt;li>裏側を描画します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>None
&lt;ul>
&lt;li>両面を描画します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="alpha">Alpha&lt;/h3>
&lt;p>&lt;code>Rendering Type&lt;/code> が &lt;code>Cutout&lt;/code> であるときだけ設定する必要があります。&lt;/p>
&lt;ul>
&lt;li>Cutoff (&lt;code>Color-&amp;gt;Alpha&lt;/code>)
&lt;ul>
&lt;li>描画するしないのしきい値を設定します。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="color">Color&lt;/h2>
&lt;p>描画色を設定します。
テクスチャと色は乗算されます。
光が当たる主色は &lt;code>Lit Color, Alpha&lt;/code> に、光が当たらない陰色は &lt;code>Shade Color&lt;/code> に設定します。
また &lt;code>Lit Color, Alpha&lt;/code> のアルファ値には不透明度情報を設定します。&lt;/p>
&lt;h2 id="lighting">Lighting&lt;/h2>
&lt;h3 id="shading-shift">Shading Shift&lt;/h3>
&lt;p>光の当たり方に対して、主色と陰色のしきい値を調整します。
&lt;code>0&lt;/code> のとき普通のライティングになります。
マイナス値にするとアニメ的な、主色の範囲が広いライティングになります。
マイナス値のときはセルフシャドウを無効化する必要があるため、表示された警告に従い &lt;code>Shadow Receive Multiplier&lt;/code> を &lt;code>0&lt;/code> に設定する必要があります。&lt;/p>
&lt;h3 id="shading-toony">Shading Toony&lt;/h3>
&lt;p>&lt;code>Shading Shift&lt;/code> の項目における主色と陰色のしきい値付近を滑らかに変化させるか否かを設定します。
&lt;code>0&lt;/code> のときは通常の Lambert モデルのような写実寄りの滑らかさになります。
&lt;code>1&lt;/code> のときはしきい値ではっきり主色と陰色が変化するアニメ調のライティングになります。&lt;/p>
&lt;h3 id="shadow-receive-multiplier">Shadow Receive Multiplier&lt;/h3>
&lt;p>セルフシャドウや落影の影響度を設定します。
&lt;code>0&lt;/code> のときは影響を受けません。
&lt;code>1&lt;/code> のときは影響を受けます。&lt;/p>
&lt;h3 id="lightcolor-attenuation">LightColor Attenuation&lt;/h3>
&lt;p>光源の色の影響度を設定します。
&lt;code>0&lt;/code> のときは光源の色の影響を受けます。
&lt;code>1&lt;/code> のときは光源の色の影響を無効化し、光源の色の輝度だけを反映します。&lt;/p>
&lt;h3 id="rim-additive">Rim Additive&lt;/h3>
&lt;p>カメラと法線の関係による追加光源を表現します。
一般にはスフィアマップや MatCap と呼ばれます。&lt;/p>
&lt;h3 id="emission">Emission&lt;/h3>
&lt;p>光源環境によらず一定な色を設定します。&lt;/p>
&lt;h3 id="normal-map">Normal Map&lt;/h3>
&lt;p>法線マップを設定します。
右側の値は法線マップの強さを設定します。&lt;/p>
&lt;h2 id="outline">Outline&lt;/h2>
&lt;p>輪郭線を設定します。&lt;/p>
&lt;h3 id="width-mode">Width Mode&lt;/h3>
&lt;ul>
&lt;li>None
&lt;ul>
&lt;li>輪郭線を描画しません&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WorldCoordinates
&lt;ul>
&lt;li>世界に対して一定の幅の輪郭線を描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ScreenCoordinates
&lt;ul>
&lt;li>スクリーンに対して一定の幅の輪郭線を描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="width">Width&lt;/h3>
&lt;p>輪郭線の幅を設定します。
&lt;code>Width Mode&lt;/code> が &lt;code>WorldCoordinates&lt;/code> のとき単位はメートルです。&lt;/p>
&lt;h3 id="color-mode">Color Mode&lt;/h3>
&lt;ul>
&lt;li>FixedColor
&lt;ul>
&lt;li>固定色で描画します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MixedLighting
&lt;ul>
&lt;li>ライティングの影響を乗算します&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="color-1">Color&lt;/h3>
&lt;p>輪郭線の色を設定します。&lt;/p>
&lt;h3 id="color-lighting-mix">Color Lighting Mix&lt;/h3>
&lt;p>&lt;code>Color Mode&lt;/code> が &lt;code>MixedLighting&lt;/code> のとき、その乗算係数を設定します。&lt;/p></description></item><item><title>Docs: UniGLTF</title><link>https://vrm.dev/docs/univrm/gltf/unigltf/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/unigltf/</guid><description>
&lt;p>この記事は、 &lt;code>UniVRM-0.63.2&lt;/code> 以降を対象としています。&lt;/p>
&lt;p>&lt;code>UniVRM&lt;/code> に内包されていた &lt;code>UniGLTF&lt;/code> を単体で使えるように整理しました。
&lt;code>Assets/UniGLTF&lt;/code> フォルダに展開されます。&lt;/p>
&lt;h2 id="unitypackage">UnityPackage&lt;/h2>
&lt;p>&lt;code>UniVRM-0.XX.unitypackage&lt;/code> でインストールできます。
&lt;code>Assets/VRM&lt;/code> を削除すると &lt;code>glTF&lt;/code> 関連の機能だけを単体で利用できます。&lt;/p>
&lt;h2 id="upm">UPM&lt;/h2>
&lt;p>UniGLTF は　VRMShaders に依存しています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.63.2&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.63.2&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unigltf-に含まれる機能">UniGLTF に含まれる機能&lt;/h2>
&lt;ul>
&lt;li>glTF/glb の読み書き&lt;/li>
&lt;/ul>
&lt;h3 id="gltf拡張">glTF拡張&lt;/h3>
&lt;ul>
&lt;li>KHR_materials_unlit の読み書き
&lt;ul>
&lt;li>unityの unlit 系マテリアルのエクスポート&lt;/li>
&lt;li>VRMShadersの &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">UniUnlit&lt;/a> shader としてのインポート&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>KHR_texture_transform の読み書き&lt;/li>
&lt;li>morphTarget(blendShape)の名前を &lt;code>/meshes/*/primitives/*/extras/targetNames&lt;/code>, &lt;code>/meshes/*/extras/targetNames&lt;/code> に読み書きする&lt;/li>
&lt;/ul></description></item><item><title>Docs: BaseModel</title><link>https://vrm.dev/docs/univrm/humanoid/base_model/</link><pubDate>Tue, 09 Feb 2021 10:16:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/humanoid/base_model/</guid><description>
&lt;p>以下の条件を満たす &lt;code>GameObject&lt;/code> をエクスポートして VRM にできます。&lt;/p>
&lt;ul>
&lt;li>Animator がアタッチされている&lt;/li>
&lt;li>Animator に HumanoidAvatar がセットされている&lt;/li>
&lt;/ul>
&lt;h2 id="fbx">FBX&lt;/h2>
&lt;p>fbx で上記の条件を満たすには、 &lt;code>fbx importer&lt;/code> の &lt;code>rig&lt;/code> 設定で &lt;code>humanoid&lt;/code> 化してください。
fbx の prefab は、 humanoid 化すると Animator がアタッチされて &lt;code>HumanoidAvatar&lt;/code> がセットされた状態になります。&lt;/p>
&lt;p>fbx が humanoid 化できるには、&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.ja.md#%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%9C%E3%83%BC%E3%83%B3">必須のボーン&lt;/a> がすべて含まれている&lt;/li>
&lt;li>ボーンの親子関係が正しい&lt;/li>
&lt;/ul>
&lt;p>の２つの条件が必用です。&lt;/p>
&lt;ul>
&lt;li>ボーンの名前は自由です&lt;/li>
&lt;/ul>
&lt;p>参考&lt;/p>
&lt;p>&lt;a href="https://qiita.com/ousttrue/items/aead1c943855561b62e7">BlenderからUnityのHumanoid互換でfbxをエクスポートする&lt;/a>&lt;/p>
&lt;h2 id="fbx-をシーン上で加工する">FBX をシーン上で加工する&lt;/h2>
&lt;p>問題ない&lt;/p>
&lt;ul>
&lt;li>fbx prefab 内の GameObject に子 GameObject を追加する&lt;/li>
&lt;li>fbx prefab 内の GameObject を disable にする&lt;/li>
&lt;/ul>
&lt;p>うまくいかない場合あり&lt;/p>
&lt;ul>
&lt;li>fbx prefab 内の GameObject を削除する&lt;/li>
&lt;li>fbx prefab 内の GameObject を動かす(移動、回転、拡大・縮小、親の付け替え)&lt;/li>
&lt;/ul>
&lt;p>何故問題があるかというと&lt;/p>
&lt;ul>
&lt;li>HumanoidAvatar が GameObject ヒエラルキーと一致しなくなる&lt;/li>
&lt;/ul>
&lt;p>からです。
HumanoidAvatar にはおそらく、&lt;/p>
&lt;ul>
&lt;li>元の姿勢&lt;/li>
&lt;li>ヒューマンボーン(hipsなど)と GameObjectの対応関係&lt;/li>
&lt;/ul>
&lt;p>が記録されています。
これに変更を加えた場合再作成する必用があります。
下記の HumanoidComponent で作成できます。&lt;/p>
&lt;h2 id="gameobject-から手動で-humanoidavatar-を作成する">GameObject から手動で HumanoidAvatar を作成する&lt;/h2>
&lt;p>&lt;code>fbx importer&lt;/code> に頼らずに HumanoidAvatar を作成できます。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/">HumanoidComponent&lt;/a>&lt;/p>
&lt;p>これを使うと、&lt;/p>
&lt;ul>
&lt;li>人型の GLTF&lt;/li>
&lt;li>シーン上でキューブを人型に積み上げる&lt;/li>
&lt;/ul>
&lt;p>などのヒエラルキーに対して、後付けで &lt;code>HumanoidAvatar&lt;/code> を作成することができます。
HumanoidAvatar を作成した GameObject (シーン上、Prefabの両方) は エクスポートして VRM にすることができます。&lt;/p></description></item><item><title>Docs: BlendShapeのセットアップ(v0.45)</title><link>https://vrm.dev/docs/univrm/blendshape/blendshape_setup/</link><pubDate>Mon, 12 Oct 2020 18:24:15 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/blendshape_setup/</guid><description>
&lt;h2 id="blendshape関連のアセット">BlendShape関連のアセット&lt;/h2>
&lt;p>VRMをImportすると、&lt;code>モデル名から拡張子を除いた名前 + BlendShapes&lt;/code> フォルダにPresetを表すBlendShapeClipが作成されます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshapeclip_assets.png" alt="image">&lt;/p>
&lt;p>BlendShapeAvatarアセット。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshapeavatar.png" alt="image">&lt;/p>
&lt;h2 id="設定画面">設定画面&lt;/h2>
&lt;p>アセットには以下の設定画面があります。&lt;/p>
&lt;h3 id="blendshapeavatarアセットのインスペクタ">BlendShapeAvatarアセットのインスペクタ&lt;/h3>
&lt;h4 id="editorタブ">Editorタブ&lt;/h4>
&lt;p>BlendShapeClip選択・設定作成&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeavatar.png" alt="image">&lt;/p>
&lt;h4 id="listタブv045から">Listタブ(v0.45から)&lt;/h4>
&lt;p>BlendShapeClipのリスト&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/list.png" alt="image">&lt;/p>
&lt;h3 id="blendshapeclipアセットのインスペクタ">BlendShapeClipアセットのインスペクタ。&lt;/h3>
&lt;h4 id="blendshapeタブ">BlendShapeタブ&lt;/h4>
&lt;p>設定作成します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/alicia_binary.png" alt="image">&lt;/p>
&lt;h4 id="blendshape-listタブ">BlendShape Listタブ&lt;/h4>
&lt;p>BlendShapeタブで作成した値を見ることが出来ます。
あまり使わない。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_angry.png" alt="image">&lt;/p>
&lt;h4 id="material-listタブ">Material Listタブ&lt;/h4>
&lt;p>&lt;code>BlendShapeによる&lt;/code>&lt;a href="https://vrm.dev/docs/univrm/lookat/lookat_blendshape/">LookAt&lt;/a>(後述)や、BlendShapeで色を変える設定を作成することができます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/material_color.png" alt="image">&lt;/p>
&lt;h2 id="各blendshapeclipの設定">各BlendShapeClipの設定&lt;/h2>
&lt;p>各BlendShapeClipに対して顔を作ります(顔以外も可)。&lt;/p>
&lt;h3 id="1-対象のblendshapeclipを選ぶ">1. 対象のBlendShapeClipを選ぶ&lt;/h3>
&lt;p>BlendShapeAvatarのインスペクタから選択する&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeavatar.png" alt="image">&lt;/p>
&lt;p>アセットのBlendShapeClipを直接選択する&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeclip.png" alt="image">&lt;/p>
&lt;h3 id="2-スライダを操作して顔を作る">2. スライダを操作して顔を作る&lt;/h3>
&lt;p>モデルに存在するSKinnedMeshRendererの名前から、
目的のBlendShapeのスライダーを探して値を設定します。
変更値は即座に反映されます。
&lt;code>Apply&lt;/code>ボタン不要になりました(v0.45)。&lt;/p>
&lt;h3 id="3-previewの操作">3. Previewの操作&lt;/h3>
&lt;p>&lt;code>Preview Weight Slider&lt;/code> で0~1の効き具合をテストできます。&lt;/p>
&lt;p>&lt;code>左ドラッグ・右ドラッグ&lt;/code>向きを変えられます。&lt;/p>
&lt;p>&lt;code>中ドラッグ&lt;/code>移動できます。&lt;/p>
&lt;h3 id="中間値を許可しない設定v045">中間値を許可しない設定(v0.45)&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/alicia_binary.png" alt="image">&lt;/p>
&lt;p>スクリーンショットのような記号的表現でBlendShapeの中間値を表示したくない場合を想定して、二値化フラグを追加しました。四捨五入(round)で実装しています。&lt;/p>
&lt;p>ロードするアプリケーションがv0.45以降になっていると有効になります。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/binary.png" alt="image">&lt;/p></description></item><item><title>Docs: LookAt(Bone)</title><link>https://vrm.dev/docs/univrm/lookat/lookat_bone/</link><pubDate>Mon, 12 Oct 2020 18:24:15 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/lookat_bone/</guid><description>
&lt;p>VRMLookAtHead + VRMLookAtBoneApplyer の２つのコンポーネントを組み合わせます。&lt;/p>
&lt;h2 id="ボーン制御の視線-vrmlookatboneapplyer">ボーン制御の視線: VRMLookAtBoneApplyer&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMLookAtBoneApplyer.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMLookAtBoneApplyer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>VRMLookAtHeadの計算した視線方向のパラメーターをEyeBoneに適用します。&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>目標物への相対角度 yaw, pitch を、eye bone のローテンションにそのまま代入すると目が動きすぎてしまいます。&lt;/p>
&lt;ul>
&lt;li>yaw, pitch 角の上限値 =&amp;gt; Curve X Range Degree&lt;/li>
&lt;li>yaw, pitch が上限の時の eye bone の回転角度 =&amp;gt; Curve Y Range Degree&lt;/li>
&lt;/ul>
&lt;p>で設定できます。
次の４方向を設定してください。&lt;/p>
&lt;ul>
&lt;li>VerticalDown&lt;/li>
&lt;li>VerticalUp&lt;/li>
&lt;li>HorizontalOuter&lt;/li>
&lt;li>HorizontalInner&lt;/li>
&lt;/ul>
&lt;p>横方向は左右ではなく、内外になります。&lt;/p></description></item><item><title>Docs: PrefabがImportされるタイミングと上書きの注意</title><link>https://vrm.dev/docs/univrm/import/prefab_importer_behaviour/</link><pubDate>Mon, 12 Oct 2020 18:24:15 +0900</pubDate><guid>https://vrm.dev/docs/univrm/import/prefab_importer_behaviour/</guid><description>
&lt;h2 id="049">0.49&lt;/h2>
&lt;p>UnityEditorでVRMをAssetImportしたときに、Material, BlendShapeAvatarが既存の場合は上書きしません。
その場合に、Prefab からの Material, BlendShapeAvatarへの参照は既存のファイルを参照するようにしました。&lt;/p>
&lt;h2 id="046">0.46&lt;/h2>
&lt;p>UnityEditorでVRMをAssetImportしたときに、Material, BlendShapeAvatar, BlendShapeClip が既存の場合は上書きしません。
Mesh, Texture, Prefabは上書きします。&lt;/p>
&lt;p>Material, BlendShapeAvatar, BlendShapeClipはユーザーが変更しているかもしれないので上書きしないことにしました。
上書きしたい場合はImport前に削除してください。&lt;/p>
&lt;h2 id="045以前">0.45以前&lt;/h2>
&lt;p>UnityEditorでVRMをAssetImportしたときに、Mesh, Texture, Material, BlendShape, Prefabが既存の場合は上書きされます。&lt;/p></description></item><item><title>Docs: 1. VRMファイルを作成する</title><link>https://vrm.dev/how_to_make_vrm/convert_from_humanoid_model/</link><pubDate>Wed, 26 Aug 2020 15:52:06 +0900</pubDate><guid>https://vrm.dev/how_to_make_vrm/convert_from_humanoid_model/</guid><description>
&lt;h2 id="unityでhumanoidとして扱えるモデルデータを用意します">UnityでHumanoidとして扱えるモデルデータを用意します&lt;/h2>
&lt;p>ヒューマノイドモデルは、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>必ずご自分で作られたモデル、ないし、加工しVRアバターとして使うことが許諾されているモデルデータをご用意ください&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>後述しますが、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>VRMファイル自体にライセンス情報を記述する項目がありますので、特にその項目については権利者自身が設定する&lt;/strong> ようにしてください。&lt;/li>
&lt;/ul>
&lt;p>また、Humanoid として認識させるために必須のボーンがすべて含まれている必要があります。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">ベースモデル&lt;/h4>
使用可能なベースモデルの詳細は、 &lt;a href="https://vrm.dev/docs/univrm/humanoid/base_model/">BaseModel&lt;/a> を参照してください。
&lt;/div>
&lt;p>&lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.ja.md#%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%83%9C%E3%83%BC%E3%83%B3">必須ボーン&lt;/a>&lt;/p>
&lt;h2 id="unity-に-fbx-を-import-する">unity に fbx を import する&lt;/h2>
&lt;p>fbx のフォルダを unityの Assets フォルダにドロップします。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/fbx_folder.jpg" />
&lt;p>unity&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/assets_fbx.jpg" />
&lt;p>青いアイコンが fbx の asset(prefab) です。&lt;/p>
&lt;h2 id="fbx-の-material-を設定する">fbx の material を設定する&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/fbx_default.jpg" />
&lt;p>この時点では fbx importer による初期状態になっており、マテリアルがデフォルト状態(StandardShaderでColor, ColorTexture割り当てのみ。半透明設定が無いなど)なので、マテリアルを最低限設定します。
VRM 向けなので、この例では全部 &lt;code>MToon&lt;/code> にします。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Shader&lt;/h4>
VRMは、&lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">MToon&lt;/a>、&lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">Unlit&lt;/a> と &lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_standard/">Standard&lt;/a> の３種類を記録できます。
&lt;/div>
&lt;p>&lt;code>Extract Materials&lt;/code> ボタンを押して fbx のフォルダに &lt;code>Materials&lt;/code> フォルダを作成してそこを選択。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/extract_materials.jpg" alt="extract_materials" width="900" />
&lt;hr>
&lt;p>Shader をすべて &lt;code>VRM/Mtoon&lt;/code> に変更&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/change_to_mtoon.jpg" alt="change_to_mtoon" />
&lt;hr>
&lt;p>MToon の &lt;code>Shade Color&lt;/code> を白に変更&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/shade_color_to_white.jpg" alt="shade_color_to_white" />
&lt;hr>
&lt;img src="https://vrm.dev/images/vrm/alicia_preview.jpg" />
&lt;p>ちゃんとした設定はこちら。&lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">MToonの設定&lt;/a>&lt;/p>
&lt;p>手順の説明なので先に進みます。&lt;/p>
&lt;h2 id="fbx-を-humanoid-設定にする">fbx を humanoid 設定にする&lt;/h2>
&lt;p>fbx デフォルトは、generic 設定です。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/rig_generic.jpg" />
&lt;p>humanoid に変更します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/select_humanoid.jpg" />
&lt;p>&lt;code>apply&lt;/code> を押します。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">humanoid&lt;/h4>
このとき fbx importer がヒューマノイドボーンの割り当てを自動で推定します。
失敗する時もあり、成功しても間違っている場合もあります。
&lt;/div>
&lt;p>humanoid のボーン割り当て画面に入ります。&lt;/p>
&lt;p>&lt;code>configure&lt;/code> ボタンを押します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/BoneMapping.png" alt="BoneMapping" width="600" />
&lt;p>ボーンの割り当てを確認してください。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">bone&lt;/h4>
&lt;ul>
&lt;li>前髪に顎ボーンが割り当てられる&lt;/li>
&lt;li>目のハイライトに目ボーンが割り当てられる&lt;/li>
&lt;/ul>
&lt;p>などにご注意ください。
&lt;/div>
&lt;h2 id="prefab-をシーンに展開">prefab をシーンに展開&lt;/h2>
&lt;p>&lt;code>File&lt;/code> - &lt;code>New Scene&lt;/code> として、
fbx の prefab をシーンに展開します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/DragImportedModel.png" width="600" />
&lt;h2 id="fbx-の-blendshpae-の法線が乱れていないか確認する">fbx の blendshpae の法線が乱れていないか確認する&lt;/h2>
&lt;p>BlendShapeで変な影が出る場合の対策です。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/blendshape/check_blendshape_normal/">BlendShape の法線を確認しよう&lt;/a>&lt;/p>
&lt;h2 id="エクスポート">エクスポート&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>&lt;code>VRM0&lt;/code> - &lt;code>Export UniVRM-0.XX&lt;/code> を押してダイアログを表示します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;br>&lt;/p>
&lt;p>前のバージョンは &lt;code>VRM&lt;/code> - &lt;code>UniVRM-0.XX&lt;/code> - &lt;code>Export humanoid&lt;/code>。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/export058_empty.jpg" width="600" />
&lt;p>&lt;code>Export Root&lt;/code> に prefab をシーンに展開した GameObject をドロップします。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">エラー&lt;/h4>
&lt;p>エクスポートダイアログで各種エラーチェックをしています。&lt;/p>
&lt;ul>
&lt;li>赤いメッセージは解決する必要があります。&lt;/li>
&lt;li>黄色いメッセージは無視してエクスポートできます。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/export/univrm_export/">エクスポートダイアログ&lt;/a>&lt;/p>
&lt;/div>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/export_dialog_title_version_author.jpg" width="900" />
&lt;br>
ライセンス情報を入力してください。赤いメッセージな無くなれば Export を押せます。
次の作業のため、&lt;code>Assets/models/vrm&lt;/code> フォルダを作成してそこにエクスポートしました。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">エクスポート先&lt;/h4>
エクスポート先には、Unity の Assets 内、外どちらでも選択できます。
Assets 内を選択すると、Export 直後に Import が発動します(Importの方が重い)。
Assets 内を選択する場合は、新規に専用のフォルダを作成すると分かりやすくなります。
&lt;/div>
&lt;h2 id="エクスポートオプション">エクスポートオプション&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export_options.jpg" width="900" />
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">T-Poseにする&lt;/h4>
自動で T-Pose 化します。このオプションを使わずにシーン上で見た目で T-Pose にしても問題ありません。
&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Pose Freeze&lt;/h4>
エクスポート時に正規化します。
最新版は、 &lt;code>ExportRoot&lt;/code> をセットしたときにヒエラルキーに回転・拡縮があるかどうかを調べて、このチェックボックスを自動で設定するようになっています。
&lt;/div></description></item><item><title>Docs: UniUnlit</title><link>https://vrm.dev/docs/univrm/shaders/univrm_unlit/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_unlit/</guid><description>
&lt;h2 id="unigltfuniunlit-シェーダー">&lt;code>UniGLTF/UniUnlit&lt;/code> シェーダー&lt;/h2>
&lt;p>Unity の &lt;code>Unlit&lt;/code> 系シェーダーは、機能ごとに&lt;/p>
&lt;ul>
&lt;li>Unlit/Color&lt;/li>
&lt;li>Unlit/Texture&lt;/li>
&lt;li>Unlit/Transparent&lt;/li>
&lt;li>Unlit/Transparent Cutout&lt;/li>
&lt;/ul>
&lt;p>のように分かれています。&lt;/p>
&lt;p>また、&lt;code>GLTF&lt;/code> では設定可能なのだけど、標準の &lt;code>Unlit&lt;/code> 系シェーダーでは再現できない組み合わせがあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Texture&lt;/code> かつ &lt;code>Color&lt;/code> の乗算&lt;/li>
&lt;li>頂点カラー&lt;/li>
&lt;/ul>
&lt;p>これらを解決する、統一 &lt;code>unlit&lt;/code> シェーダーとして &lt;code>UniGLTF/UniUnlit&lt;/code> があります。&lt;/p>
&lt;p>&lt;code>UniVRM&lt;/code> で、&lt;code>GLTF&lt;/code> で &lt;code>Unlit&lt;/code> 設定のマテリアルをインポートすると、
すべて &lt;code>UniGLTF/UniUnlit&lt;/code> 使うようになります。&lt;/p>
&lt;p>エクスポートしてからインポートする場合の対応表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>export&lt;/th>
&lt;th>gltf&lt;/th>
&lt;th>import&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Unlit/Color&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Texture&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Transparent&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit/Transparent Cutout&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitTexture&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitTransparent&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VRM/UnlitCutout&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;td>KHR_materials_unlit&lt;/td>
&lt;td>UniGLTF/UniUnlit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>なお、UniVRM がサポートするシェーダーの中で、&lt;code>UniGLTF/UniUnlit&lt;/code> だけが頂点カラーをサポートしています。&lt;/p>
&lt;ul>
&lt;li>Meshに頂点カラーが含まれている&lt;/li>
&lt;li>Materialが &lt;code>Unlit&lt;/code> 判定である&lt;/li>
&lt;/ul>
&lt;p>場合に、import すると頂点カラーが適用されます。
頂点カラーが不要であるモデルに、Unity の &lt;code>unlit&lt;/code> 系マテリアルを適用してエクスポートすると、
次にインポートするときに意図せずに色が変わる場合があります。
この場合、エクスポート時に &lt;code>RemoveVertexColor&lt;/code> を有効にすることで、頂点カラーを含まない &lt;code>Mesh&lt;/code> をエクスポートすることができます。&lt;/p>
&lt;h2 id="gltf">GLTF&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">UniUnlit&lt;/th>
&lt;th align="left">GLTF Unlit&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">カラーファクター&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorFactor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">カラーテクスチャ&lt;/td>
&lt;td align="left">/materials/pbrMetallicRoughness/baseColorTexture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">レンダリングモード&lt;/td>
&lt;td align="left">/materials/alphaMode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">カリングモード&lt;/td>
&lt;td align="left">/materials/doubleSided&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: エクスポートダイアログ</title><link>https://vrm.dev/docs/univrm/export/univrm_export/</link><pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/export/univrm_export/</guid><description>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>用語&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Root&lt;/td>
&lt;td>エクスポート対象となる一番親のオブジェクト(ひとつだけ)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ヒエラルキー&lt;/td>
&lt;td>Root自身と子孫全部&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="v058">v0.58~&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export062_dialog.png" alt="vrm export" width="900" />
&lt;p>Unityの &lt;a href="https://docs.unity3d.com/ScriptReference/EditorWindow.html">EditorWindow&lt;/a> で画面を作成しています。&lt;/p>
&lt;h3 id="使い方">使い方&lt;/h3>
&lt;h4 id="window-を表示する">Window を表示する&lt;/h4>
&lt;p>以前と同じメニューから表示できます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>前のバージョン：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;ul>
&lt;li>シーン側でエクスポート可能なオブジェクトを先に選択する必要が無くなりました&lt;/li>
&lt;/ul>
&lt;h4 id="対象のオブジェクトをセットする">対象のオブジェクトをセットする&lt;/h4>
&lt;ul>
&lt;li>Drag&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/export058_drag.gif" alt="vrm export" width="600" />
&lt;ul>
&lt;li>Selector&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/export058_select.gif" alt="vrm export" width="600" />
&lt;h4 id="exportrootの条件">ExportRootの条件&lt;/h4>
&lt;img src="https://vrm.dev/images/vrm/export058_empty.jpg" alt="vrm export" width="600" />
&lt;p>ExportRoot が以下の条件を満たすと設定画面が表示されます。&lt;/p>
&lt;ul>
&lt;li>Root である(親が無い)&lt;/li>
&lt;li>Root に回転・スケールが無い(移動は可能)&lt;/li>
&lt;li>ヒューマノイドである(Animatorコンポーネントがアタッチしてあり、Humanoid.Avatarがセットしてある)&lt;/li>
&lt;li>Z+向きである(左足と右足のボーン位置から判定)&lt;/li>
&lt;li>ヒエラルキーの中に enable な mesh を含む&lt;/li>
&lt;/ul>
&lt;h4 id="エクスポート設定画面">エクスポート設定画面&lt;/h4>
&lt;p>Metaやエクスポートオプションを設定してください。
警告は修正するかしないかを判断して、問題無ければ無視してください。
選択状態のオブジェクトがエクスポート可能であれば、ダイアログ右下の &lt;code>export&lt;/code> ボタンを押すことができるようになります。
VRMモデルのファイルサイズの詳しい内容は&lt;a href="https://vrm.dev/docs/univrm/export/vrm_size/">こちら&lt;/a>を参考してください。&lt;/p>
&lt;h2 id="オプション">オプション&lt;/h2>
&lt;p>エクスポートのオプションです。
チェックするとエクスポート前に追加の処理を実行します。&lt;/p>
&lt;h3 id="force-t-pose">Force T Pose&lt;/h3>
&lt;p>エクスポート前に強制的にT-Poseにします。
手動でだいたいT-Poseに出来た場合は、チェックしなくても問題ありません。&lt;/p>
&lt;h3 id="pose-freeze">Pose Freeze&lt;/h3>
&lt;p>モデルを正規化します。
正規化済みのモデルを再正規化する必用はありませんが、正規化されていない部品を追加した場合は必要です。
正規化されているか否かは、ヒエラルキーのすべてのGameObjectの回転が0 スケールが1 であるか否かです。&lt;/p>
&lt;blockquote>
&lt;p>0.58 では自動でチェックボックスが On/Off されます&lt;/p>
&lt;/blockquote>
&lt;h3 id="useexperimentalexporter">UseExperimentalExporter&lt;/h3>
&lt;p>シリアライザーのバージョン。
どちらでも動作します。&lt;/p>
&lt;h3 id="usesparseaccessor">UseSparseAccessor&lt;/h3>
&lt;p>BlendShapeが多数ある場合にファイルサイズを削減できます。&lt;/p>
&lt;h3 id="onlyblendshapeposition">OnlyBlendshapePosition&lt;/h3>
&lt;p>BlendShapeのNormal, Tangent をエクスポートしない。
ファイルサイズを削減できます。
UniVRM-0.53 より前のバージョンはインポート時にエラーになるのに注意してください。&lt;/p>
&lt;h3 id="reduceblendshape">ReduceBlendshape&lt;/h3>
&lt;p>BlendShapeClip設定から参照されないBlendShapeをエクスポートしない。
ファイルサイズを削減できます。&lt;/p>
&lt;h3 id="reduceblendshapeclip">ReduceBlendshapeClip&lt;/h3>
&lt;p>Presetが Unknown であるBlendShapeClipをエクスポートしない。
ReduceBlendshapeと組み合わせて使います。&lt;/p>
&lt;h3 id="removevertexcolor">RemoveVertexColor&lt;/h3>
&lt;p>頂点カラーをエクスポートしない。
GLTFには、頂点カラーを含むが使わないという設定がありません。
UniVRMでは、 &lt;code>unlit&lt;/code> のみ頂点カラー対応です。&lt;/p>
&lt;h2 id="エラー項目">エラー項目&lt;/h2>
&lt;p>バージョン毎の判定。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>message&lt;/th>
&lt;th>0.56&lt;/th>
&lt;th>0.57&lt;/th>
&lt;th>0.58&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The Root translation, rotation and scale will be dropped&lt;/td>
&lt;td>error&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>error(移動は可)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Jaw bone&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Same name bone&lt;/td>
&lt;td>error&lt;/td>
&lt;td>warn(自動リネーム)&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Vertex color&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unknown shader&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require source&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require no parent&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>error(新規)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require Z+ forward&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>error(新規)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require animator&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require humanoid avatar&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require Title/Version/Author&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>No active mesh&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prefab export&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>ok(NO_ACTIVE_MESHだった)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Springbone validation&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="require-source">Require source&lt;/h3>
&lt;p>エクスポート可能なオブジェクトをシーンで選択してださい&lt;/p>
&lt;h3 id="require-animator">Require animator.&lt;/h3>
&lt;p>RootにAnimatorコンポーネントがついていません(ヒューマノイドでない)&lt;/p>
&lt;h3 id="require-animatoravatar">Require animator.avatar&lt;/h3>
&lt;p>RootのAnimatorにavatarがありません(ヒューマノイドでない)&lt;/p>
&lt;h3 id="animatoravatar-is-not-valid">Animator.avatar is not valid.&lt;/h3>
&lt;p>RootのAnimatorのavatarが正常でない(ヒューマノイドでない)&lt;/p>
&lt;h3 id="animatoravatar-is-not-humanoid-please-change-models-animationtype-to-humanoid">Animator.avatar is not humanoid. Please change model&amp;rsquo;s AnimationType to humanoid.&lt;/h3>
&lt;p>RootのAnimatorのavatarがhumanoidでない。FBXのimport設定の rig で humanoidに変更してください&lt;/p>
&lt;h3 id="require-title">Require Title.&lt;/h3>
&lt;p>ダイアログのタイトルを入力してください(必須項目)&lt;/p>
&lt;h3 id="require-version">Require Version.&lt;/h3>
&lt;p>ダイアログのバージョンを入力してください(必須項目)&lt;/p>
&lt;h3 id="require-author">Require Author.&lt;/h3>
&lt;p>ダイアログのAuthorを入力してください(必須項目)&lt;/p>
&lt;h3 id="no-active-mesh">No active mesh&lt;/h3>
&lt;p>ヒエラルキーに active なメッシュが含まれていない&lt;/p>
&lt;h3 id="filename-0-is-too-long">FileName &amp;lsquo;{0}&amp;rsquo; is too long.&lt;/h3>
&lt;p>material, texture, mesh の名前が長すぎる。
リネームしてください&lt;/p>
&lt;h3 id="the-root-translation-rotation-and-scale-will-be-dropped">The Root translation, rotation and scale will be dropped&lt;/h3>
&lt;p>Rootに移動・回転・スケール値が設定されている。
そのままエクスポートした場合、ルートの TRS は無くなります。
移動に関しては問題がない場合が多いと思われますが、回転・スケールに関しては意図したとおりにならないこともありそうなのでご注意ください。&lt;/p>
&lt;h3 id="jaw-bone-is-included-it-may-not-what-you-intended-please-check-the-humanoid-avatar-setting-screen">Jaw bone is included. It may not what you intended. Please check the humanoid avatar setting screen&lt;/h3>
&lt;p>humanoid設定に顎が含まれている。
FBXインポート時に意図せずに自動で割り当てられる場合があります。
間違えて、前髪等が顎になっていて顎にポーズが入力した場合に微妙に動く場合があります。
FBX importer の rig 設定に戻って設定を解除することをおすすめします。&lt;/p>
&lt;h3 id="there-are-bones-with-the-same-name-in-the-hierarchy-they-will-be-automatically-renamed-after-export">There are bones with the same name in the hierarchy. They will be automatically renamed after export&lt;/h3>
&lt;p>ヒエラルキーの中に同じ名前のGameObjectが含まれている。
エクスポートした場合に自動でリネームする。&lt;/p>
&lt;h3 id="this-model-contains-vertex-color">This model contains vertex color&lt;/h3>
&lt;p>ヒエラルキーに含まれる mesh に頂点カラーが含まれている。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>頂点カラー&lt;/th>
&lt;th>含まれている挙動&lt;/th>
&lt;th>挙動&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UniVRM-0.53以前&lt;/td>
&lt;td>未対応&lt;/td>
&lt;td>含まれているけど無視する挙動&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UniVRM-0.54～&lt;/td>
&lt;td>使う&lt;/td>
&lt;td>含まれているものは使う挙動&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Unlitで頂点カラーが含まれているが使わないという設定がありせん。
必要ない場合は、&lt;code>Remove Vertex Color&lt;/code> オプションで削除できます。&lt;/p>
&lt;h3 id="unknown-material-0-is-used-this-will-export-as-standard-fallback">unknown material &amp;lsquo;{0}&amp;rsquo; is used. this will export as &lt;code>Standard&lt;/code> fallback&lt;/h3>
&lt;p>standard, unlit, mtoon 以外のマテリアルは、standard になります。&lt;/p>
&lt;h2 id="v057">v0.57&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export_dialog_56.jpg" alt="vrm export" width="600" />
&lt;p>Unityの &lt;a href="https://docs.unity3d.com/ScriptReference/ScriptableWizard.html">ScriptableWizard&lt;/a> で画面を作成しています。
v0.58 以降でダイアログを改善予定です。&lt;/p></description></item><item><title>Docs: UniVRMをインストールする</title><link>https://vrm.dev/docs/univrm/install/univrm_install/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_install/</guid><description>
&lt;h2 id="unity-version">Unity Version&lt;/h2>
&lt;ul>
&lt;li>Unity-2019.4 が推奨バージョンです。その他のバージョンは、&lt;a href="https://vrm.dev/docs/univrm/install/unity_version/">Unityのバージョン&lt;/a> を参照してください。&lt;/li>
&lt;/ul>
&lt;h2 id="unitypackage-の入手">unitypackage の入手&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>&lt;/p>
&lt;p>&lt;code>UniVRM-0.XX.X_XXXX.unitypackage&lt;/code>&lt;/p>
&lt;p>です。&lt;/p>
&lt;h2 id="インストール前の準備">インストール前の準備&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Unityで新規のプロジェクトを作成します&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Rendering&lt;/code> - &lt;code>ColorSpace&lt;/code> を &lt;code>Linear&lt;/code> に設定します(推奨)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/linear_setting.jpg" alt="linear setting" width="600" />
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Unity-2018.3, Unity-2018.4, Unity-2019.1 で作業する場合&lt;/h4>
&lt;ul>
&lt;li>&lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Scripting Runtime Version&lt;/code> を &lt;code>.Net4.X equivalent&lt;/code> にしてください&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">既存のプロジェクト&lt;/h4>
事前に、古いバージョンの VRM を削除することを推奨しています。
&lt;a href="https://vrm.dev/docs/univrm/install/univrm_uninstall/">UniVRMをアンインストール&lt;/a> を参照してください。
&lt;/div>
&lt;h2 id="unitypackage-の-import">unitypackage の import&lt;/h2>
&lt;p>&lt;code>unitypackage&lt;/code> を Import します。&lt;/p>
&lt;p>&lt;code>Assets&lt;/code> - &lt;code>Import Package&lt;/code> - &lt;code>Custom Package...&lt;/code> で &lt;code>UniVRM-0.XX.X_XXXX.unitypackage&lt;/code> を選択します。&lt;/p>
&lt;p>&lt;code>Assets/VRM&lt;/code>、&lt;code>Assets/UniGLTF&lt;/code>お及び&lt;code>Assets/VRMShaders&lt;/code> の３つのフォルダに import されます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="350" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UnityPackageをインポート&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="import-が成功したか確認する方法">import が成功したか確認する方法&lt;/h2>
&lt;p>VRM menu が表示されていれば動作しています：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm menu" />
&lt;hr>
&lt;p>前のバージョン：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu_old.jpg" alt="vrm menu old" />
&lt;hr>
&lt;p>menu が出てこない場合は、&lt;/p>
&lt;ul>
&lt;li>Console を表示させます。左上の clear ボタンを推して、エラー(赤いメッセージ)が無いことを確認してください&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/show_console.jpg" alt="show console" width="500" />
&lt;img src="https://vrm.dev/images/vrm/clear_console.jpg" alt="clear console" width="500" />
&lt;h2 id="関連セクション">関連セクション&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/how_to_make_vrm/">VRMファイルを作ってみたい&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/import/univrm_import/">VRMをインポートする&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: モデル情報</title><link>https://vrm.dev/docs/univrm/meta/univrm_meta/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/meta/univrm_meta/</guid><description>
&lt;h2 id="vrmmeta">VRMMeta&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/meta_new.jpg" alt="meta" width="800" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMMetaコンポーネント&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="情報information">情報(Information)&lt;/h3>
&lt;h4 id="タイトルtitle">タイトル(Title)&lt;/h4>
&lt;p>アバターモデルの名前を設定します&lt;/p>
&lt;h4 id="作者author">作者(Author)&lt;/h4>
&lt;p>モデルの作者の名前を記述します&lt;/p>
&lt;h4 id="連絡先contact-information">連絡先(Contact Information)&lt;/h4>
&lt;p>モデルの作者への連絡先を記述します&lt;/p>
&lt;h4 id="参照reference">参照(Reference)&lt;/h4>
&lt;p>何か「親作品」に相当するものがある場合は参照URLなどを記述します&lt;/p>
&lt;h4 id="サムネイルthumbnail">サムネイル(Thumbnail)&lt;/h4>
&lt;p>アバターモデルのサムネイルを登録します。2048x2048程度の解像度を推奨します。&lt;/p>
&lt;h4 id="バージョン">バージョン&lt;/h4>
&lt;p>モデルのバージョンを文字列で指定します。
自由に記述できます。&lt;/p>
&lt;h3 id="使用許諾ライセンス情報license">使用許諾・ライセンス情報(License)&lt;/h3>
&lt;h4 id="アバターの人格に関する許諾範囲personation--characterization-permission">アバターの人格に関する許諾範囲(Personation / Characterization Permission)&lt;/h4>
&lt;h5 id="アバターに人格を与えることの許諾範囲a-person-who-can-perform-with-this-avatar">アバターに人格を与えることの許諾範囲(A person who can perform with this avatar)&lt;/h5>
&lt;ul>
&lt;li>アバターを操作することはアバター作者にのみ許される(The avatar may only be manipulated by its creator)&lt;/li>
&lt;li>明確に許可された人限定(Authorized only to explicitly specified person)&lt;/li>
&lt;li>全員に許可(Authorized to anyone)&lt;/li>
&lt;/ul>
&lt;h5 id="このアバターを用いて暴力表現を演じることの許可permission-to-perform-violent-acts-with-this-avatar">このアバターを用いて暴力表現を演じることの許可(Permission to perform violent acts with this avatar)&lt;/h5>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h5 id="このアバターを用いて性的表現を演じることの許可permission-to-perform-sexual-acts-with-this-avatar">このアバターを用いて性的表現を演じることの許可(Permission to perform sexual acts with this avatar)&lt;/h5>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h5 id="商用利用の許可for-commercial-use">商用利用の許可(For commercial use)&lt;/h5>
&lt;ul>
&lt;li>不許可(Disallow)&lt;/li>
&lt;li>許可(Allow)&lt;/li>
&lt;/ul>
&lt;h5 id="その他のライセンス条件other-license-url">その他のライセンス条件(Other License Url)&lt;/h5>
&lt;p>上記許諾条件以外のライセンス条件がある場合はそのライセンス文書へのURLを記述&lt;/p>
&lt;h4 id="再配布改変に関する許諾範囲redistribution--modifications-license">再配布・改変に関する許諾範囲(Redistribution / Modifications License)&lt;/h4>
&lt;h5 id="ライセンスタイプlicense-type">ライセンスタイプ(License Type)&lt;/h5>
&lt;ul>
&lt;li>再配布禁止(Redistribution Prohibited)&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/publicdomain/zero/1.0/deed.ja">著作権放棄(CC0)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by/4.0/deed.ja">Creative Commons CC BYライセンス(CC_BY)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/deed.ja">Creative Commons CC BY NCライセンス(CC_BY_NC)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.ja">Creative Commons CC BY SAライセンス(CC_BY_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.ja">Creative Commons CC BY NC SAライセンス(CC_BY_NC_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nd/4.0/deed.ja">Creative Commons CC BY NDライセンス(CC_BY_ND)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja">Creative Commons CC BY NC NDライセンス(CC_BY_NC_ND)&lt;/a>&lt;/li>
&lt;li>その他(Other)&lt;/li>
&lt;/ul>
&lt;h5 id="その他ライセンス条件other-license-url">その他ライセンス条件(Other License Url)&lt;/h5>
&lt;p>上記許諾条件以外のライセンス条件がある場合はそのライセンス文書へのURLを記述&lt;/p></description></item><item><title>Docs: HumanoidComponent</title><link>https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/</link><pubDate>Thu, 15 Oct 2020 18:23:26 +0900</pubDate><guid>https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/</guid><description>
&lt;p>&lt;code>UniVRM-0.60.0&lt;/code>&lt;/p>
&lt;p>fbx が無くても、シーンから直接 humanoid avatar を作成できます。&lt;/p>
&lt;h1 id="使い方">使い方&lt;/h1>
&lt;p>ヒューマノイドボーンがあるシーンを用意します。&lt;/p>
&lt;p>例として&lt;/p>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary&lt;/a>&lt;/p>
&lt;p>で説明します。&lt;/p>
&lt;p>まず、 &lt;code>RiggedFigure.glb&lt;/code> を Asset フォルダに import してください。
UniVRM の &lt;code>glb&lt;/code> import で prefab が生成されます。&lt;/p>
&lt;p>新規のシーンに &lt;code>RiggedFigure&lt;/code> prefab をインスタンス化します。&lt;/p>
&lt;p>AddComponent で &lt;code>Humanoid&lt;/code> を追加してください。(MeshUtility.Humanoid。UniVRMに含まれています。)&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/bone_required.jpg" />
&lt;p>適当に Bone を当てはめます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/create_avatar.jpg" />
&lt;p>&lt;code>Create UnityEngine.Avatar&lt;/code> ボタンを押します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/humanoid_animator.jpg" />
&lt;p>humanoid avatar が新規に作成されます。&lt;/p>
&lt;p>このまま、T-Pose にして VRM 化することもできます。&lt;/p></description></item><item><title>Docs: LookAt(Blendshape)</title><link>https://vrm.dev/docs/univrm/lookat/lookat_blendshape/</link><pubDate>Mon, 12 Oct 2020 18:24:15 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/lookat_blendshape/</guid><description>
&lt;p>VRMLookAtHead + VRMLookAtBlendShapeApplyer の２つのコンポーネントを組み合わせます。
&lt;code>VRMLookAtBoneApplyer&lt;/code> を削除して、代わりに &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> をアタッチしてください。&lt;/p>
&lt;p>&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; VRMLookAtBlendShapeApplyer&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/add_vrm_lookat_blendshape.jpg" alt="image">&lt;/p>
&lt;h2 id="モーフ制御の視線-vrmlookatblendshapeapplyer">モーフ制御の視線: VRMLookAtBlendShapeApplyer&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_applyer.png" alt="image">&lt;/p>
&lt;p>BlendShapeで視線制御するモデル用のコンポーネントです。
事前に、 &lt;code>LookUp&lt;/code>, &lt;code>LookDown&lt;/code>, &lt;code>LookLeft&lt;/code>, &lt;code>LookRight&lt;/code> の４つの BlendShape を設定してください。&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>以下の設定で、目標物への相対角度 yaw, pitch の適用度合を調整できます。&lt;/p>
&lt;ul>
&lt;li>yaw, pitch 角の上限値 =&amp;gt; Curve X Range Degree&lt;/li>
&lt;li>yaw, pitch が上限の時の blendShape の適用割合(0 ～ 1)。1にしてください =&amp;gt; Curve Y Range Degree&lt;/li>
&lt;/ul>
&lt;p>次の３つを設定してください。&lt;/p>
&lt;ul>
&lt;li>VerticalDown&lt;/li>
&lt;li>VerticalUp&lt;/li>
&lt;li>Horizontal&lt;/li>
&lt;/ul></description></item><item><title>Docs: 2. VRMをセットアップする</title><link>https://vrm.dev/how_to_make_vrm/setup_vrm/</link><pubDate>Wed, 26 Aug 2020 15:52:30 +0900</pubDate><guid>https://vrm.dev/how_to_make_vrm/setup_vrm/</guid><description>
&lt;h2 id="vrmモデル">VRMモデル&lt;/h2>
&lt;p>前節で VRM 出力したモデルの prefab。&lt;/p>
&lt;p>&lt;strong>VRMファイルを、UnityのAssetsにドラッグ＆ドロップする&lt;/strong> だけで、VRMファイルがインポートされ &lt;strong>モデルデータのPrefabが生成されます&lt;/strong> 。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_prefab.png" />
&lt;img src="https://vrm.dev/images/vrm/vrm_components.jpg" />
&lt;/p>
&lt;ul>
&lt;li>正規化されている&lt;/li>
&lt;li>VRMMeta, Animator, VRMBlendShapeProxy, VRMFirstPerson, VRMLookAtHead, VRMLookAtBoneApplyer 等がアタッチされている&lt;/li>
&lt;/ul>
&lt;h2 id="vrm-の-prefabをシーンに展開する">VRM の Prefabをシーンに展開する&lt;/h2>
&lt;p>&lt;code>File&lt;/code> - &lt;code>New Scene&lt;/code>&lt;/p>
&lt;p>prefab をシーンに展開します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene2.png" />
&lt;h2 id="vrm独自の設定を行う">VRM独自の設定を行う&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;p>読み込まれたモデルデータをHierarchyで選択すると、&lt;strong>インスペクタにさまざまな設定項目&lt;/strong> があらわれます。また、&lt;strong>secondaryには揺れ物の設定&lt;/strong>が入っています。これらを設定していきます。
&lt;strong>少なくとも、&lt;a href="https://vrm.dev/docs/univrm/meta/univrm_meta/">タイトル・作者・ライセンス情報&lt;/a>&lt;/strong> は埋めるようにしてください。 &lt;strong>特にライセンス情報は重要です！&lt;/strong>&lt;/p>
&lt;p>ほかに、&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/">表情や口パクの設定（BlendShape）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/">一人称視点の設定（一人称視点でモデルを操作する場合、邪魔になる頭などのパーツを指定する、標準の視点位置を設定する）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/lookat/univrm_lookat/">視線・眼球の可動範囲と可動曲線の設定。ボーンによる眼球回転だけでなく、BlendShapeによる眼球アニメーションにも対応。&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/springbone/univrm_secondary/">揺れ物（SpringBone/SpringBoneCollider）の設定&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>がありますので必要に応じて設定していきます。&lt;/p>
&lt;h3 id="vrmファイルを出力する">VRMファイルを出力する&lt;/h3>
&lt;p>調整が終わったら、UnityのHierarchyでモデルデータを選択し、再度メニューから&lt;code>VRM0&lt;/code> - &lt;code>Export UniVRM-0.XX&lt;/code>を実行します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>前のバージョンは &lt;code>VRM&lt;/code> - &lt;code>UniVRM-0.XX&lt;/code> - &lt;code>Export humanoid&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;br>&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Pose Freeze&lt;/h4>
&lt;p>エクスポート時に正規化します。
最新版は、 &lt;code>ExportRoot&lt;/code> をセットしたときにヒエラルキーに回転・拡縮があるかどうかを調べて、このチェックボックスを自動で設定するようになっています。
最初の正規化以降でも、&lt;/p>
&lt;ul>
&lt;li>アクセサリを追加&lt;/li>
&lt;/ul>
&lt;p>などの場合に必要です。 &lt;code>ExportRoot&lt;/code> を再セットすれば自動判定します。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/">BlendShape の Bake&lt;/a> もあります。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="完成">完成！&lt;/h3>
&lt;p>これでセットアップ済のVRMファイルが出来ました。&lt;a href="https://vrm.dev/vrm_applications/">対応アプリケーション&lt;/a>に読み込ませてみましょう！&lt;/p></description></item><item><title>Docs: エクスポート時にBlendShapeの状態をベイクする</title><link>https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/</link><pubDate>Mon, 27 Jul 2020 19:28:41 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/univrm_bake_blendshape/</guid><description>
&lt;p>UniVRM ではエクスポートするときに、 &lt;code>SkinnedMeshRenderer&lt;/code> のスライダーを上げておくとその状態を基本状態にすることができます。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/blendshape_value.jpg" width="400" />
&lt;p>&lt;code>Pose Freeze&lt;/code> のチェックボックスを有効にする必要があります。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/check_freeze.jpg" width="400" />
&lt;p>エクスポートすると・・・&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/bake_blink.gif" />
&lt;p>基本状態(blendShape が 0 の状態)が変更されます。&lt;/p></description></item><item><title>Docs: UPMでUniVRMをインストールする</title><link>https://vrm.dev/docs/univrm/install/univrm_upm/</link><pubDate>Wed, 08 Jul 2020 11:42:13 +0900</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_upm/</guid><description>
&lt;ul>
&lt;li>&lt;code>Unity 2019.4以降&lt;/code> が必要です。&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/">Git client&lt;/a> のインストールが必要です。&lt;/li>
&lt;/ul>
&lt;h3 id="unity-向けの-git-のインストール">Unity 向けの git のインストール&lt;/h3>
&lt;p>Unity Manual &lt;a href="https://docs.unity3d.com/Manual/upm-git.html#req">Requirements&lt;/a> を参照してください。&lt;/p>
&lt;blockquote>
&lt;p>To use Git dependencies in a project, make sure the &lt;a href="https://git-scm.com/">Git client&lt;/a> is installed on your machine and that you have added the Git executable path to the PATH system environment variable.&lt;/p>
&lt;/blockquote>
&lt;p>未インストールだと&lt;/p>
&lt;blockquote>
&lt;p>An error occurred while resolving packages:
Project has invalid dependencies:
com.vrmc.vrmshaders: No &amp;lsquo;git&amp;rsquo; executable was found. Please install Git on your system then restart Unity and Unity Hub&lt;/p>
&lt;/blockquote>
&lt;p>というようなエラーが出ます。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">他のgit&lt;/h4>
&lt;p>&lt;a href="https://git-scm.com/">https://git-scm.com/&lt;/a> からインストールした git.exe (デフォルトは、 &lt;code>C:\Program Files\Git\cmd\git.exe&lt;/code>) が、Path の中で最初に見つかるように設定してください。&lt;/p>
&lt;ul>
&lt;li>powershell からバージョンを確認した例 (20201130)&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-dos" data-lang="dos">&amp;gt; git --version
git version 2.29.2.windows.2
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="unitypackagemanager-ウインドウによるインストール">UnityPackageManager ウインドウによるインストール&lt;/h3>
&lt;p>UnityPackageManagerのWindow&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/menu_packagemanager.jpg" />
&lt;hr>
&lt;p>&lt;code>add package from git URL&lt;/code>&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/from_git.jpg" />
&lt;hr>
&lt;p>新しいUniVRMバージョンがリリースされる時に、このバージョンに関連するgit urlsを公開します。&lt;/p>
&lt;p>たとえば、&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.64.0">v0.64.0&lt;/a> のgit urlは次のとおりです：&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.64.0&lt;/code>&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.64.0&lt;/code> =&amp;gt; VRMShaders に依存&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#v0.64.0&lt;/code> =&amp;gt; UniGLTFとVRMShaders に依存&lt;/li>
&lt;/ul>
&lt;p>パッケージ同士の依存関係を自動でダウンロードしてくれる機能は無いので、以上の git url を順に追加してください。&lt;/p>
&lt;p>ProjectウィンドウのPackagesフォルダにインポートしたパッケージを確認する：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/upm_package.jpg" />
&lt;hr>
&lt;p>バージョン番号を変更することで、お好きなバージョンに切り替えることができます。&lt;/p>
&lt;h3 id="packagesmanifestjson-直接編集によるインストール">packages/manifest.json 直接編集によるインストール&lt;/h3>
&lt;p>以下の内容を追記してください（&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.64.0">v0.64.0&lt;/a>の例)。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.64.0&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.64.0&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#v0.64.0&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gitの特定コミットを指定する場合">gitの特定コミットを指定する場合&lt;/h2>
&lt;p>&lt;code>dependencies&lt;/code> に特定のコミットを指定します。&lt;/p>
&lt;p>例：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#920c169d9a7fbb856d42e107ab2da01a15b45db1&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#920c169d9a7fbb856d42e107ab2da01a15b45db1&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#920c169d9a7fbb856d42e107ab2da01a15b45db1&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: VRMFirstPerson</title><link>https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/firstperson/univrm_firstperson/</guid><description>
&lt;p>２系統の設定があります。&lt;/p>
&lt;ul>
&lt;li>VRMモデル内で、VRヘッドセット位置を指定する&lt;/li>
&lt;li>VRで、メッシュごとにカメラの可視設定を分ける&lt;/li>
&lt;/ul>
&lt;p>※ アプリケーション側でこれらのパラメーターを使っている場合のみ有効です&lt;/p>
&lt;h2 id="ヘッドセットの位置指定">ヘッドセットの位置指定&lt;/h2>
&lt;p>ヘッドの動きの頭部への反映を微調整できます。&lt;/p>
&lt;h3 id="firstpersonbone">FirstPersonBone&lt;/h3>
&lt;p>通常頭ボーンを指定します。
一人称時にヘッドセットに追随させるボーンです。&lt;/p>
&lt;h3 id="firstpersonoffset">FirstPersonOffset&lt;/h3>
&lt;p>追随する位置をFirstPersonBoneの位置からオフセットします。
デフォルト値[0, 0.06, 0]は、Headから両目の間へのオフセットを想定しています。&lt;/p>
&lt;h2 id="vrの可視設定">VRの可視設定&lt;/h2>
&lt;p>VRアプリでの可視設定です。
VRアプリでは２種類のカメラが想定されます。&lt;/p>
&lt;ul>
&lt;li>一人称(HMDにレンダリングされる)&lt;/li>
&lt;li>三人称(HMD以外。配信用、鏡、マルチユーザーの他のユーザーのHMD)&lt;/li>
&lt;/ul>
&lt;p>です。
このとき、一人称で普通に自身のモデルがすべて見えると不都合があります。&lt;/p>
&lt;ul>
&lt;li>近平面で自分の輪切りが見える&lt;/li>
&lt;li>髪が邪魔で何も見えない&lt;/li>
&lt;li>自分モデルの頭部の中身が見えてしまう(歯とか)&lt;/li>
&lt;/ul>
&lt;p>など。
これらの自体に対処するために、メッシュ毎に２種類のカメラに対する可視性を設定できます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>設定&lt;/th>
&lt;th>一人称カメラ&lt;/th>
&lt;th>三人称カメラ&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Both&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>体、手、足など頭部から遠い部位を指する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FirstPersonOnly&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>&lt;/td>
&lt;td>使わない？&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ThirdPersonOnly&lt;/td>
&lt;td>&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>外部カメラしか見えない。頭部、髪、帽子などを指定する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Auto&lt;/td>
&lt;td>後述&lt;/td>
&lt;td>後述&lt;/td>
&lt;td>デフォルト&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="設定のリセット">設定のリセット&lt;/h3>
&lt;p>FirstPerson は、最初に自動で Auto の設定になるようになっています。
Mesh が増減するなどでモデルの構成が変わった場合に、参照が &lt;code>Missing&lt;/code> になるなどエクスポートできない状態になる場合があります。
VRMFirstPerson をリセットすることで再設定することができます。
リセットする方法は、&lt;/p>
&lt;p>&lt;code>VRM First Person(Script)&lt;/code> インスペクタの右上角の &lt;code>歯車アイコン ⚙&lt;/code> で表示されるメニューから &lt;code>Reset&lt;/code> を選択してください。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/firstperson_reset.gif" alt="firstperson reset" width="600" />
&lt;h3 id="auto-による-both-と-thirdpersononly-への自動分割">Auto による Both と ThirdPersonOnly への自動分割&lt;/h3>
&lt;p>設定をAutoにしておくと、ロード時にメッシュを自動で &lt;code>Both&lt;/code> と &lt;code>ThirdPersonOnly&lt;/code> に分離することを指示できます。
UniVRMでは &lt;a href="https://vrm.dev/docs/univrm/programming/univrm_use_firstperson/#実行時にsetupを呼び出してカメラにlayermaskを設定する">VRMFirstPerson.Setup()&lt;/a> を呼び出します。
Autoによる自動分割は、重めの処理になります。&lt;/p>
&lt;p>分割基準は、&lt;/p>
&lt;ul>
&lt;li>含まれる頂点が &lt;code>head&lt;/code> か &lt;code>head&lt;/code> の子孫の weight を持っているか否か&lt;/li>
&lt;/ul>
&lt;p>です。
すべて同じ側の場合は分割せずに、&lt;code>Both&lt;/code> か &lt;code>ThirdPersonOnly&lt;/code> として扱います。&lt;/p>
&lt;h3 id="推奨される構成">推奨される構成&lt;/h3>
&lt;p>あらかじめ、頭と体にモデルを分割しておき&lt;/p>
&lt;ul>
&lt;li>頭に &lt;code>ThirdPersonOnly&lt;/code> を指定&lt;/li>
&lt;li>体に &lt;code>Both&lt;/code> を指定&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/firstperson.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>立体ちゃんは頭とそれ以外が分かれているので体をBoth、頭をThirdPersonOnlyに設定します。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/firstperson_runtime.png" alt="firstperson" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>動作例。ThirdPersonOnlyに設定したメッシュがFirstPersonで非表示になりました。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: BlendShape の法線を確認しよう</title><link>https://vrm.dev/docs/univrm/blendshape/check_blendshape_normal/</link><pubDate>Tue, 17 Nov 2020 16:23:29 +0900</pubDate><guid>https://vrm.dev/docs/univrm/blendshape/check_blendshape_normal/</guid><description>
&lt;p>最近のバージョンの Unity（Unity 2018~）では、 fbx を import したときに blendshape 法線が自動で再計算される挙動になっていて blendshape の見た目がおかしくなることがあります。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">詳細&lt;/h4>
BlendShape の法線が (0, 0, 0) ならば、法線が変化しません。
これに、計算された法線が設定されて意図しない変化をするようです。
ベースになるメッシュの法線が加工されている場合、
ミラーリングで左右が分かれている場合の境界などで顕著です。
&lt;/div>
&lt;h2 id="mtoonの法線デバッグ表示で法線を確認する">MToonの法線デバッグ表示で法線を確認する&lt;/h2>
&lt;p>fbx の &lt;code>Materials&lt;/code> タブの &lt;code>Extract Materials...&lt;/code> を実行してマテリアルを取り出します。&lt;/p>
&lt;p>すべてのマテリアルを選択します。&lt;/p>
&lt;p>マテリアルの種類を &lt;code>VRM/MToon&lt;/code> に変更します。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">法線確認&lt;/h4>
法線確認のために仮に MToon 化するだけなので、テクスチャ等の設定は不要です。
&lt;/div>
&lt;p>MToon の &lt;code>Options - Debugging Options - Visualize&lt;/code> を &lt;code>Normal&lt;/code> に変更します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/mtoon_normal.gif" alt="debug normal">&lt;/p>
&lt;p>SkinnedMeshRenderer を選択します。&lt;/p>
&lt;p>BlendShape のスライダーを動かして法線を確認します。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/broken_normal.jpg" alt="debug normal">&lt;/p>
&lt;ul>
&lt;li>鼻先&lt;/li>
&lt;li>下唇&lt;/li>
&lt;/ul>
&lt;p>の法線が顕著に乱れています。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">モデル情報&lt;/h4>
&lt;ul>
&lt;li>vroid さんの vrm を blender に import&lt;/li>
&lt;li>blender から fbx export&lt;/li>
&lt;li>unity に import&lt;/li>
&lt;/ul>
&lt;p>したものです。
&lt;/div>
&lt;h2 id="blendshape-の法線をなおす">BlendShape の法線をなおす&lt;/h2>
&lt;p>上記の方法で BlendShape がおかしいことが分かった場合に修復する方法。&lt;/p>
&lt;p>fbx の &lt;code>Model&lt;/code> タブを選択。&lt;/p>
&lt;p>&lt;code>Legacy Blend Shape Normals&lt;/code> をチェックして Apply。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/legacy_normal_fixed.jpg" alt="fixed normal">&lt;/p>
&lt;p>BlendShape がなおっていることを確認します。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">修正前との違い&lt;/h4>
鼻先、下唇に加えて、舌が全然違う法線になってます。
&lt;/div></description></item><item><title>Docs: LookAt(UV)</title><link>https://vrm.dev/docs/univrm/lookat/lookat_uv/</link><pubDate>Mon, 12 Oct 2020 18:24:15 +0900</pubDate><guid>https://vrm.dev/docs/univrm/lookat/lookat_uv/</guid><description>
&lt;p>VRMLookAtHead + VRMLookAtBlendShapeApplyer の２つのコンポーネントを組み合わせます。
&lt;code>VRMLookAtBoneApplyer&lt;/code> を削除して、代わりに &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> をアタッチしてください。&lt;/p>
&lt;p>&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; VRMLookAtBlendShapeApplyer&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/add_vrm_lookat_blendshape.jpg" alt="image">&lt;/p>
&lt;h2 id="textureのuv操作による視線制御">TextureのUV操作による視線制御&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_applyer.png" alt="image">&lt;/p>
&lt;p>Textureを上下左右にスライドさせることで目線を移動させる方法です。
&lt;code>Unityちゃん&lt;/code> はこのタイプです。&lt;/p>
&lt;h2 id="目のマテリアルを探す">目のマテリアルを探す&lt;/h2>
&lt;p>マテリアルのインスペクタの目のテクスチャの &lt;code>Tiling Offset&lt;/code> の設定に注目してください。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/material_tiling_offset.png" alt="image">&lt;/p>
&lt;p>&lt;code>1, 1, 0, 0&lt;/code> になっているはずです(なっていない場合は特殊なので以降を適切に読み替えてください)。&lt;/p>
&lt;p>試しに、&lt;code>Offset&lt;/code> Xの値を増減させてみてください。目が左右に動きます。Yの値では上下に動くはずです。
目的の設定が見つかったので元に戻して次に進みます。&lt;/p>
&lt;h2 id="blendshapeの準備">BlendShapeの準備&lt;/h2>
&lt;p>LookUp, LookDown, LookLeft, LookRight が、目標のマテリアルのカラーマテリアルの UV を操作するようにします。
例では、Materialに &lt;code>unlit/transparent cutout&lt;/code> を使用しています。&lt;/p>
&lt;h3 id="lookleftの例">LookLeftの例&lt;/h3>
&lt;p>&lt;code>LookLeft&lt;/code> 選択してください。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/lookleft.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material List&lt;/code> タブを選択&lt;/li>
&lt;li>&lt;code>+&lt;/code> を選択&lt;/li>
&lt;li>&lt;code>eye_L1&lt;/code> - &lt;code>_MainTex_ST&lt;/code> を選択&lt;/li>
&lt;li>&lt;code>Tliling = 1, 1&lt;/code>, &lt;code>Offset = 0, 0&lt;/code> に設定します&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/tiling_offset_1100.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Offsetを調整してLookLeftを作ります&lt;/li>
&lt;li>&lt;code>eye_R1&lt;/code> も同様に&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/look_left.png" alt="image">&lt;/p>
&lt;p>&lt;a href="http://unity-chan.com/">© UTJ/UCL&lt;/a>&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>以下の設定で、目標物への相対角度 yaw, pitch の適用度合を調整できます。&lt;/p>
&lt;ul>
&lt;li>yaw, pitch 角の上限値 =&amp;gt; Curve X Range Degree&lt;/li>
&lt;li>yaw, pitch が上限の時の blendShape の適用割合(0 ～ 1)。1にしてください =&amp;gt; Curve Y Range Degree&lt;/li>
&lt;/ul>
&lt;p>次の３つを設定してください。&lt;/p>
&lt;ul>
&lt;li>VerticalDown&lt;/li>
&lt;li>VerticalUp&lt;/li>
&lt;li>Horizontal&lt;/li>
&lt;/ul></description></item><item><title>Docs: VRMの動作を確認する</title><link>https://vrm.dev/how_to_make_vrm/vrm_behavior_confirmation/</link><pubDate>Wed, 26 Aug 2020 15:52:48 +0900</pubDate><guid>https://vrm.dev/how_to_make_vrm/vrm_behavior_confirmation/</guid><description>
&lt;p>このセクションでは、作成したVRMモデルをUnity上で再生し挙動を確認することを想定しています。&lt;/p>
&lt;h3 id="目の動きを確認する">目の動きを確認する&lt;/h3>
&lt;p>&lt;code>AnimationClip/AnimationController&lt;/code>をセットしたり、&lt;code>VRMLookAtHead&lt;/code>の&lt;code>Target&lt;/code>に&lt;a href="https://vrm.dev/docs/univrm/lookat/univrm_lookat/#target">GameObject&lt;/a>をセットしたり（視線がどこを向くかの設定）、&lt;code>Head&lt;/code>欄にヘッドコンポーネントを探したり、実際にUnity上で動作を確認します。モデルはプレイモードでターゲット位置を追跡します（たとえば、&lt;code>GameObject -&amp;gt; 3D Object -&amp;gt; Cube&lt;/code>からターゲットとしてキュ​​ーブをヒエラルキーに作成できます）。シーンに配置されたオブジェクトをドラッグして、モデルの目がリアルタイムでオブジェクトを追跡しているかどうかをテストできます。モデルのクローズアップフェイスは、インスペクターウィンドウで見れます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/LookAtTarget.png" alt="LookAtTarget" width="900" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/TargetTracking.png" alt="TargetTracking" width="500" />
&lt;/p>
&lt;h3 id="表情を確認する">表情を確認する&lt;/h3>
&lt;p>モデルの表情を確認するには、非常に簡単なテストスクリプト「AIUEO」と「Blinker」を用意しています。&lt;a href="https://vrm.dev/docs/univrm/blendshape/univrm_blendshape/#vrmblendshapeproxy">BlendShape&lt;/a>をセットアップした後、&lt;code>Add Component&lt;/code>から「AIUEO」を選んでセットすれば「あ」「い」「う」「え」「お」の口の形に順番に切り替わるアニメーションが、「Blinker」を選んでセットすれば定期的にまばたきのアニメーションが行われます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeProxy.png" alt="BlendShapeProxy" width="650" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>BlendShapeAvatar&lt;/code>フィールドにダブルクリックして、3Dモデルの表情を設定します&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/AddExpressionScripts.png" alt="AddExpressionScripts" width="650" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/InspectorFaceView.png" alt="InspectorFaceView" width="400" />
&lt;/p></description></item><item><title>Docs: アニメーション</title><link>https://vrm.dev/docs/univrm/gltf/animation_exporter/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/animation_exporter/</guid><description>
&lt;p>GLTF は、Animation の定義があります。&lt;/p>
&lt;blockquote>
&lt;p>VRM は、Animation を使わないという仕様です&lt;/p>
&lt;/blockquote>
&lt;h3 id="対応バージョン">対応バージョン&lt;/h3>
&lt;ul>
&lt;li>v0.44&lt;/li>
&lt;/ul>
&lt;h3 id="対応状況">対応状況&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">KeyName&lt;/th>
&lt;th align="center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">TranslationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">RotationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ScaleKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">BlendShapeKey&lt;/td>
&lt;td align="center">×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="animatorをエクスポートする場合">Animatorをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimatorコンポーネントを追加&lt;/li>
&lt;li>AnimatorControllerを作成し、それをAnimatorのController項目に設定&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>このクリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="animationをエクスポートする場合">Animationをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimationコンポーネントを追加&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>Inspectorの設定をDebugモードにしてAnimationClipのLegacyフラグをONにする&lt;br>
&lt;img src="https://vrm.dev/images/wiki/LegacyClip.png" alt="Interpolation">&lt;/li>
&lt;li>AnimationコンポーネントのAnimation項目に作成したAnimationClipを設定&lt;/li>
&lt;li>クリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="注意事項">注意事項&lt;/h3>
&lt;ol>
&lt;li>RotationKeyのInterpolation設定をQuaternionかまたはEulerAngles(Quaternion)にすること&lt;br>
&lt;img src="https://vrm.dev/images/wiki/Interpolation.png" alt="Interpolation">&lt;/li>
&lt;li>Animatorの場合は設定されている全てのClipを検索して書き出しをしているが、ステートの状態などは出力されない&lt;/li>
&lt;li>Animator経由だと複数のアニメーションが書き込まれるが、UniGLTFのImporterが読み込むのは最初の１つだけ(UniGLTF-1.25時点）&lt;/li>
&lt;/ol></description></item><item><title>Docs: UniVRMをアンインストールする</title><link>https://vrm.dev/docs/univrm/install/univrm_uninstall/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_uninstall/</guid><description>
&lt;p>以下のフォルダを削除してください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>folder&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Assets/VRM&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/UniGLTF&lt;/td>
&lt;td>v0.63.0以降&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/VRMShaders&lt;/td>
&lt;td>v0.56.0以降&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/MeshUtility&lt;/td>
&lt;td>v0.59.0以降～v0.63.0&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>folder&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Assets/VRM.Samples&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-samples-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/StreamingAssets/VRM.Samples&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-samples-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>UniVRMのバージョンを更新する前に一度上記を削除する方が安全です。&lt;/p>
&lt;ul>
&lt;li>バージョン間でファイルが移動していた場合に、元の場所で上書きされて不整合を起こす場合があります。&lt;/li>
&lt;/ul></description></item><item><title>Docs: VRMSpringBone</title><link>https://vrm.dev/docs/univrm/springbone/univrm_secondary/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/docs/univrm/springbone/univrm_secondary/</guid><description>
&lt;p>揺れモノ設定。&lt;/p>
&lt;h1 id="コンポーネントのアタッチされるノード">コンポーネントのアタッチされるノード&lt;/h1>
&lt;p>VRMをインポートしたとき、揺れモノ関連のコンポーネントは以下のようにアタッチされます。&lt;/p>
&lt;ul>
&lt;li>VRMSpringBoneは、名前が&lt;code>secondary&lt;/code>のノードが自動的に作成されてそこにアタッチされます。&lt;/li>
&lt;li>VRMSpringBoneColliderGroupは、エクスポート時にアタッチされていたノードに復旧されます。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMSpringBoneが見つからない場合には&lt;code>secondary&lt;/code>ノードをご確認ください。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="vrmspringbone">VRMSpringBone&lt;/h1>
&lt;p>尻尾、髪の毛、衣装などで動きに合わせて揺れて欲しいものの設定です。
揺らしたいオブジェクトの一番親のGameObjectをRootBonesにセットしてください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMSpringBone.png" alt="lookat" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>RootBonesに髪の毛とリボンを設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>これだけで、指定したボーンが動きに合わせて揺れます。&lt;/p>
&lt;h1 id="オプションvrmspringbonecollidergroup当たり判定">[オプション]VRMSpringBoneColliderGroup(当たり判定)&lt;/h1>
&lt;p>揺れモノが特定の部位を貫通しないように、当たり判定を入れることができます。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/collider.png" alt="collider" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>headに頭に当たり判定(VRMSpringBoneColliderGroup)を設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>当たり判定を入れたいボーンにVRMSpringBoneColliderGroupをアタッチして、VRMSpringBoneのColliderGroupsにセットしてください。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/set_collider.png" alt="set_collider" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>headにVRMSpringBoneColliderGroupをアタッチして、VRMSpringBoneのCollierGroupsに設定&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/spring_gizmo.png" alt="gizmo" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>動作時のGizmo。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ひとつのvrmspringbonecollidergroupに複数の当たり判定を設定できます">ひとつのVRMSpringBoneColliderGroupに複数の当たり判定を設定できます&lt;/h2>
&lt;p>VRMSpringBoneColliderGroupには最初からひとつの球が設定されますが、複数の球をセットすることができます。&lt;/p>
&lt;h1 id="設定したvrmspringboneが居なくなった">設定したVRMSpringBoneが居なくなった&lt;/h1>
&lt;p>VRMSpringBoneはインポート時に&lt;code>secondary&lt;/code>ノードにアタッチされます。
エクスポート時と違う場所に現れるのでご注意ください。&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/springbone/univrm_secondary/#コンポーネントのアタッチされるノード">VRMSpringBone&lt;/a>&lt;/p></description></item><item><title>Docs: 拡張を実装する</title><link>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</link><pubDate>Mon, 15 Mar 2021 17:10:43 +0900</pubDate><guid>https://vrm.dev/docs/univrm/gltf/how_to_impl_extension/</guid><description>
&lt;p>&lt;code>UniVRM-0.63.2&lt;/code> から &lt;a href="https://vrm.dev/docs/univrm/gltf/unigltf/">UniGLTF&lt;/a> の構成が変わって、 &lt;code>extensions&lt;/code> / &lt;code>extras&lt;/code> の実装方法が変わりました。&lt;/p>
&lt;h2 id="gltf-拡張とは">GLTF 拡張とは&lt;/h2>
&lt;p>例 &lt;a href="https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras">https://github.com/KhronosGroup/glTF/tree/master/extensions#extensions-vs-extras&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;asset&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#f60">2.0&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;extras&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;guid&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;#34;&lt;/span>,
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>名前(JsonPath)が &lt;code>asset.extras.guid&lt;/code> で値が &lt;code>&amp;quot;9abb92a3-39cf-4986-a758-c43d4bb4ab58&amp;quot;&lt;/code> です。
&lt;code>extensions&lt;/code> (&lt;code>extras&lt;/code> 。複数形に注意) の&lt;/p>
&lt;ul>
&lt;li>JsonPath。例 &lt;code>extensions.VRM&lt;/code>, &lt;code>asset.extras.guid&lt;/code>&lt;/li>
&lt;li>型、内容。例 object(VRMに関する諸々), string(guid文字列)&lt;/li>
&lt;/ul>
&lt;p>の取り決めが &lt;code>GTTF拡張&lt;/code> です。&lt;/p>
&lt;p>&lt;code>extensions&lt;/code> はオフィシャルに仕様を策定して &lt;code>JsonSchema&lt;/code> として公開する。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/KhronosGroup/glTF/tree/master/extensions">https://github.com/KhronosGroup/glTF/tree/master/extensions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>extras&lt;/code> は &lt;code>JsonSchema&lt;/code> を作るほどでもないちょっとした追加データを手軽に追加という気持ちの違いです。仕組みは同じです。&lt;/p>
&lt;blockquote>
&lt;p>This enables glTF models to contain application-specific properties without creating a full glTF extension&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>extensions&lt;/code> は、&lt;code>{ベンダー名}_{拡張名}&lt;/code> という命名規則です。
ベンダー名は、 &lt;a href="https://github.com/KhronosGroup/glTF">https://github.com/KhronosGroup/glTF&lt;/a> に申し込んで登録できます。&lt;/p>
&lt;h2 id="unigltf-の-extensions">UniGLTF の extensions&lt;/h2>
&lt;p>&lt;code>v0.63.0&lt;/code> 以前は、&lt;code>GLTF 型&lt;/code> の &lt;code>extensions&lt;/code> フィールドに、&lt;code>GLTFExtensions&lt;/code> 型を定義して、&lt;code>VRM&lt;/code> フィールドを定義するという方法をとっていました。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">VRM&lt;/span>
{
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFExtensions&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> VRM VRM;
}
&lt;span style="color:#09f;font-style:italic">// すべての拡張の型を事前に知っている必要があり、拡張を分離できない
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTF&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GLTFExtensions extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// 個々の extensions に対して別個の型を定義する必要がある
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFMaterialExtensions&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> KHR_materials_unlit KHR_materials_unlit;
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTFMaterial&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> GLTFMaterialExtensions extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この設計だと GLTF と拡張を別ライブラリとして分離することができませんでした。&lt;/p>
&lt;p>&lt;code>v0.63.1&lt;/code> から設計を変更して、すべての &lt;code>extensions/extras&lt;/code> に同じ型の入れ物を使うように変更しました。
UniGLTF は &lt;code>import/export&lt;/code> の具体的な内容を知らずに中間データの入れ物として扱います。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// extensions / extras の入れ物として使う型
&lt;/span>&lt;span style="color:#09f;font-style:italic">// 実行時は、 glTFExtensionImport / glTFExtensionExport を使う
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">abstract&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">glTFExtension&lt;/span>
{
}
&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GLTF&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// UniGLTFは具体的な型を知らない。利用側が処理(serialize/deserialize)する
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> glTFExtension extensions;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="unigltf-の拡張の書き方">UniGLTF の拡張の書き方&lt;/h2>
&lt;p>拡張は、以下の部品要素から作れます。&lt;/p>
&lt;ul>
&lt;li>名前(JsonPath)。例: &lt;code>extensions.VRM&lt;/code>, &lt;code>materials[*].extensions.KHR_materials_unlit&lt;/code>&lt;/li>
&lt;li>拡張の型。&lt;code>T型&lt;/code>&lt;/li>
&lt;li>デシリアライザー(import)。 &lt;code>jsonバイト列 =&amp;gt; T型&lt;/code>&lt;/li>
&lt;li>シリアライザーexport)。&lt;code>T型 =&amp;gt; jsonバイト列&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="jsonpath-と-型を決める">JSONPATH と 型を決める&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">&lt;span style="color:#09f;font-style:italic">// 型
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">GoodMaterial&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">// `materials[*].extensions.CUSTOM_materials_good`
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> EXTENSION_NAME = &lt;span style="color:#c30">&amp;#34;CUSTOM_materials_good&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#078;font-weight:bold">int&lt;/span> GoodValue;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="import">import&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C#" data-lang="C#">GoodMaterial DeserializeGoodMaterial(ListTreeNode&amp;lt;JsonValue&amp;gt; json)
{
&lt;span style="color:#09f;font-style:italic">// デシリアライズ。手で書くかコード生成する(後述)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>}
&lt;span style="color:#09f;font-style:italic">// ユーティリティ関数例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#078;font-weight:bold">bool&lt;/span> TryGetExtension&amp;lt;T&amp;gt;(UniGLTF.glTFExtension extension, &lt;span style="color:#078;font-weight:bold">string&lt;/span> key, Func&amp;lt;ListTreeNode&amp;lt;JsonValue&amp;gt;, T&amp;gt; deserializer, &lt;span style="color:#069;font-weight:bold">out&lt;/span> T &lt;span style="color:#069;font-weight:bold">value&lt;/span>)
{
&lt;span style="color:#069;font-weight:bold">if&lt;/span>(material.extensions &lt;span style="color:#069;font-weight:bold">is&lt;/span> UniGLTF.glTFExtensionsImport import)
{
&lt;span style="color:#09f;font-style:italic">// null check 完了
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">foreach&lt;/span>(&lt;span style="color:#078;font-weight:bold">var&lt;/span> kv &lt;span style="color:#069;font-weight:bold">in&lt;/span> import.ObjectItems())
{
&lt;span style="color:#069;font-weight:bold">if&lt;/span>(kv.key.GetString()==key)
{
&lt;span style="color:#069;font-weight:bold">value&lt;/span> = Deserialize(kv.Value);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">true&lt;/span>;
}
}
}
&lt;span style="color:#069;font-weight:bold">value&lt;/span> = &lt;span style="color:#069;font-weight:bold">default&lt;/span>;
&lt;span style="color:#069;font-weight:bold">return&lt;/span> &lt;span style="color:#069;font-weight:bold">false&lt;/span>;
}
&lt;span style="color:#069;font-weight:bold">void&lt;/span> ImportMaterial(UniGLTF.glTFMaterial material)
{
&lt;span style="color:#09f;font-style:italic">// material の処理に割り込んで
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(TryGetExtension(material.extension, GoodMaterial.EXTENSION_NAME, DeserializeGoodMaterial, &lt;span style="color:#069;font-weight:bold">out&lt;/span> GoodMaterial good))
{
&lt;span style="color:#09f;font-style:italic">// good material 独自の処理
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="export">export&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">void&lt;/span> SerializeGoodMaterial(UniJSON.JsonFormatter f, GoodMaterial &lt;span style="color:#069;font-weight:bold">value&lt;/span>)
{
&lt;span style="color:#09f;font-style:italic">// シリアライズ。手で書くかコード生成する(後述)
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>}
&lt;span style="color:#09f;font-style:italic">// ユーティリティ関数例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">public&lt;/span> ArraySegment&amp;lt;&lt;span style="color:#078;font-weight:bold">byte&lt;/span>&amp;gt; SerializeExtension&amp;lt;T&amp;gt;(T &lt;span style="color:#069;font-weight:bold">value&lt;/span>, Func&amp;lt;T, ArraySegment&amp;lt;&lt;span style="color:#078;font-weight:bold">byte&lt;/span>&amp;gt;&amp;gt; serialize)
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> f = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniJSON.JsonFormatter();
serialize(f, &lt;span style="color:#069;font-weight:bold">value&lt;/span>);
&lt;span style="color:#069;font-weight:bold">return&lt;/span> f.GetStoreBytes();
}
&lt;span style="color:#069;font-weight:bold">void&lt;/span> ExportGoodMaterial(UniGLTF.glTFMaterial material, GoodMaterial good)
{
&lt;span style="color:#09f;font-style:italic">// material の処理に割り込んで
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(!(material.extensions &lt;span style="color:#069;font-weight:bold">is&lt;/span> UniGLTF.glTFExtensionsExport export))
{
&lt;span style="color:#09f;font-style:italic">// 無かった。新規作成
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> export = &lt;span style="color:#069;font-weight:bold">new&lt;/span> UniGLTF.glTFExtensionsExport();
material.extensions = export;
}
&lt;span style="color:#078;font-weight:bold">var&lt;/span> bytes = SerializeExtension(good, SerializeGoodMaterial);
export.Add(GoodMaterial.EXTENSION_NAME, bytes);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="実装例">実装例&lt;/h2>
&lt;h3 id="gltf-gltf全体">GLTF: GLTF全体&lt;/h3>
&lt;p>&lt;code>C#の型からコード生成&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\GltfSerializer.g.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\GltfDeserializer.g.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>ジェネレーターの呼び出しコード&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-meshesextrastargetnames">GLTF: &lt;code>meshes[*].extras.targetNames&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\gltf_mesh_extras_targetNames.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-materialsextensionskhr_materials_unlit">GLTF: &lt;code>materials[*].extensions.KHR_materials_unlit&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_materials_unlit.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;h3 id="gltf-materialsextensionskhr_texture_transform">GLTF: &lt;code>materials[*].extensions.KHR_texture_transform&lt;/code>&lt;/h3>
&lt;p>&lt;code>コード生成せずに手書き&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Runtime\UniGLTF\Format\ExtensionsAndExtras\KHR_texture_transform.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296">https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialImporter.cs#L296&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193">https://github.com/vrm-c/UniVRM/blob/master/Assets/UniGLTF/Runtime/UniGLTF/IO/MaterialExporter.cs#L193&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="vrm0-extensionsvrm">VRM0: &lt;code>extensions.VRM&lt;/code>&lt;/h3>
&lt;p>&lt;code>C#の型からコード生成&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\VRM\Runtime\Format\VRMSerializer.g.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\VRM\Runtime\Format\VRMDeserializer.g.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>ジェネレーターの呼び出しコード&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\VRM\Editor\VRMSerializerGenerator.cs&lt;/code>&lt;/li>
&lt;li>&lt;code>Assets\VRM\Editor\VRMDeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生成コードの呼び出し&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41">https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMImporterContext.cs#L41&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209">https://github.com/vrm-c/UniVRM/blob/master/Assets/VRM/Runtime/IO/VRMExporter.cs#L209&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="vrm1-extensionsvrmc_vrm-など">VRM1: &lt;code>extensions.VRMC_vrm&lt;/code> など&lt;/h3>
&lt;p>&lt;code>JsonSchemaからコード生成&lt;/code>&lt;/p>
&lt;p>5つの Extensions に分かれたので個別に作成。
ささる場所(JsonPath)が違うのに注意。&lt;/p>
&lt;h4 id="extensionsvrmc_vrm">&lt;code>extensions.VRMC_vrm&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\VRM&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="materialsextensionsvrmc_materials_mtoon">&lt;code>materials[*].extensions.VRMC_materials_mtoon&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\MaterialsMToon&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="nodesextensionsvrmc_node_collider">&lt;code>nodes[*].extensions.VRMC_node_collider&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\NodeCollider&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="extensionsvrmc_springbone">&lt;code>extensions.VRMC_springBone&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\SpringBone&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="extensionsvrmc_vrm_constraints">&lt;code>extensions.VRMC_vrm_constraints&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Runtime\Format\Constraints&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="ジェネレーターの呼び出しコード">ジェネレーターの呼び出しコード&lt;/h4>
&lt;ul>
&lt;li>&lt;code>Assets\VRM10\Editor\GeneratorMenu.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="生成コードの呼び出し">生成コードの呼び出し&lt;/h4>
&lt;h2 id="コード生成">コード生成&lt;/h2>
&lt;p>JSON と C# の型との シリアライズ/デシリアライズは定型コードになるので、ジェネレーターがあります。
C# の型から生成するものと、JsonSchema から C# の型とともに生成するものがあります。&lt;/p>
&lt;h3 id="c-の型から生成">C# の型から生成&lt;/h3>
&lt;h4 id="シリアライザー">シリアライザー&lt;/h4>
&lt;p>ジェネレーターを呼び出すコードを作成します。&lt;/p>
&lt;ul>
&lt;li>元になる型&lt;/li>
&lt;li>出力先&lt;/li>
&lt;/ul>
&lt;p>の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p>
&lt;p>例&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\SerializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Collections.Generic&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Reflection&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Text&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniJSON&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEditor&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">SerializerGenerator&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">const&lt;/span> BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> Begin = &lt;span style="color:#c30">@&amp;#34;// Don&amp;#39;t edit manually. This is generaged.
&lt;/span>&lt;span style="color:#c30">using System;
&lt;/span>&lt;span style="color:#c30">using System.Collections.Generic;
&lt;/span>&lt;span style="color:#c30">using UniJSON;
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">namespace UniGLTF {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30"> static public class GltfSerializer
&lt;/span>&lt;span style="color:#c30"> {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> End = &lt;span style="color:#c30">@&amp;#34;
&lt;/span>&lt;span style="color:#c30"> } // class
&lt;/span>&lt;span style="color:#c30">} // namespace
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> OutPath
{
&lt;span style="color:#069;font-weight:bold">get&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> Path.Combine(UnityEngine.Application.dataPath,
&lt;span style="color:#c30">&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfSerializer.g.cs&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Serializer&amp;#34;)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> GenerateSerializer()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> info = &lt;span style="color:#069;font-weight:bold">new&lt;/span> ObjectSerialization(&lt;span style="color:#069;font-weight:bold">typeof&lt;/span>(glTF), &lt;span style="color:#c30">&amp;#34;gltf&amp;#34;&lt;/span>, &lt;span style="color:#c30">&amp;#34;Serialize_&amp;#34;&lt;/span>);
Debug.Log(info);
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> s = File.Open(OutPath, FileMode.Create))
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> w = &lt;span style="color:#069;font-weight:bold">new&lt;/span> StreamWriter(s, &lt;span style="color:#069;font-weight:bold">new&lt;/span> UTF8Encoding(&lt;span style="color:#069;font-weight:bold">false&lt;/span>)))
{
w.Write(Begin);
info.GenerateSerializer(w, &lt;span style="color:#c30">&amp;#34;Serialize&amp;#34;&lt;/span>);
w.Write(End);
}
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;write: {0}&amp;#34;&lt;/span>, OutPath);
UnityPath.FromFullpath(OutPath).ImportAsset();
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="デシリアライザー">デシリアライザー&lt;/h4>
&lt;p>ジェネレーターを呼び出すコードを作成します。&lt;/p>
&lt;ul>
&lt;li>元になる型&lt;/li>
&lt;li>出力先&lt;/li>
&lt;/ul>
&lt;p>の２つを決めます。static関数を生成するので、namespace と static class で囲ってあげます。&lt;/p>
&lt;p>例&lt;/p>
&lt;ul>
&lt;li>&lt;code>Assets\UniGLTF\Editor\UniGLTF\Serialization\DeserializerGenerator.cs&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.IO&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Reflection&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">System.Text&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEditor&lt;/span>;
&lt;span style="color:#069;font-weight:bold">using&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UnityEngine&lt;/span>;
&lt;span style="color:#069;font-weight:bold">namespace&lt;/span> &lt;span style="color:#0cf;font-weight:bold">UniGLTF&lt;/span>
{
&lt;span style="color:#09f;font-style:italic">/// &amp;lt;summary&amp;gt;
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">/// Generate deserializer from ListTreeNode&amp;lt;JsonValue&amp;gt; to glTF using type reflection
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#09f;font-style:italic">/// &amp;lt;/summary&amp;gt;
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">class&lt;/span> &lt;span style="color:#0a8;font-weight:bold">DeserializerGenerator&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">public&lt;/span> &lt;span style="color:#069;font-weight:bold">const&lt;/span> BindingFlags FIELD_FLAGS = BindingFlags.Instance | BindingFlags.Public;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> Begin = &lt;span style="color:#c30">@&amp;#34;// Don&amp;#39;t edit manually. This is generaged.
&lt;/span>&lt;span style="color:#c30">using UniJSON;
&lt;/span>&lt;span style="color:#c30">using System;
&lt;/span>&lt;span style="color:#c30">using System.Collections.Generic;
&lt;/span>&lt;span style="color:#c30">using UnityEngine;
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">namespace UniGLTF {
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">public static class GltfDeserializer
&lt;/span>&lt;span style="color:#c30">{
&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">const&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> End = &lt;span style="color:#c30">@&amp;#34;
&lt;/span>&lt;span style="color:#c30">} // GltfDeserializer
&lt;/span>&lt;span style="color:#c30">} // UniGLTF
&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>;
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#078;font-weight:bold">string&lt;/span> OutPath
{
&lt;span style="color:#069;font-weight:bold">get&lt;/span>
{
&lt;span style="color:#069;font-weight:bold">return&lt;/span> Path.Combine(UnityEngine.Application.dataPath,
&lt;span style="color:#c30">&amp;#34;UniGLTF/UniGLTF/Scripts/IO/GltfDeserializer.g.cs&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309"> [MenuItem(UniGLTFVersion.MENU + &amp;#34;/GLTF: Generate Deserializer&amp;#34;)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">static&lt;/span> &lt;span style="color:#069;font-weight:bold">void&lt;/span> GenerateSerializer()
{
&lt;span style="color:#078;font-weight:bold">var&lt;/span> info = &lt;span style="color:#069;font-weight:bold">new&lt;/span> ObjectSerialization(&lt;span style="color:#069;font-weight:bold">typeof&lt;/span>(glTF), &lt;span style="color:#c30">&amp;#34;gltf&amp;#34;&lt;/span>, &lt;span style="color:#c30">&amp;#34;Deserialize_&amp;#34;&lt;/span>);
Debug.Log(info);
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> s = File.Open(OutPath, FileMode.Create))
&lt;span style="color:#069;font-weight:bold">using&lt;/span> (&lt;span style="color:#078;font-weight:bold">var&lt;/span> w = &lt;span style="color:#069;font-weight:bold">new&lt;/span> StreamWriter(s, &lt;span style="color:#069;font-weight:bold">new&lt;/span> UTF8Encoding(&lt;span style="color:#069;font-weight:bold">false&lt;/span>)))
{
w.Write(Begin);
info.GenerateDeserializer(w, &lt;span style="color:#c30">&amp;#34;Deserialize&amp;#34;&lt;/span>);
w.Write(End);
}
Debug.LogFormat(&lt;span style="color:#c30">&amp;#34;write: {0}&amp;#34;&lt;/span>, OutPath);
UnityPath.FromFullpath(OutPath).ImportAsset();
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="キー出力の抑制">キー出力の抑制&lt;/h4>
&lt;p>&lt;code>index&lt;/code> に無効な値として &lt;code>-1&lt;/code> を入れる場合に、JSONではキーを出力しないとしたいことがあります。&lt;/p>
&lt;p>TODO: &lt;code>int?&lt;/code> にするべきだった&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#309">[JsonSchema(Minimum = 0)]&lt;/span>
&lt;span style="color:#078;font-weight:bold">int&lt;/span> index = -&lt;span style="color:#f60">1&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>のようにすることで、キーの出力を抑制できます。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#09f;font-style:italic">// 生成コードのキー出力例
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(&lt;span style="color:#069;font-weight:bold">value&lt;/span>.index&amp;gt;=&lt;span style="color:#f60">0&lt;/span>){
&lt;/code>&lt;/pre>&lt;/div>&lt;p>何も付けないと&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs"> &lt;span style="color:#09f;font-style:italic">// 出力制御無し
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">if&lt;/span>(&lt;span style="color:#069;font-weight:bold">true&lt;/span>){
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="enum-のエンコーディング">enum のエンコーディング&lt;/h4>
&lt;p>enumの値の名前を文字列で使う、enumの値の数値を使うの2種類がありえます。
enumの場合はデフォルト値が無いので必須です。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#309">[JsonSchema(EnumSerializationType = EnumSerializationType.AsInt)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> glBufferTarget target;
&lt;span style="color:#309">
&lt;/span>&lt;span style="color:#309">[JsonSchema(EnumSerializationType = EnumSerializationType.AsLowerString)]&lt;/span>
&lt;span style="color:#069;font-weight:bold">public&lt;/span> ProjectionType type;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="jsonschemaから生成">JsonSchemaから生成&lt;/h3>
&lt;p>VRM-1.0 の実装&lt;/p>
&lt;p>TODO:&lt;/p></description></item><item><title>Docs: VRMShaders UPMパッケージ</title><link>https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/docs/univrm/shaders/univrm_vrmshaders/</guid><description>
&lt;p>&lt;code>UniVRM-0.56&lt;/code> からフォルダ構成を変更して、
&lt;code>UniVRM&lt;/code> のマテリアル関連の機能は、 &lt;code>Assets/VRMShaders&lt;/code> に移動しました。&lt;/p>
&lt;h2 id="upm-パッケージ">UPM パッケージ&lt;/h2>
&lt;p>パッケージとして独立して、 &lt;code>UniVRM&lt;/code> とは関係なくマテリアル関連だけ単体で使うことできます。
( &lt;code>UniVRM&lt;/code> が &lt;code>VRMShaders&lt;/code> を使う関係)。
&lt;code>UniUnlit&lt;/code> と &lt;code>MToon&lt;/code> を内包しています。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">manifest.json&lt;/span> &lt;span style="color:#a00;background-color:#faa">抜粋&lt;/span>
{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.57.0&amp;#34;&lt;/span>,
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>#0.57.0&lt;/code> 部分で UniVRM のリリース番号(github の tag)を指定します。
&lt;code>VRMShaders&lt;/code> は &lt;code>VRM&lt;/code> と同じリリース番号を適用する運用をしています。&lt;/p>
&lt;h3 id="uniunlit">UniUnlit&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/univrm_unlit/">unlit&lt;/a>&lt;/p>
&lt;h3 id="mtoon">MToon&lt;/h3>
&lt;p>&lt;a href="https://github.com/Santarh/MToon">https://github.com/Santarh/MToon&lt;/a>&lt;/p>
&lt;p>で開発しています。
git submodule で、VRMShaders 配下になるようにしています。&lt;/p>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/tree/master/Assets/VRMShaders">https://github.com/vrm-c/UniVRM/tree/master/Assets/VRMShaders&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/docs/univrm/shaders/shader_mtoon/">mtoon&lt;/a>&lt;/p></description></item><item><title>Docs: UniVRM Version</title><link>https://vrm.dev/docs/univrm/install/univrm_version/</link><pubDate>Mon, 22 Mar 2021 13:53:48 +0900</pubDate><guid>https://vrm.dev/docs/univrm/install/univrm_version/</guid><description>
&lt;h1 id="version">Version&lt;/h1>
&lt;ul>
&lt;li>更新で入った新しいバグ: バージョンアップで新規に混入したバグ。迅速にバグフィックス&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>date&lt;/th>
&lt;th>version&lt;/th>
&lt;th>更新で入った新しいバグ&lt;/th>
&lt;th>更新内容・備考&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2019&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.55.0">0.55.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Unity-5.6 対応最終版&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.0">0.56.0&lt;/a>&lt;/td>
&lt;td>x&lt;/td>
&lt;td>Unity-2018.4 に変更&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.1">0.56.1&lt;/a>&lt;/td>
&lt;td>x&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.2">0.56.2&lt;/a>&lt;/td>
&lt;td>x&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.3">0.56.3&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.57.0">0.57.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>ボーン名重複時にに自動でリネームするようになりました&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.57.1">0.57.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.58.0">0.58.0&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/td>
&lt;td>エクスポートダイアログの作り直し&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.58.1">0.58.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.59.0">0.59.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>springBone の Missing を検知してメッセージ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.60.0">0.60.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>null check 的なものが増えて、モデル改変してもエラーが出にくくなりました&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.61.0">0.61.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/20?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/td>
&lt;td>UniUnlit の頂点カラー。AOT問題を修正&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.61.1">0.61.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.62.0">0.62.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/21?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>BlendShape bake の動作が正しくなった&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2021&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.63.0">0.63.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/25?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/td>
&lt;td>jpg問題あり。UniGLTF分離&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.63.1">0.63.1&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/td>
&lt;td>jpg問題あり&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.63.2">0.63.2&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.64.0">0.64.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/23?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/td>
&lt;td>メッシュの一部を削除したときのエクスポートエラーを回避。vrm-1.0 Experimental&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.0">0.65.0&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.1">0.65.1&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/28?closed=1">misestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/td>
&lt;td>トルコ語のExportを修正&lt;a href="https://github.com/vrm-c/UniVRM/issues/696">#696&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.2">0.65.2&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/29?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.3">0.65.3&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniGLTFのバージョン。UPM専用。パッケージリリース無し&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.66.0">0.66.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/26?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>未正規化ヒエラルキーにスプリングボーンがあるときの警告メッセージ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.67.0">0.67.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/27?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>UPM専用。パッケージリリース無し&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.67.1">0.67.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>UPM専用。パッケージリリース無し&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.68.0">0.68.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/30?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup> &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/td>
&lt;td>glb/gltf 座標軸オプション。ImporterContext API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/16&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.68.1">0.68.1&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/17&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.68.2">0.68.2&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/22&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.69.0">0.69.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/31?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>SmoothTexture 変換の修正&lt;a href="https://github.com/vrm-c/UniVRM/issues/388">#388&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>VRMFirstPerson のエディターインポートのバグ &lt;a href="https://github.com/vrm-c/UniVRM/issues/515">/#515&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>スプリングボーンのコライダーの座標変換バグ。 &lt;a href="https://github.com/vrm-c/UniVRM/issues/576">#576&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>エクスポートダイアログのスクリーンショットボタンの jpg バグ。&lt;a href="https://github.com/vrm-c/UniVRM/issues/639">#639&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>シリアライザのバグ。エクスポートしたファイルの互換性。 &lt;a href="https://github.com/vrm-c/UniVRM/issues/654">#654&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>MeshUtility フォルダの移動と参照の問題。 &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>他のパッケージと併用するときに install で問題が出る？ &lt;a href="https://github.com/vrm-c/UniVRM/pull/687">#687&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>build すると Exception( &lt;code>#if UNITY_EDITOR&lt;/code> )。 &lt;a href="https://github.com/vrm-c/UniVRM/issues/701">#701&lt;/a> &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/issues/786">#786&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/issues/788">#788&lt;/a> &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/issues/790">#790&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/issues/794">#794&lt;/a> &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>